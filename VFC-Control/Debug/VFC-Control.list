
VFC-Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009030  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080091c0  080091c0  000191c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800939c  0800939c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800939c  0800939c  0001939c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a4  080093a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a4  080093a4  000193a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093a8  080093a8  000193a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080093ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055c8  20000010  080093bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200055d8  080093bc  000255d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fb3a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039e1  00000000  00000000  0003fb7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001960  00000000  00000000  00043560  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001798  00000000  00000000  00044ec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002404f  00000000  00000000  00046658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013b5e  00000000  00000000  0006a6a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc992  00000000  00000000  0007e205  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015ab97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b80  00000000  00000000  0015ac14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091a8 	.word	0x080091a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080091a8 	.word	0x080091a8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20005530 	.word	0x20005530

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b972 	b.w	8000560 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	4688      	mov	r8, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14b      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4615      	mov	r5, r2
 80002a6:	d967      	bls.n	8000378 <__udivmoddi4+0xe4>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0720 	rsb	r7, r2, #32
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ba:	4095      	lsls	r5, r2
 80002bc:	ea47 0803 	orr.w	r8, r7, r3
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002cc:	fa1f fc85 	uxth.w	ip, r5
 80002d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d8:	fb07 f10c 	mul.w	r1, r7, ip
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18eb      	adds	r3, r5, r3
 80002e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002e6:	f080 811b 	bcs.w	8000520 <__udivmoddi4+0x28c>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8118 	bls.w	8000520 <__udivmoddi4+0x28c>
 80002f0:	3f02      	subs	r7, #2
 80002f2:	442b      	add	r3, r5
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fc0c 	mul.w	ip, r0, ip
 8000308:	45a4      	cmp	ip, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	192c      	adds	r4, r5, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8107 	bcs.w	8000524 <__udivmoddi4+0x290>
 8000316:	45a4      	cmp	ip, r4
 8000318:	f240 8104 	bls.w	8000524 <__udivmoddi4+0x290>
 800031c:	3802      	subs	r0, #2
 800031e:	442c      	add	r4, r5
 8000320:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000324:	eba4 040c 	sub.w	r4, r4, ip
 8000328:	2700      	movs	r7, #0
 800032a:	b11e      	cbz	r6, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c6 4300 	strd	r4, r3, [r6]
 8000334:	4639      	mov	r1, r7
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0xbe>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80eb 	beq.w	800051a <__udivmoddi4+0x286>
 8000344:	2700      	movs	r7, #0
 8000346:	e9c6 0100 	strd	r0, r1, [r6]
 800034a:	4638      	mov	r0, r7
 800034c:	4639      	mov	r1, r7
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f783 	clz	r7, r3
 8000356:	2f00      	cmp	r7, #0
 8000358:	d147      	bne.n	80003ea <__udivmoddi4+0x156>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xd0>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80fa 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0303 	sbc.w	r3, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	4698      	mov	r8, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d0e0      	beq.n	8000334 <__udivmoddi4+0xa0>
 8000372:	e9c6 4800 	strd	r4, r8, [r6]
 8000376:	e7dd      	b.n	8000334 <__udivmoddi4+0xa0>
 8000378:	b902      	cbnz	r2, 800037c <__udivmoddi4+0xe8>
 800037a:	deff      	udf	#255	; 0xff
 800037c:	fab2 f282 	clz	r2, r2
 8000380:	2a00      	cmp	r2, #0
 8000382:	f040 808f 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000386:	1b49      	subs	r1, r1, r5
 8000388:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800038c:	fa1f f885 	uxth.w	r8, r5
 8000390:	2701      	movs	r7, #1
 8000392:	fbb1 fcfe 	udiv	ip, r1, lr
 8000396:	0c23      	lsrs	r3, r4, #16
 8000398:	fb0e 111c 	mls	r1, lr, ip, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb08 f10c 	mul.w	r1, r8, ip
 80003a4:	4299      	cmp	r1, r3
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a8:	18eb      	adds	r3, r5, r3
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4299      	cmp	r1, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1a59      	subs	r1, r3, r1
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x14c>
 80003d0:	192c      	adds	r4, r5, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x14a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80b6 	bhi.w	800054a <__udivmoddi4+0x2b6>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e79f      	b.n	800032a <__udivmoddi4+0x96>
 80003ea:	f1c7 0c20 	rsb	ip, r7, #32
 80003ee:	40bb      	lsls	r3, r7
 80003f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f8:	fa01 f407 	lsl.w	r4, r1, r7
 80003fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000400:	fa21 f30c 	lsr.w	r3, r1, ip
 8000404:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000408:	4325      	orrs	r5, r4
 800040a:	fbb3 f9f8 	udiv	r9, r3, r8
 800040e:	0c2c      	lsrs	r4, r5, #16
 8000410:	fb08 3319 	mls	r3, r8, r9, r3
 8000414:	fa1f fa8e 	uxth.w	sl, lr
 8000418:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800041c:	fb09 f40a 	mul.w	r4, r9, sl
 8000420:	429c      	cmp	r4, r3
 8000422:	fa02 f207 	lsl.w	r2, r2, r7
 8000426:	fa00 f107 	lsl.w	r1, r0, r7
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1e 0303 	adds.w	r3, lr, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	f080 8087 	bcs.w	8000546 <__udivmoddi4+0x2b2>
 8000438:	429c      	cmp	r4, r3
 800043a:	f240 8084 	bls.w	8000546 <__udivmoddi4+0x2b2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4473      	add	r3, lr
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	b2ad      	uxth	r5, r5
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000454:	fb00 fa0a 	mul.w	sl, r0, sl
 8000458:	45a2      	cmp	sl, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1e 0404 	adds.w	r4, lr, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	d26b      	bcs.n	800053e <__udivmoddi4+0x2aa>
 8000466:	45a2      	cmp	sl, r4
 8000468:	d969      	bls.n	800053e <__udivmoddi4+0x2aa>
 800046a:	3802      	subs	r0, #2
 800046c:	4474      	add	r4, lr
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	454c      	cmp	r4, r9
 800047c:	46c2      	mov	sl, r8
 800047e:	464b      	mov	r3, r9
 8000480:	d354      	bcc.n	800052c <__udivmoddi4+0x298>
 8000482:	d051      	beq.n	8000528 <__udivmoddi4+0x294>
 8000484:	2e00      	cmp	r6, #0
 8000486:	d069      	beq.n	800055c <__udivmoddi4+0x2c8>
 8000488:	ebb1 050a 	subs.w	r5, r1, sl
 800048c:	eb64 0403 	sbc.w	r4, r4, r3
 8000490:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000494:	40fd      	lsrs	r5, r7
 8000496:	40fc      	lsrs	r4, r7
 8000498:	ea4c 0505 	orr.w	r5, ip, r5
 800049c:	e9c6 5400 	strd	r5, r4, [r6]
 80004a0:	2700      	movs	r7, #0
 80004a2:	e747      	b.n	8000334 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ac:	4095      	lsls	r5, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	fa21 f303 	lsr.w	r3, r1, r3
 80004b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ba:	4338      	orrs	r0, r7
 80004bc:	0c01      	lsrs	r1, r0, #16
 80004be:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c2:	fa1f f885 	uxth.w	r8, r5
 80004c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb07 f308 	mul.w	r3, r7, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x256>
 80004da:	1869      	adds	r1, r5, r1
 80004dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e0:	d22f      	bcs.n	8000542 <__udivmoddi4+0x2ae>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d92d      	bls.n	8000542 <__udivmoddi4+0x2ae>
 80004e6:	3f02      	subs	r7, #2
 80004e8:	4429      	add	r1, r5
 80004ea:	1acb      	subs	r3, r1, r3
 80004ec:	b281      	uxth	r1, r0
 80004ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb00 f308 	mul.w	r3, r0, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x27e>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f100 3cff 	add.w	ip, r0, #4294967295
 8000508:	d217      	bcs.n	800053a <__udivmoddi4+0x2a6>
 800050a:	428b      	cmp	r3, r1
 800050c:	d915      	bls.n	800053a <__udivmoddi4+0x2a6>
 800050e:	3802      	subs	r0, #2
 8000510:	4429      	add	r1, r5
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000518:	e73b      	b.n	8000392 <__udivmoddi4+0xfe>
 800051a:	4637      	mov	r7, r6
 800051c:	4630      	mov	r0, r6
 800051e:	e709      	b.n	8000334 <__udivmoddi4+0xa0>
 8000520:	4607      	mov	r7, r0
 8000522:	e6e7      	b.n	80002f4 <__udivmoddi4+0x60>
 8000524:	4618      	mov	r0, r3
 8000526:	e6fb      	b.n	8000320 <__udivmoddi4+0x8c>
 8000528:	4541      	cmp	r1, r8
 800052a:	d2ab      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 800052c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000530:	eb69 020e 	sbc.w	r2, r9, lr
 8000534:	3801      	subs	r0, #1
 8000536:	4613      	mov	r3, r2
 8000538:	e7a4      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053a:	4660      	mov	r0, ip
 800053c:	e7e9      	b.n	8000512 <__udivmoddi4+0x27e>
 800053e:	4618      	mov	r0, r3
 8000540:	e795      	b.n	800046e <__udivmoddi4+0x1da>
 8000542:	4667      	mov	r7, ip
 8000544:	e7d1      	b.n	80004ea <__udivmoddi4+0x256>
 8000546:	4681      	mov	r9, r0
 8000548:	e77c      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054a:	3802      	subs	r0, #2
 800054c:	442c      	add	r4, r5
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0x14c>
 8000550:	f1ac 0c02 	sub.w	ip, ip, #2
 8000554:	442b      	add	r3, r5
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	4638      	mov	r0, r7
 800055a:	e708      	b.n	800036e <__udivmoddi4+0xda>
 800055c:	4637      	mov	r7, r6
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0xa0>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
return 0;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <Reset_UART2>:
/* USER CODE BEGIN 0 */
void Reset_UART1(){
	uint8_t testBuf[16] = {0};
	HAL_UART_Receive_DMA(&huart1, rxBuffer, sizeof(rxBuffer));
}
void Reset_UART2(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
	uint8_t testBuf[16] = {0};
 800058a:	463b      	mov	r3, r7
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart2, rxBuffer, sizeof(rxBuffer));
 8000596:	2204      	movs	r2, #4
 8000598:	4903      	ldr	r1, [pc, #12]	; (80005a8 <Reset_UART2+0x24>)
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <Reset_UART2+0x28>)
 800059c:	f002 ff50 	bl	8003440 <HAL_UART_Receive_DMA>
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000002c 	.word	0x2000002c
 80005ac:	20005440 	.word	0x20005440

080005b0 <OnMessage>:
void OnMessage(){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0

	osSemaphoreRelease(semUARTReadyHandle);
 80005b4:	4b03      	ldr	r3, [pc, #12]	; (80005c4 <OnMessage+0x14>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fe65 	bl	8004288 <osSemaphoreRelease>
}
 80005be:	bf00      	nop
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200054a8 	.word	0x200054a8

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fd7c 	bl	80010c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f858 	bl	8000684 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SEGGER_SYSVIEW_Conf();
 80005d4:	f008 fc6a 	bl	8008eac <SEGGER_SYSVIEW_Conf>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 fa00 	bl	80009dc <MX_GPIO_Init>
  MX_DMA_Init();
 80005dc:	f000 f9de 	bl	800099c <MX_DMA_Init>
  MX_CAN1_Init();
 80005e0:	f000 f8ae 	bl	8000740 <MX_CAN1_Init>
  MX_USART1_UART_Init();
 80005e4:	f000 f95c 	bl	80008a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005e8:	f000 f984 	bl	80008f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005ec:	f000 f9ac 	bl	8000948 <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80005f0:	f000 f8da 	bl	80007a8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 // Reset_UART1();
  Reset_UART2();
 80005f4:	f7ff ffc6 	bl	8000584 <Reset_UART2>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80005f8:	2100      	movs	r1, #0
 80005fa:	4818      	ldr	r0, [pc, #96]	; (800065c <main+0x94>)
 80005fc:	f002 f998 	bl	8002930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000600:	2104      	movs	r1, #4
 8000602:	4816      	ldr	r0, [pc, #88]	; (800065c <main+0x94>)
 8000604:	f002 f994 	bl	8002930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000608:	2108      	movs	r1, #8
 800060a:	4814      	ldr	r0, [pc, #80]	; (800065c <main+0x94>)
 800060c:	f002 f990 	bl	8002930 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000610:	210c      	movs	r1, #12
 8000612:	4812      	ldr	r0, [pc, #72]	; (800065c <main+0x94>)
 8000614:	f002 f98c 	bl	8002930 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4810      	ldr	r0, [pc, #64]	; (8000660 <main+0x98>)
 800061e:	f001 fc7b 	bl	8001f18 <HAL_GPIO_WritePin>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000622:	f003 fbef 	bl	8003e04 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semUARTReady */
  semUARTReadyHandle = osSemaphoreNew(1, 1, &semUARTReady_attributes);
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <main+0x9c>)
 8000628:	2101      	movs	r1, #1
 800062a:	2001      	movs	r0, #1
 800062c:	f003 fd28 	bl	8004080 <osSemaphoreNew>
 8000630:	4602      	mov	r2, r0
 8000632:	4b0d      	ldr	r3, [pc, #52]	; (8000668 <main+0xa0>)
 8000634:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskSendMockDat */
  taskSendMockDatHandle = osThreadNew(StartMockDataTask, NULL, &taskSendMockDat_attributes);
 8000636:	4a0d      	ldr	r2, [pc, #52]	; (800066c <main+0xa4>)
 8000638:	2100      	movs	r1, #0
 800063a:	480d      	ldr	r0, [pc, #52]	; (8000670 <main+0xa8>)
 800063c:	f003 fc4c 	bl	8003ed8 <osThreadNew>
 8000640:	4602      	mov	r2, r0
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <main+0xac>)
 8000644:	601a      	str	r2, [r3, #0]

  /* creation of taskUpdateTim1 */
  taskUpdateTim1Handle = osThreadNew(StartUpdateTim1, NULL, &taskUpdateTim1_attributes);
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <main+0xb0>)
 8000648:	2100      	movs	r1, #0
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <main+0xb4>)
 800064c:	f003 fc44 	bl	8003ed8 <osThreadNew>
 8000650:	4602      	mov	r2, r0
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <main+0xb8>)
 8000654:	601a      	str	r2, [r3, #0]
  /* add threads, ... */

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000656:	f003 fc09 	bl	8003e6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0x92>
 800065c:	20005378 	.word	0x20005378
 8000660:	40020000 	.word	0x40020000
 8000664:	08009358 	.word	0x08009358
 8000668:	200054a8 	.word	0x200054a8
 800066c:	08009310 	.word	0x08009310
 8000670:	08000af1 	.word	0x08000af1
 8000674:	2000543c 	.word	0x2000543c
 8000678:	08009334 	.word	0x08009334
 800067c:	08000b05 	.word	0x08000b05
 8000680:	20005438 	.word	0x20005438

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f008 fd80 	bl	8009198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b22      	ldr	r3, [pc, #136]	; (8000738 <SystemClock_Config+0xb4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a21      	ldr	r2, [pc, #132]	; (8000738 <SystemClock_Config+0xb4>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b1f      	ldr	r3, [pc, #124]	; (8000738 <SystemClock_Config+0xb4>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b1c      	ldr	r3, [pc, #112]	; (800073c <SystemClock_Config+0xb8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a1b      	ldr	r2, [pc, #108]	; (800073c <SystemClock_Config+0xb8>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <SystemClock_Config+0xb8>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fc29 	bl	8001f4c <HAL_RCC_OscConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000700:	f000 fa58 	bl	8000bb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000704:	230f      	movs	r3, #15
 8000706:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000714:	2300      	movs	r3, #0
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f001 fe84 	bl	800242c <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800072a:	f000 fa43 	bl	8000bb4 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	; 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000744:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <MX_CAN1_Init+0x60>)
 8000746:	4a17      	ldr	r2, [pc, #92]	; (80007a4 <MX_CAN1_Init+0x64>)
 8000748:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800074a:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <MX_CAN1_Init+0x60>)
 800074c:	2210      	movs	r2, #16
 800074e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000750:	4b13      	ldr	r3, [pc, #76]	; (80007a0 <MX_CAN1_Init+0x60>)
 8000752:	2200      	movs	r2, #0
 8000754:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <MX_CAN1_Init+0x60>)
 8000758:	2200      	movs	r2, #0
 800075a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800075c:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <MX_CAN1_Init+0x60>)
 800075e:	2200      	movs	r2, #0
 8000760:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <MX_CAN1_Init+0x60>)
 8000764:	2200      	movs	r2, #0
 8000766:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <MX_CAN1_Init+0x60>)
 800076a:	2200      	movs	r2, #0
 800076c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <MX_CAN1_Init+0x60>)
 8000770:	2200      	movs	r2, #0
 8000772:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <MX_CAN1_Init+0x60>)
 8000776:	2200      	movs	r2, #0
 8000778:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <MX_CAN1_Init+0x60>)
 800077c:	2200      	movs	r2, #0
 800077e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	; (80007a0 <MX_CAN1_Init+0x60>)
 8000782:	2200      	movs	r2, #0
 8000784:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000786:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <MX_CAN1_Init+0x60>)
 8000788:	2200      	movs	r2, #0
 800078a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	; (80007a0 <MX_CAN1_Init+0x60>)
 800078e:	f000 fcdd 	bl	800114c <HAL_CAN_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000798:	f000 fa0c 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	20005480 	.word	0x20005480
 80007a4:	40006400 	.word	0x40006400

080007a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	; 0x28
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	f107 0320 	add.w	r3, r7, #32
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <MX_TIM4_Init+0xf0>)
 80007cc:	4a33      	ldr	r2, [pc, #204]	; (800089c <MX_TIM4_Init+0xf4>)
 80007ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 32;
 80007d0:	4b31      	ldr	r3, [pc, #196]	; (8000898 <MX_TIM4_Init+0xf0>)
 80007d2:	2220      	movs	r2, #32
 80007d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d6:	4b30      	ldr	r3, [pc, #192]	; (8000898 <MX_TIM4_Init+0xf0>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80007dc:	4b2e      	ldr	r3, [pc, #184]	; (8000898 <MX_TIM4_Init+0xf0>)
 80007de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <MX_TIM4_Init+0xf0>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ea:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <MX_TIM4_Init+0xf0>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007f0:	4829      	ldr	r0, [pc, #164]	; (8000898 <MX_TIM4_Init+0xf0>)
 80007f2:	f002 f872 	bl	80028da <HAL_TIM_PWM_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80007fc:	f000 f9da 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000808:	f107 0320 	add.w	r3, r7, #32
 800080c:	4619      	mov	r1, r3
 800080e:	4822      	ldr	r0, [pc, #136]	; (8000898 <MX_TIM4_Init+0xf0>)
 8000810:	f002 fd38 	bl	8003284 <HAL_TIMEx_MasterConfigSynchronization>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800081a:	f000 f9cb 	bl	8000bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800081e:	2360      	movs	r3, #96	; 0x60
 8000820:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8000822:	2305      	movs	r3, #5
 8000824:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	4619      	mov	r1, r3
 8000834:	4818      	ldr	r0, [pc, #96]	; (8000898 <MX_TIM4_Init+0xf0>)
 8000836:	f002 f9c1 	bl	8002bbc <HAL_TIM_PWM_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000840:	f000 f9b8 	bl	8000bb4 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2204      	movs	r2, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_TIM4_Init+0xf0>)
 8000850:	f002 f9b4 	bl	8002bbc <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 800085a:	f000 f9ab 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2208      	movs	r2, #8
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_TIM4_Init+0xf0>)
 8000866:	f002 f9a9 	bl	8002bbc <HAL_TIM_PWM_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM4_Init+0xcc>
  {
    Error_Handler();
 8000870:	f000 f9a0 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	220c      	movs	r2, #12
 8000878:	4619      	mov	r1, r3
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <MX_TIM4_Init+0xf0>)
 800087c:	f002 f99e 	bl	8002bbc <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM4_Init+0xe2>
  {
    Error_Handler();
 8000886:	f000 f995 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <MX_TIM4_Init+0xf0>)
 800088c:	f000 fa2e 	bl	8000cec <HAL_TIM_MspPostInit>

}
 8000890:	bf00      	nop
 8000892:	3728      	adds	r7, #40	; 0x28
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20005378 	.word	0x20005378
 800089c:	40000800 	.word	0x40000800

080008a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_USART1_UART_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART1_UART_Init+0x4c>)
 80008d8:	f002 fd64 	bl	80033a4 <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008e2:	f000 f967 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200053f8 	.word	0x200053f8
 80008f0:	40011000 	.word	0x40011000

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 80008fa:	4a12      	ldr	r2, [pc, #72]	; (8000944 <MX_USART2_UART_Init+0x50>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fe:	4b10      	ldr	r3, [pc, #64]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_USART2_UART_Init+0x4c>)
 800092c:	f002 fd3a 	bl	80033a4 <HAL_UART_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000936:	f000 f93d 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20005440 	.word	0x20005440
 8000944:	40004400 	.word	0x40004400

08000948 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <MX_USART3_UART_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_USART3_UART_Init+0x4c>)
 8000980:	f002 fd10 	bl	80033a4 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800098a:	f000 f913 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200053b8 	.word	0x200053b8
 8000998:	40004800 	.word	0x40004800

0800099c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_DMA_Init+0x3c>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a0b      	ldr	r2, [pc, #44]	; (80009d8 <MX_DMA_Init+0x3c>)
 80009ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_DMA_Init+0x3c>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2106      	movs	r1, #6
 80009c2:	2010      	movs	r0, #16
 80009c4:	f000 fd76 	bl	80014b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80009c8:	2010      	movs	r0, #16
 80009ca:	f000 fd8f 	bl	80014ec <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b3a      	ldr	r3, [pc, #232]	; (8000ae0 <MX_GPIO_Init+0x104>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a39      	ldr	r2, [pc, #228]	; (8000ae0 <MX_GPIO_Init+0x104>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <MX_GPIO_Init+0x104>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b33      	ldr	r3, [pc, #204]	; (8000ae0 <MX_GPIO_Init+0x104>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a32      	ldr	r2, [pc, #200]	; (8000ae0 <MX_GPIO_Init+0x104>)
 8000a18:	f043 0302 	orr.w	r3, r3, #2
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b30      	ldr	r3, [pc, #192]	; (8000ae0 <MX_GPIO_Init+0x104>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f003 0302 	and.w	r3, r3, #2
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <MX_GPIO_Init+0x104>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a2b      	ldr	r2, [pc, #172]	; (8000ae0 <MX_GPIO_Init+0x104>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <MX_GPIO_Init+0x104>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <MX_GPIO_Init+0x104>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	4a24      	ldr	r2, [pc, #144]	; (8000ae0 <MX_GPIO_Init+0x104>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	6313      	str	r3, [r2, #48]	; 0x30
 8000a56:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_GPIO_Init+0x104>)
 8000a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	21c0      	movs	r1, #192	; 0xc0
 8000a66:	481f      	ldr	r0, [pc, #124]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a68:	f001 fa56 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8000a72:	481d      	ldr	r0, [pc, #116]	; (8000ae8 <MX_GPIO_Init+0x10c>)
 8000a74:	f001 fa50 	bl	8001f18 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2140      	movs	r1, #64	; 0x40
 8000a7c:	481b      	ldr	r0, [pc, #108]	; (8000aec <MX_GPIO_Init+0x110>)
 8000a7e:	f001 fa4b 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a82:	23c0      	movs	r3, #192	; 0xc0
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_GPIO_Init+0x108>)
 8000a9a:	f001 f8a3 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a9e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000aa2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_GPIO_Init+0x10c>)
 8000ab8:	f001 f894 	bl	8001be4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000abc:	2340      	movs	r3, #64	; 0x40
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	; (8000aec <MX_GPIO_Init+0x110>)
 8000ad4:	f001 f886 	bl	8001be4 <HAL_GPIO_Init>

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020c00 	.word	0x40020c00
 8000aec:	40020800 	.word	0x40020800

08000af0 <StartMockDataTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMockDataTask */
void StartMockDataTask(void *argument)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {

    osDelay(500);
 8000af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000afc:	f003 fa92 	bl	8004024 <osDelay>
 8000b00:	e7fa      	b.n	8000af8 <StartMockDataTask+0x8>
	...

08000b04 <StartUpdateTim1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUpdateTim1 */
void StartUpdateTim1(void *argument)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

  for(;;)
  {


	  if(osSemaphoreAcquire(semUARTReadyHandle, 2000) == osOK){
 8000b0c:	4b1d      	ldr	r3, [pc, #116]	; (8000b84 <StartUpdateTim1+0x80>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f003 fb51 	bl	80041bc <osSemaphoreAcquire>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d12b      	bne.n	8000b78 <StartUpdateTim1+0x74>
		  uint16_t pwm1 = rxBuffer[0] * 4;
 8000b20:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <StartUpdateTim1+0x84>)
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	b29b      	uxth	r3, r3
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	81fb      	strh	r3, [r7, #14]
		  uint16_t pwm2 = rxBuffer[1] * 4;
 8000b2a:	4b17      	ldr	r3, [pc, #92]	; (8000b88 <StartUpdateTim1+0x84>)
 8000b2c:	785b      	ldrb	r3, [r3, #1]
 8000b2e:	b29b      	uxth	r3, r3
 8000b30:	009b      	lsls	r3, r3, #2
 8000b32:	81bb      	strh	r3, [r7, #12]
		  uint16_t pwm3 = rxBuffer[2] * 4;
 8000b34:	4b14      	ldr	r3, [pc, #80]	; (8000b88 <StartUpdateTim1+0x84>)
 8000b36:	789b      	ldrb	r3, [r3, #2]
 8000b38:	b29b      	uxth	r3, r3
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	817b      	strh	r3, [r7, #10]
		  uint16_t pwm4 = rxBuffer[3] * 4;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <StartUpdateTim1+0x84>)
 8000b40:	78db      	ldrb	r3, [r3, #3]
 8000b42:	b29b      	uxth	r3, r3
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	813b      	strh	r3, [r7, #8]
		  SEGGER_SYSVIEW_Print("Updating Timer 1: ");
 8000b48:	4810      	ldr	r0, [pc, #64]	; (8000b8c <StartUpdateTim1+0x88>)
 8000b4a:	f008 f8e9 	bl	8008d20 <SEGGER_SYSVIEW_Print>
		 // HAL_UART_Transmit(&huart2, &pwm1, 1, 10);
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, pwm1 + 1);
 8000b4e:	89fb      	ldrh	r3, [r7, #14]
 8000b50:	1c5a      	adds	r2, r3, #1
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <StartUpdateTim1+0x8c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2, pwm2 + 1);
 8000b58:	89bb      	ldrh	r3, [r7, #12]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <StartUpdateTim1+0x8c>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	639a      	str	r2, [r3, #56]	; 0x38
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3, pwm3 + 1);
 8000b62:	897b      	ldrh	r3, [r7, #10]
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <StartUpdateTim1+0x8c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	63da      	str	r2, [r3, #60]	; 0x3c
		  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4, pwm4 + 1);
 8000b6c:	893b      	ldrh	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	4b07      	ldr	r3, [pc, #28]	; (8000b90 <StartUpdateTim1+0x8c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	641a      	str	r2, [r3, #64]	; 0x40
 8000b76:	e7c9      	b.n	8000b0c <StartUpdateTim1+0x8>
	  }else{
		  osDelay(500);
 8000b78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b7c:	f003 fa52 	bl	8004024 <osDelay>
	  if(osSemaphoreAcquire(semUARTReadyHandle, 2000) == osOK){
 8000b80:	e7c4      	b.n	8000b0c <StartUpdateTim1+0x8>
 8000b82:	bf00      	nop
 8000b84:	200054a8 	.word	0x200054a8
 8000b88:	2000002c 	.word	0x2000002c
 8000b8c:	080091f0 	.word	0x080091f0
 8000b90:	20005378 	.word	0x20005378

08000b94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ba4:	d101      	bne.n	8000baa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba6:	f000 fab1 	bl	800110c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	SEGGER_SYSVIEW_Print("Error_handler");
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <Error_Handler+0x10>)
 8000bba:	f008 f8b1 	bl	8008d20 <SEGGER_SYSVIEW_Print>
  /* USER CODE END Error_Handler_Debug */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	08009204 	.word	0x08009204

08000bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	607b      	str	r3, [r7, #4]
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bde:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <HAL_MspInit+0x4c>)
 8000be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	603b      	str	r3, [r7, #0]
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	4a08      	ldr	r2, [pc, #32]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_MspInit+0x4c>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800

08000c18 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_CAN_MspInit+0x84>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d12c      	bne.n	8000c94 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	613b      	str	r3, [r7, #16]
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_CAN_MspInit+0x88>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a17      	ldr	r2, [pc, #92]	; (8000ca0 <HAL_CAN_MspInit+0x88>)
 8000c44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b15      	ldr	r3, [pc, #84]	; (8000ca0 <HAL_CAN_MspInit+0x88>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c52:	613b      	str	r3, [r7, #16]
 8000c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <HAL_CAN_MspInit+0x88>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	4a10      	ldr	r2, [pc, #64]	; (8000ca0 <HAL_CAN_MspInit+0x88>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6313      	str	r3, [r2, #48]	; 0x30
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <HAL_CAN_MspInit+0x88>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	f003 0301 	and.w	r3, r3, #1
 8000c6e:	60fb      	str	r3, [r7, #12]
 8000c70:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c80:	2303      	movs	r3, #3
 8000c82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c84:	2309      	movs	r3, #9
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <HAL_CAN_MspInit+0x8c>)
 8000c90:	f000 ffa8 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	; 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40006400 	.word	0x40006400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d10d      	bne.n	8000cd6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <HAL_TIM_PWM_MspInit+0x40>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	4a09      	ldr	r2, [pc, #36]	; (8000ce8 <HAL_TIM_PWM_MspInit+0x40>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <HAL_TIM_PWM_MspInit+0x40>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000cd6:	bf00      	nop
 8000cd8:	3714      	adds	r7, #20
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	40000800 	.word	0x40000800
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <HAL_TIM_MspPostInit+0x68>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d11e      	bne.n	8000d4c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <HAL_TIM_MspPostInit+0x6c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000d2a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000d2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	4619      	mov	r1, r3
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <HAL_TIM_MspPostInit+0x70>)
 8000d48:	f000 ff4c 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000d4c:	bf00      	nop
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40000800 	.word	0x40000800
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40020400 	.word	0x40020400

08000d60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08e      	sub	sp, #56	; 0x38
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a63      	ldr	r2, [pc, #396]	; (8000f0c <HAL_UART_MspInit+0x1ac>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d12d      	bne.n	8000dde <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
 8000d86:	4b62      	ldr	r3, [pc, #392]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a61      	ldr	r2, [pc, #388]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000d8c:	f043 0310 	orr.w	r3, r3, #16
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b5f      	ldr	r3, [pc, #380]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f003 0310 	and.w	r3, r3, #16
 8000d9a:	623b      	str	r3, [r7, #32]
 8000d9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	4b5b      	ldr	r3, [pc, #364]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a5a      	ldr	r2, [pc, #360]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b58      	ldr	r3, [pc, #352]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
 8000db8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000dba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	484f      	ldr	r0, [pc, #316]	; (8000f14 <HAL_UART_MspInit+0x1b4>)
 8000dd8:	f000 ff04 	bl	8001be4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ddc:	e091      	b.n	8000f02 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART2)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a4d      	ldr	r2, [pc, #308]	; (8000f18 <HAL_UART_MspInit+0x1b8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d15a      	bne.n	8000e9e <HAL_UART_MspInit+0x13e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
 8000dec:	4b48      	ldr	r3, [pc, #288]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	4a47      	ldr	r2, [pc, #284]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df6:	6413      	str	r3, [r2, #64]	; 0x40
 8000df8:	4b45      	ldr	r3, [pc, #276]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
 8000e08:	4b41      	ldr	r3, [pc, #260]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4a40      	ldr	r2, [pc, #256]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000e0e:	f043 0301 	orr.w	r3, r3, #1
 8000e12:	6313      	str	r3, [r2, #48]	; 0x30
 8000e14:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e20:	230c      	movs	r3, #12
 8000e22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e30:	2307      	movs	r3, #7
 8000e32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4836      	ldr	r0, [pc, #216]	; (8000f14 <HAL_UART_MspInit+0x1b4>)
 8000e3c:	f000 fed2 	bl	8001be4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e42:	4a37      	ldr	r2, [pc, #220]	; (8000f20 <HAL_UART_MspInit+0x1c0>)
 8000e44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000e46:	4b35      	ldr	r3, [pc, #212]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e48:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4e:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e54:	4b31      	ldr	r3, [pc, #196]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e5a:	4b30      	ldr	r3, [pc, #192]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e62:	4b2e      	ldr	r3, [pc, #184]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e68:	4b2c      	ldr	r3, [pc, #176]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000e80:	4826      	ldr	r0, [pc, #152]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e82:	f000 fb41 	bl	8001508 <HAL_DMA_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_UART_MspInit+0x130>
      Error_Handler();
 8000e8c:	f7ff fe92 	bl	8000bb4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4a22      	ldr	r2, [pc, #136]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
 8000e96:	4a21      	ldr	r2, [pc, #132]	; (8000f1c <HAL_UART_MspInit+0x1bc>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000e9c:	e031      	b.n	8000f02 <HAL_UART_MspInit+0x1a2>
  else if(huart->Instance==USART3)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <HAL_UART_MspInit+0x1c4>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d12c      	bne.n	8000f02 <HAL_UART_MspInit+0x1a2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000eb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ecc:	4a10      	ldr	r2, [pc, #64]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_UART_MspInit+0x1b0>)
 8000ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ee0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef2:	2307      	movs	r3, #7
 8000ef4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	480a      	ldr	r0, [pc, #40]	; (8000f28 <HAL_UART_MspInit+0x1c8>)
 8000efe:	f000 fe71 	bl	8001be4 <HAL_GPIO_Init>
}
 8000f02:	bf00      	nop
 8000f04:	3738      	adds	r7, #56	; 0x38
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40011000 	.word	0x40011000
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40004400 	.word	0x40004400
 8000f1c:	20005318 	.word	0x20005318
 8000f20:	40026088 	.word	0x40026088
 8000f24:	40004800 	.word	0x40004800
 8000f28:	40020400 	.word	0x40020400

08000f2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	6879      	ldr	r1, [r7, #4]
 8000f40:	201c      	movs	r0, #28
 8000f42:	f000 fab7 	bl	80014b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f46:	201c      	movs	r0, #28
 8000f48:	f000 fad0 	bl	80014ec <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <HAL_InitTick+0xa4>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	4a1e      	ldr	r2, [pc, #120]	; (8000fd0 <HAL_InitTick+0xa4>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <HAL_InitTick+0xa4>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f68:	f107 0210 	add.w	r2, r7, #16
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f001 fc26 	bl	80027c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f78:	f001 fbfc 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8000f7c:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f80:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <HAL_InitTick+0xa8>)
 8000f82:	fba2 2303 	umull	r2, r3, r2, r3
 8000f86:	0c9b      	lsrs	r3, r3, #18
 8000f88:	3b01      	subs	r3, #1
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HAL_InitTick+0xac>)
 8000f8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000f92:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8000f94:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <HAL_InitTick+0xac>)
 8000f96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f9a:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000f9c:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_InitTick+0xac>)
 8000f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	; (8000fd8 <HAL_InitTick+0xac>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_InitTick+0xac>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <HAL_InitTick+0xac>)
 8000fb0:	f001 fc3a 	bl	8002828 <HAL_TIM_Base_Init>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d104      	bne.n	8000fc4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000fba:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <HAL_InitTick+0xac>)
 8000fbc:	f001 fc69 	bl	8002892 <HAL_TIM_Base_Start_IT>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	e000      	b.n	8000fc6 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3730      	adds	r7, #48	; 0x30
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	431bde83 	.word	0x431bde83
 8000fd8:	200054ac 	.word	0x200054ac

08000fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */
	SEGGER_SYSVIEW_RecordEnterISR();
 8001014:	f007 fc58 	bl	80088c8 <SEGGER_SYSVIEW_RecordEnterISR>
  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <DMA1_Stream5_IRQHandler+0x20>)
 800101a:	f000 fb7b 	bl	8001714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
  OnMessage();
 800101e:	f7ff fac7 	bl	80005b0 <OnMessage>
  Reset_UART2();
 8001022:	f7ff faaf 	bl	8000584 <Reset_UART2>
  SEGGER_SYSVIEW_RecordExitISR();
 8001026:	f007 fc91 	bl	800894c <SEGGER_SYSVIEW_RecordExitISR>
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20005318 	.word	0x20005318

08001034 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <TIM2_IRQHandler+0x10>)
 800103a:	f001 fcb7 	bl	80029ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //resetUART1();

  /* USER CODE END TIM2_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200054ac 	.word	0x200054ac

08001048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <SystemInit+0x28>)
 800104e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001052:	4a07      	ldr	r2, [pc, #28]	; (8001070 <SystemInit+0x28>)
 8001054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <SystemInit+0x28>)
 800105e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001062:	609a      	str	r2, [r3, #8]
#endif
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001078:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800107a:	e003      	b.n	8001084 <LoopCopyDataInit>

0800107c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800107e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001080:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001082:	3104      	adds	r1, #4

08001084 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001088:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800108a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800108c:	d3f6      	bcc.n	800107c <CopyDataInit>
  ldr  r2, =_sbss
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001090:	e002      	b.n	8001098 <LoopFillZerobss>

08001092 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001092:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001094:	f842 3b04 	str.w	r3, [r2], #4

08001098 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001098:	4b09      	ldr	r3, [pc, #36]	; (80010c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800109a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800109c:	d3f9      	bcc.n	8001092 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800109e:	f7ff ffd3 	bl	8001048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010a2:	f008 f83b 	bl	800911c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a6:	f7ff fa8f 	bl	80005c8 <main>
  bx  lr    
 80010aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80010ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80010b0:	080093ac 	.word	0x080093ac
  ldr  r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010b8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80010bc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80010c0:	200055d8 	.word	0x200055d8

080010c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c4:	e7fe      	b.n	80010c4 <ADC_IRQHandler>
	...

080010c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010cc:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_Init+0x40>)
 80010d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a0a      	ldr	r2, [pc, #40]	; (8001108 <HAL_Init+0x40>)
 80010de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_Init+0x40>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a07      	ldr	r2, [pc, #28]	; (8001108 <HAL_Init+0x40>)
 80010ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f0:	2003      	movs	r0, #3
 80010f2:	f000 f9d4 	bl	800149e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010f6:	2000      	movs	r0, #0
 80010f8:	f7ff ff18 	bl	8000f2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fc:	f7ff fd64 	bl	8000bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023c00 	.word	0x40023c00

0800110c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <HAL_IncTick+0x20>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_IncTick+0x24>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4413      	add	r3, r2
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <HAL_IncTick+0x24>)
 800111e:	6013      	str	r3, [r2, #0]
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008
 8001130:	200054ec 	.word	0x200054ec

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b03      	ldr	r3, [pc, #12]	; (8001148 <HAL_GetTick+0x14>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	200054ec 	.word	0x200054ec

0800114c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e0ed      	b.n	800133a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d102      	bne.n	8001170 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fd54 	bl	8000c18 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0202 	bic.w	r2, r2, #2
 800117e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001180:	f7ff ffd8 	bl	8001134 <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001186:	e012      	b.n	80011ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001188:	f7ff ffd4 	bl	8001134 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b0a      	cmp	r3, #10
 8001194:	d90b      	bls.n	80011ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2205      	movs	r2, #5
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0c5      	b.n	800133a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1e5      	bne.n	8001188 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0201 	orr.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011cc:	f7ff ffb2 	bl	8001134 <HAL_GetTick>
 80011d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011d2:	e012      	b.n	80011fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011d4:	f7ff ffae 	bl	8001134 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b0a      	cmp	r3, #10
 80011e0:	d90b      	bls.n	80011fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2205      	movs	r2, #5
 80011f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e09f      	b.n	800133a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0e5      	beq.n	80011d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	7e1b      	ldrb	r3, [r3, #24]
 800120c:	2b01      	cmp	r3, #1
 800120e:	d108      	bne.n	8001222 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	e007      	b.n	8001232 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001230:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	7e5b      	ldrb	r3, [r3, #25]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d108      	bne.n	800124c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	e007      	b.n	800125c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800125a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	7e9b      	ldrb	r3, [r3, #26]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d108      	bne.n	8001276 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f042 0220 	orr.w	r2, r2, #32
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	e007      	b.n	8001286 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 0220 	bic.w	r2, r2, #32
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	7edb      	ldrb	r3, [r3, #27]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d108      	bne.n	80012a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 0210 	bic.w	r2, r2, #16
 800129c:	601a      	str	r2, [r3, #0]
 800129e:	e007      	b.n	80012b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0210 	orr.w	r2, r2, #16
 80012ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7f1b      	ldrb	r3, [r3, #28]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d108      	bne.n	80012ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f042 0208 	orr.w	r2, r2, #8
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e007      	b.n	80012da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f022 0208 	bic.w	r2, r2, #8
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7f5b      	ldrb	r3, [r3, #29]
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d108      	bne.n	80012f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 0204 	orr.w	r2, r2, #4
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e007      	b.n	8001304 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0204 	bic.w	r2, r2, #4
 8001302:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689a      	ldr	r2, [r3, #8]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691b      	ldr	r3, [r3, #16]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	ea42 0103 	orr.w	r1, r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2200      	movs	r2, #0
 800132e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2201      	movs	r2, #1
 8001334:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4907      	ldr	r1, [pc, #28]	; (80013e0 <__NVIC_EnableIRQ+0x38>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	e000e100 	.word	0xe000e100

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	; (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	; (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	; 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	; 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ff4c 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014ac:	bf00      	nop
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
 80014c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c6:	f7ff ff61 	bl	800138c <__NVIC_GetPriorityGrouping>
 80014ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	6978      	ldr	r0, [r7, #20]
 80014d2:	f7ff ffb1 	bl	8001438 <NVIC_EncodePriority>
 80014d6:	4602      	mov	r2, r0
 80014d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014dc:	4611      	mov	r1, r2
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff ff80 	bl	80013e4 <__NVIC_SetPriority>
}
 80014e4:	bf00      	nop
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff ff54 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff fe0e 	bl	8001134 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e099      	b.n	8001658 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f022 0201 	bic.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001544:	e00f      	b.n	8001566 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001546:	f7ff fdf5 	bl	8001134 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b05      	cmp	r3, #5
 8001552:	d908      	bls.n	8001566 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2220      	movs	r2, #32
 8001558:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2203      	movs	r2, #3
 800155e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e078      	b.n	8001658 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1e8      	bne.n	8001546 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800157c:	697a      	ldr	r2, [r7, #20]
 800157e:	4b38      	ldr	r3, [pc, #224]	; (8001660 <HAL_DMA_Init+0x158>)
 8001580:	4013      	ands	r3, r2
 8001582:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001592:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	691b      	ldr	r3, [r3, #16]
 8001598:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800159e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	699b      	ldr	r3, [r3, #24]
 80015a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a1b      	ldr	r3, [r3, #32]
 80015b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	2b04      	cmp	r3, #4
 80015be:	d107      	bne.n	80015d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c8:	4313      	orrs	r3, r2
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	697a      	ldr	r2, [r7, #20]
 80015d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f023 0307 	bic.w	r3, r3, #7
 80015e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	2b04      	cmp	r3, #4
 80015f8:	d117      	bne.n	800162a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001608:	2b00      	cmp	r3, #0
 800160a:	d00e      	beq.n	800162a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 fa6f 	bl	8001af0 <DMA_CheckFifoParam>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d008      	beq.n	800162a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2240      	movs	r2, #64	; 0x40
 800161c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2201      	movs	r2, #1
 8001622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001626:	2301      	movs	r3, #1
 8001628:	e016      	b.n	8001658 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	697a      	ldr	r2, [r7, #20]
 8001630:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 fa26 	bl	8001a84 <DMA_CalcBaseAndBitshift>
 8001638:	4603      	mov	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	223f      	movs	r2, #63	; 0x3f
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	f010803f 	.word	0xf010803f

08001664 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001672:	2300      	movs	r3, #0
 8001674:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001682:	2b01      	cmp	r3, #1
 8001684:	d101      	bne.n	800168a <HAL_DMA_Start_IT+0x26>
 8001686:	2302      	movs	r3, #2
 8001688:	e040      	b.n	800170c <HAL_DMA_Start_IT+0xa8>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d12f      	bne.n	80016fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2202      	movs	r2, #2
 80016a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f000 f9b8 	bl	8001a28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016bc:	223f      	movs	r2, #63	; 0x3f
 80016be:	409a      	lsls	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0216 	orr.w	r2, r2, #22
 80016d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d007      	beq.n	80016ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0208 	orr.w	r2, r2, #8
 80016ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f042 0201 	orr.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	e005      	b.n	800170a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001706:	2302      	movs	r3, #2
 8001708:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800170a:	7dfb      	ldrb	r3, [r7, #23]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800171c:	2300      	movs	r3, #0
 800171e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001720:	4b92      	ldr	r3, [pc, #584]	; (800196c <HAL_DMA_IRQHandler+0x258>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a92      	ldr	r2, [pc, #584]	; (8001970 <HAL_DMA_IRQHandler+0x25c>)
 8001726:	fba2 2303 	umull	r2, r3, r2, r3
 800172a:	0a9b      	lsrs	r3, r3, #10
 800172c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001732:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800173e:	2208      	movs	r2, #8
 8001740:	409a      	lsls	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4013      	ands	r3, r2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d01a      	beq.n	8001780 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0304 	and.w	r3, r3, #4
 8001754:	2b00      	cmp	r3, #0
 8001756:	d013      	beq.n	8001780 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f022 0204 	bic.w	r2, r2, #4
 8001766:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176c:	2208      	movs	r2, #8
 800176e:	409a      	lsls	r2, r3
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001778:	f043 0201 	orr.w	r2, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001784:	2201      	movs	r2, #1
 8001786:	409a      	lsls	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	4013      	ands	r3, r2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d012      	beq.n	80017b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00b      	beq.n	80017b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a2:	2201      	movs	r2, #1
 80017a4:	409a      	lsls	r2, r3
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ae:	f043 0202 	orr.w	r2, r3, #2
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ba:	2204      	movs	r2, #4
 80017bc:	409a      	lsls	r2, r3
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d012      	beq.n	80017ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d00b      	beq.n	80017ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d8:	2204      	movs	r2, #4
 80017da:	409a      	lsls	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e4:	f043 0204 	orr.w	r2, r3, #4
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f0:	2210      	movs	r2, #16
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d043      	beq.n	8001884 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d03c      	beq.n	8001884 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	2210      	movs	r2, #16
 8001810:	409a      	lsls	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d018      	beq.n	8001856 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d108      	bne.n	8001844 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	2b00      	cmp	r3, #0
 8001838:	d024      	beq.n	8001884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	4798      	blx	r3
 8001842:	e01f      	b.n	8001884 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01b      	beq.n	8001884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4798      	blx	r3
 8001854:	e016      	b.n	8001884 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001860:	2b00      	cmp	r3, #0
 8001862:	d107      	bne.n	8001874 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f022 0208 	bic.w	r2, r2, #8
 8001872:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001888:	2220      	movs	r2, #32
 800188a:	409a      	lsls	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4013      	ands	r3, r2
 8001890:	2b00      	cmp	r3, #0
 8001892:	f000 808e 	beq.w	80019b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f000 8086 	beq.w	80019b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018aa:	2220      	movs	r2, #32
 80018ac:	409a      	lsls	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b05      	cmp	r3, #5
 80018bc:	d136      	bne.n	800192c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0216 	bic.w	r2, r2, #22
 80018cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d103      	bne.n	80018ee <HAL_DMA_IRQHandler+0x1da>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0208 	bic.w	r2, r2, #8
 80018fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	223f      	movs	r2, #63	; 0x3f
 8001904:	409a      	lsls	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800191e:	2b00      	cmp	r3, #0
 8001920:	d07d      	beq.n	8001a1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	4798      	blx	r3
        }
        return;
 800192a:	e078      	b.n	8001a1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d01c      	beq.n	8001974 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d108      	bne.n	800195a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194c:	2b00      	cmp	r3, #0
 800194e:	d030      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	4798      	blx	r3
 8001958:	e02b      	b.n	80019b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800195e:	2b00      	cmp	r3, #0
 8001960:	d027      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	4798      	blx	r3
 800196a:	e022      	b.n	80019b2 <HAL_DMA_IRQHandler+0x29e>
 800196c:	20000000 	.word	0x20000000
 8001970:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 0210 	bic.w	r2, r2, #16
 8001990:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d032      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d022      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2205      	movs	r2, #5
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3301      	adds	r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d307      	bcc.n	80019fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1f2      	bne.n	80019de <HAL_DMA_IRQHandler+0x2ca>
 80019f8:	e000      	b.n	80019fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80019fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d005      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	4798      	blx	r3
 8001a1c:	e000      	b.n	8001a20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a1e:	bf00      	nop
    }
  }
}
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop

08001a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2b40      	cmp	r3, #64	; 0x40
 8001a54:	d108      	bne.n	8001a68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a66:	e007      	b.n	8001a78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	60da      	str	r2, [r3, #12]
}
 8001a78:	bf00      	nop
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	3b10      	subs	r3, #16
 8001a94:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <DMA_CalcBaseAndBitshift+0x64>)
 8001a96:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9a:	091b      	lsrs	r3, r3, #4
 8001a9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a9e:	4a13      	ldr	r2, [pc, #76]	; (8001aec <DMA_CalcBaseAndBitshift+0x68>)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d909      	bls.n	8001ac6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aba:	f023 0303 	bic.w	r3, r3, #3
 8001abe:	1d1a      	adds	r2, r3, #4
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ac4:	e007      	b.n	8001ad6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ace:	f023 0303 	bic.w	r3, r3, #3
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3714      	adds	r7, #20
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	aaaaaaab 	.word	0xaaaaaaab
 8001aec:	08009380 	.word	0x08009380

08001af0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001af8:	2300      	movs	r3, #0
 8001afa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11f      	bne.n	8001b4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b03      	cmp	r3, #3
 8001b0e:	d855      	bhi.n	8001bbc <DMA_CheckFifoParam+0xcc>
 8001b10:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <DMA_CheckFifoParam+0x28>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001b3b 	.word	0x08001b3b
 8001b20:	08001b29 	.word	0x08001b29
 8001b24:	08001bbd 	.word	0x08001bbd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d045      	beq.n	8001bc0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b38:	e042      	b.n	8001bc0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b42:	d13f      	bne.n	8001bc4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b48:	e03c      	b.n	8001bc4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	699b      	ldr	r3, [r3, #24]
 8001b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b52:	d121      	bne.n	8001b98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b03      	cmp	r3, #3
 8001b58:	d836      	bhi.n	8001bc8 <DMA_CheckFifoParam+0xd8>
 8001b5a:	a201      	add	r2, pc, #4	; (adr r2, 8001b60 <DMA_CheckFifoParam+0x70>)
 8001b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b60:	08001b71 	.word	0x08001b71
 8001b64:	08001b77 	.word	0x08001b77
 8001b68:	08001b71 	.word	0x08001b71
 8001b6c:	08001b89 	.word	0x08001b89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	73fb      	strb	r3, [r7, #15]
      break;
 8001b74:	e02f      	b.n	8001bd6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d024      	beq.n	8001bcc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b86:	e021      	b.n	8001bcc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b90:	d11e      	bne.n	8001bd0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b96:	e01b      	b.n	8001bd0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d902      	bls.n	8001ba4 <DMA_CheckFifoParam+0xb4>
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d003      	beq.n	8001baa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001ba2:	e018      	b.n	8001bd6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ba8:	e015      	b.n	8001bd6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00e      	beq.n	8001bd4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bba:	e00b      	b.n	8001bd4 <DMA_CheckFifoParam+0xe4>
      break;
 8001bbc:	bf00      	nop
 8001bbe:	e00a      	b.n	8001bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bc0:	bf00      	nop
 8001bc2:	e008      	b.n	8001bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bc4:	bf00      	nop
 8001bc6:	e006      	b.n	8001bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bc8:	bf00      	nop
 8001bca:	e004      	b.n	8001bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bcc:	bf00      	nop
 8001bce:	e002      	b.n	8001bd6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001bd0:	bf00      	nop
 8001bd2:	e000      	b.n	8001bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bd4:	bf00      	nop
    }
  } 
  
  return status; 
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	; 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e16b      	b.n	8001ed8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 815a 	bne.w	8001ed2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d00b      	beq.n	8001c3e <HAL_GPIO_Init+0x5a>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d007      	beq.n	8001c3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c32:	2b11      	cmp	r3, #17
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	2b12      	cmp	r3, #18
 8001c3c:	d130      	bne.n	8001ca0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	2203      	movs	r2, #3
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	43db      	mvns	r3, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4013      	ands	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c74:	2201      	movs	r2, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	091b      	lsrs	r3, r3, #4
 8001c8a:	f003 0201 	and.w	r2, r3, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d003      	beq.n	8001ce0 <HAL_GPIO_Init+0xfc>
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b12      	cmp	r3, #18
 8001cde:	d123      	bne.n	8001d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	69b9      	ldr	r1, [r7, #24]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80b4 	beq.w	8001ed2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	; (8001eec <HAL_GPIO_Init+0x308>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	4a5e      	ldr	r2, [pc, #376]	; (8001eec <HAL_GPIO_Init+0x308>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	; 0x44
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	; (8001eec <HAL_GPIO_Init+0x308>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d86:	4a5a      	ldr	r2, [pc, #360]	; (8001ef0 <HAL_GPIO_Init+0x30c>)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <HAL_GPIO_Init+0x310>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d02b      	beq.n	8001e0a <HAL_GPIO_Init+0x226>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a50      	ldr	r2, [pc, #320]	; (8001ef8 <HAL_GPIO_Init+0x314>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d025      	beq.n	8001e06 <HAL_GPIO_Init+0x222>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_GPIO_Init+0x318>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01f      	beq.n	8001e02 <HAL_GPIO_Init+0x21e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4e      	ldr	r2, [pc, #312]	; (8001f00 <HAL_GPIO_Init+0x31c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d019      	beq.n	8001dfe <HAL_GPIO_Init+0x21a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x320>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0x216>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_GPIO_Init+0x324>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00d      	beq.n	8001df6 <HAL_GPIO_Init+0x212>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4b      	ldr	r2, [pc, #300]	; (8001f0c <HAL_GPIO_Init+0x328>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <HAL_GPIO_Init+0x20e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4a      	ldr	r2, [pc, #296]	; (8001f10 <HAL_GPIO_Init+0x32c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_GPIO_Init+0x20a>
 8001dea:	2307      	movs	r3, #7
 8001dec:	e00e      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001dee:	2308      	movs	r3, #8
 8001df0:	e00c      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001df2:	2306      	movs	r3, #6
 8001df4:	e00a      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001df6:	2305      	movs	r3, #5
 8001df8:	e008      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e004      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f002 0203 	and.w	r2, r2, #3
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4093      	lsls	r3, r2
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e1c:	4934      	ldr	r1, [pc, #208]	; (8001ef0 <HAL_GPIO_Init+0x30c>)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e2a:	4b3a      	ldr	r3, [pc, #232]	; (8001f14 <HAL_GPIO_Init+0x330>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e4e:	4a31      	ldr	r2, [pc, #196]	; (8001f14 <HAL_GPIO_Init+0x330>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_GPIO_Init+0x330>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e78:	4a26      	ldr	r2, [pc, #152]	; (8001f14 <HAL_GPIO_Init+0x330>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e7e:	4b25      	ldr	r3, [pc, #148]	; (8001f14 <HAL_GPIO_Init+0x330>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	; (8001f14 <HAL_GPIO_Init+0x330>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <HAL_GPIO_Init+0x330>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ecc:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <HAL_GPIO_Init+0x330>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	f67f ae90 	bls.w	8001c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	3724      	adds	r7, #36	; 0x24
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40013800 	.word	0x40013800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40020800 	.word	0x40020800
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40021400 	.word	0x40021400
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40021c00 	.word	0x40021c00
 8001f14:	40013c00 	.word	0x40013c00

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f34:	e003      	b.n	8001f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
	...

08001f4c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e25b      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d075      	beq.n	8002056 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f6a:	4ba3      	ldr	r3, [pc, #652]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b04      	cmp	r3, #4
 8001f74:	d00c      	beq.n	8001f90 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f76:	4ba0      	ldr	r3, [pc, #640]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f7e:	2b08      	cmp	r3, #8
 8001f80:	d112      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f82:	4b9d      	ldr	r3, [pc, #628]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f8e:	d10b      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f90:	4b99      	ldr	r3, [pc, #612]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d05b      	beq.n	8002054 <HAL_RCC_OscConfig+0x108>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d157      	bne.n	8002054 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e236      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x74>
 8001fb2:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a90      	ldr	r2, [pc, #576]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fbc:	6013      	str	r3, [r2, #0]
 8001fbe:	e01d      	b.n	8001ffc <HAL_RCC_OscConfig+0xb0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fc8:	d10c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x98>
 8001fca:	4b8b      	ldr	r3, [pc, #556]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a8a      	ldr	r2, [pc, #552]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	4b88      	ldr	r3, [pc, #544]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a87      	ldr	r2, [pc, #540]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e00b      	b.n	8001ffc <HAL_RCC_OscConfig+0xb0>
 8001fe4:	4b84      	ldr	r3, [pc, #528]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a83      	ldr	r2, [pc, #524]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	4b81      	ldr	r3, [pc, #516]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a80      	ldr	r2, [pc, #512]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8001ff6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ffa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d013      	beq.n	800202c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7ff f896 	bl	8001134 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800200c:	f7ff f892 	bl	8001134 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b64      	cmp	r3, #100	; 0x64
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e1fb      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0xc0>
 800202a:	e014      	b.n	8002056 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff f882 	bl	8001134 <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff f87e 	bl	8001134 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e1e7      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002046:	4b6c      	ldr	r3, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1f0      	bne.n	8002034 <HAL_RCC_OscConfig+0xe8>
 8002052:	e000      	b.n	8002056 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d063      	beq.n	800212a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002062:	4b65      	ldr	r3, [pc, #404]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00b      	beq.n	8002086 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206e:	4b62      	ldr	r3, [pc, #392]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002076:	2b08      	cmp	r3, #8
 8002078:	d11c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800207a:	4b5f      	ldr	r3, [pc, #380]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d116      	bne.n	80020b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002086:	4b5c      	ldr	r3, [pc, #368]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d005      	beq.n	800209e <HAL_RCC_OscConfig+0x152>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d001      	beq.n	800209e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e1bb      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209e:	4b56      	ldr	r3, [pc, #344]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4952      	ldr	r1, [pc, #328]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020b2:	e03a      	b.n	800212a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d020      	beq.n	80020fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020bc:	4b4f      	ldr	r3, [pc, #316]	; (80021fc <HAL_RCC_OscConfig+0x2b0>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff f837 	bl	8001134 <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020ca:	f7ff f833 	bl	8001134 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e19c      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020dc:	4b46      	ldr	r3, [pc, #280]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0302 	and.w	r3, r3, #2
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0f0      	beq.n	80020ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e8:	4b43      	ldr	r3, [pc, #268]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4940      	ldr	r1, [pc, #256]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	600b      	str	r3, [r1, #0]
 80020fc:	e015      	b.n	800212a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020fe:	4b3f      	ldr	r3, [pc, #252]	; (80021fc <HAL_RCC_OscConfig+0x2b0>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff f816 	bl	8001134 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800210c:	f7ff f812 	bl	8001134 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e17b      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800211e:	4b36      	ldr	r3, [pc, #216]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f0      	bne.n	800210c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d030      	beq.n	8002198 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d016      	beq.n	800216c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800213e:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCC_OscConfig+0x2b4>)
 8002140:	2201      	movs	r2, #1
 8002142:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002144:	f7fe fff6 	bl	8001134 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214c:	f7fe fff2 	bl	8001134 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e15b      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 8002160:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x200>
 800216a:	e015      	b.n	8002198 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800216c:	4b24      	ldr	r3, [pc, #144]	; (8002200 <HAL_RCC_OscConfig+0x2b4>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002172:	f7fe ffdf 	bl	8001134 <HAL_GetTick>
 8002176:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800217a:	f7fe ffdb 	bl	8001134 <HAL_GetTick>
 800217e:	4602      	mov	r2, r0
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e144      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 800218e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f0      	bne.n	800217a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a0 	beq.w	80022e6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021aa:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10f      	bne.n	80021d6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a0e      	ldr	r2, [pc, #56]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <HAL_RCC_OscConfig+0x2b8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d121      	bne.n	8002226 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e2:	4b08      	ldr	r3, [pc, #32]	; (8002204 <HAL_RCC_OscConfig+0x2b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a07      	ldr	r2, [pc, #28]	; (8002204 <HAL_RCC_OscConfig+0x2b8>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7fe ffa1 	bl	8001134 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	e011      	b.n	800221a <HAL_RCC_OscConfig+0x2ce>
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	42470000 	.word	0x42470000
 8002200:	42470e80 	.word	0x42470e80
 8002204:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002208:	f7fe ff94 	bl	8001134 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e0fd      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221a:	4b81      	ldr	r3, [pc, #516]	; (8002420 <HAL_RCC_OscConfig+0x4d4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f0      	beq.n	8002208 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b01      	cmp	r3, #1
 800222c:	d106      	bne.n	800223c <HAL_RCC_OscConfig+0x2f0>
 800222e:	4b7d      	ldr	r3, [pc, #500]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	4a7c      	ldr	r2, [pc, #496]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6713      	str	r3, [r2, #112]	; 0x70
 800223a:	e01c      	b.n	8002276 <HAL_RCC_OscConfig+0x32a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b05      	cmp	r3, #5
 8002242:	d10c      	bne.n	800225e <HAL_RCC_OscConfig+0x312>
 8002244:	4b77      	ldr	r3, [pc, #476]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a76      	ldr	r2, [pc, #472]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
 8002250:	4b74      	ldr	r3, [pc, #464]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	4a73      	ldr	r2, [pc, #460]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	; 0x70
 800225c:	e00b      	b.n	8002276 <HAL_RCC_OscConfig+0x32a>
 800225e:	4b71      	ldr	r3, [pc, #452]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 8002260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002262:	4a70      	ldr	r2, [pc, #448]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6713      	str	r3, [r2, #112]	; 0x70
 800226a:	4b6e      	ldr	r3, [pc, #440]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 800226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226e:	4a6d      	ldr	r2, [pc, #436]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 8002270:	f023 0304 	bic.w	r3, r3, #4
 8002274:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d015      	beq.n	80022aa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7fe ff59 	bl	8001134 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e00a      	b.n	800229c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe ff55 	bl	8001134 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f241 3288 	movw	r2, #5000	; 0x1388
 8002294:	4293      	cmp	r3, r2
 8002296:	d901      	bls.n	800229c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002298:	2303      	movs	r3, #3
 800229a:	e0bc      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229c:	4b61      	ldr	r3, [pc, #388]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0ee      	beq.n	8002286 <HAL_RCC_OscConfig+0x33a>
 80022a8:	e014      	b.n	80022d4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022aa:	f7fe ff43 	bl	8001134 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b0:	e00a      	b.n	80022c8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f7fe ff3f 	bl	8001134 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e0a6      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c8:	4b56      	ldr	r3, [pc, #344]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1ee      	bne.n	80022b2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d105      	bne.n	80022e6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022da:	4b52      	ldr	r3, [pc, #328]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022de:	4a51      	ldr	r2, [pc, #324]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 80022e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f000 8092 	beq.w	8002414 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d05c      	beq.n	80023b6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d141      	bne.n	8002388 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002304:	4b48      	ldr	r3, [pc, #288]	; (8002428 <HAL_RCC_OscConfig+0x4dc>)
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230a:	f7fe ff13 	bl	8001134 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002310:	e008      	b.n	8002324 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002312:	f7fe ff0f 	bl	8001134 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	2b02      	cmp	r3, #2
 800231e:	d901      	bls.n	8002324 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e078      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002324:	4b3f      	ldr	r3, [pc, #252]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1f0      	bne.n	8002312 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69da      	ldr	r2, [r3, #28]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233e:	019b      	lsls	r3, r3, #6
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002346:	085b      	lsrs	r3, r3, #1
 8002348:	3b01      	subs	r3, #1
 800234a:	041b      	lsls	r3, r3, #16
 800234c:	431a      	orrs	r2, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002352:	061b      	lsls	r3, r3, #24
 8002354:	4933      	ldr	r1, [pc, #204]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 8002356:	4313      	orrs	r3, r2
 8002358:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800235a:	4b33      	ldr	r3, [pc, #204]	; (8002428 <HAL_RCC_OscConfig+0x4dc>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe fee8 	bl	8001134 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002368:	f7fe fee4 	bl	8001134 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e04d      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237a:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x41c>
 8002386:	e045      	b.n	8002414 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002388:	4b27      	ldr	r3, [pc, #156]	; (8002428 <HAL_RCC_OscConfig+0x4dc>)
 800238a:	2200      	movs	r2, #0
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7fe fed1 	bl	8001134 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002396:	f7fe fecd 	bl	8001134 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e036      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d1f0      	bne.n	8002396 <HAL_RCC_OscConfig+0x44a>
 80023b4:	e02e      	b.n	8002414 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d101      	bne.n	80023c2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e029      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023c2:	4b18      	ldr	r3, [pc, #96]	; (8002424 <HAL_RCC_OscConfig+0x4d8>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d11c      	bne.n	8002410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d115      	bne.n	8002410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023ea:	4013      	ands	r3, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d10d      	bne.n	8002410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d106      	bne.n	8002410 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40007000 	.word	0x40007000
 8002424:	40023800 	.word	0x40023800
 8002428:	42470060 	.word	0x42470060

0800242c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0cc      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b68      	ldr	r3, [pc, #416]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d90c      	bls.n	8002468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b65      	ldr	r3, [pc, #404]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a58      	ldr	r2, [pc, #352]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800248a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a52      	ldr	r2, [pc, #328]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d044      	beq.n	800254c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d119      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b3f      	ldr	r3, [pc, #252]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e067      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b37      	ldr	r3, [pc, #220]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4934      	ldr	r1, [pc, #208]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7fe fe0a 	bl	8001134 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7fe fe06 	bl	8001134 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e04f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d20c      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4601      	mov	r1, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	4a0a      	ldr	r2, [pc, #40]	; (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	fa21 f303 	lsr.w	r3, r1, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fcaa 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	08009368 	.word	0x08009368
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025fa:	b085      	sub	sp, #20
 80025fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	2300      	movs	r3, #0
 8002608:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800260e:	4b50      	ldr	r3, [pc, #320]	; (8002750 <HAL_RCC_GetSysClockFreq+0x158>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b04      	cmp	r3, #4
 8002618:	d007      	beq.n	800262a <HAL_RCC_GetSysClockFreq+0x32>
 800261a:	2b08      	cmp	r3, #8
 800261c:	d008      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0x38>
 800261e:	2b00      	cmp	r3, #0
 8002620:	f040 808d 	bne.w	800273e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002624:	4b4b      	ldr	r3, [pc, #300]	; (8002754 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002626:	60bb      	str	r3, [r7, #8]
       break;
 8002628:	e08c      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800262a:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <HAL_RCC_GetSysClockFreq+0x160>)
 800262c:	60bb      	str	r3, [r7, #8]
      break;
 800262e:	e089      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002630:	4b47      	ldr	r3, [pc, #284]	; (8002750 <HAL_RCC_GetSysClockFreq+0x158>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002638:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800263a:	4b45      	ldr	r3, [pc, #276]	; (8002750 <HAL_RCC_GetSysClockFreq+0x158>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d023      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002646:	4b42      	ldr	r3, [pc, #264]	; (8002750 <HAL_RCC_GetSysClockFreq+0x158>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	099b      	lsrs	r3, r3, #6
 800264c:	f04f 0400 	mov.w	r4, #0
 8002650:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	ea03 0501 	and.w	r5, r3, r1
 800265c:	ea04 0602 	and.w	r6, r4, r2
 8002660:	4a3d      	ldr	r2, [pc, #244]	; (8002758 <HAL_RCC_GetSysClockFreq+0x160>)
 8002662:	fb02 f106 	mul.w	r1, r2, r6
 8002666:	2200      	movs	r2, #0
 8002668:	fb02 f205 	mul.w	r2, r2, r5
 800266c:	440a      	add	r2, r1
 800266e:	493a      	ldr	r1, [pc, #232]	; (8002758 <HAL_RCC_GetSysClockFreq+0x160>)
 8002670:	fba5 0101 	umull	r0, r1, r5, r1
 8002674:	1853      	adds	r3, r2, r1
 8002676:	4619      	mov	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f04f 0400 	mov.w	r4, #0
 800267e:	461a      	mov	r2, r3
 8002680:	4623      	mov	r3, r4
 8002682:	f7fd fdef 	bl	8000264 <__aeabi_uldivmod>
 8002686:	4603      	mov	r3, r0
 8002688:	460c      	mov	r4, r1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	e049      	b.n	8002722 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800268e:	4b30      	ldr	r3, [pc, #192]	; (8002750 <HAL_RCC_GetSysClockFreq+0x158>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	099b      	lsrs	r3, r3, #6
 8002694:	f04f 0400 	mov.w	r4, #0
 8002698:	f240 11ff 	movw	r1, #511	; 0x1ff
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	ea03 0501 	and.w	r5, r3, r1
 80026a4:	ea04 0602 	and.w	r6, r4, r2
 80026a8:	4629      	mov	r1, r5
 80026aa:	4632      	mov	r2, r6
 80026ac:	f04f 0300 	mov.w	r3, #0
 80026b0:	f04f 0400 	mov.w	r4, #0
 80026b4:	0154      	lsls	r4, r2, #5
 80026b6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80026ba:	014b      	lsls	r3, r1, #5
 80026bc:	4619      	mov	r1, r3
 80026be:	4622      	mov	r2, r4
 80026c0:	1b49      	subs	r1, r1, r5
 80026c2:	eb62 0206 	sbc.w	r2, r2, r6
 80026c6:	f04f 0300 	mov.w	r3, #0
 80026ca:	f04f 0400 	mov.w	r4, #0
 80026ce:	0194      	lsls	r4, r2, #6
 80026d0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80026d4:	018b      	lsls	r3, r1, #6
 80026d6:	1a5b      	subs	r3, r3, r1
 80026d8:	eb64 0402 	sbc.w	r4, r4, r2
 80026dc:	f04f 0100 	mov.w	r1, #0
 80026e0:	f04f 0200 	mov.w	r2, #0
 80026e4:	00e2      	lsls	r2, r4, #3
 80026e6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026ea:	00d9      	lsls	r1, r3, #3
 80026ec:	460b      	mov	r3, r1
 80026ee:	4614      	mov	r4, r2
 80026f0:	195b      	adds	r3, r3, r5
 80026f2:	eb44 0406 	adc.w	r4, r4, r6
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	02a2      	lsls	r2, r4, #10
 8002700:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002704:	0299      	lsls	r1, r3, #10
 8002706:	460b      	mov	r3, r1
 8002708:	4614      	mov	r4, r2
 800270a:	4618      	mov	r0, r3
 800270c:	4621      	mov	r1, r4
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f04f 0400 	mov.w	r4, #0
 8002714:	461a      	mov	r2, r3
 8002716:	4623      	mov	r3, r4
 8002718:	f7fd fda4 	bl	8000264 <__aeabi_uldivmod>
 800271c:	4603      	mov	r3, r0
 800271e:	460c      	mov	r4, r1
 8002720:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002722:	4b0b      	ldr	r3, [pc, #44]	; (8002750 <HAL_RCC_GetSysClockFreq+0x158>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	0c1b      	lsrs	r3, r3, #16
 8002728:	f003 0303 	and.w	r3, r3, #3
 800272c:	3301      	adds	r3, #1
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	60bb      	str	r3, [r7, #8]
      break;
 800273c:	e002      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002740:	60bb      	str	r3, [r7, #8]
      break;
 8002742:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002744:	68bb      	ldr	r3, [r7, #8]
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	00f42400 	.word	0x00f42400
 8002758:	017d7840 	.word	0x017d7840

0800275c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002760:	4b03      	ldr	r3, [pc, #12]	; (8002770 <HAL_RCC_GetHCLKFreq+0x14>)
 8002762:	681b      	ldr	r3, [r3, #0]
}
 8002764:	4618      	mov	r0, r3
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop
 8002770:	20000000 	.word	0x20000000

08002774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002778:	f7ff fff0 	bl	800275c <HAL_RCC_GetHCLKFreq>
 800277c:	4601      	mov	r1, r0
 800277e:	4b05      	ldr	r3, [pc, #20]	; (8002794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	0a9b      	lsrs	r3, r3, #10
 8002784:	f003 0307 	and.w	r3, r3, #7
 8002788:	4a03      	ldr	r2, [pc, #12]	; (8002798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800278a:	5cd3      	ldrb	r3, [r2, r3]
 800278c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002790:	4618      	mov	r0, r3
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	08009378 	.word	0x08009378

0800279c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027a0:	f7ff ffdc 	bl	800275c <HAL_RCC_GetHCLKFreq>
 80027a4:	4601      	mov	r1, r0
 80027a6:	4b05      	ldr	r3, [pc, #20]	; (80027bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	0b5b      	lsrs	r3, r3, #13
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	4a03      	ldr	r2, [pc, #12]	; (80027c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40023800 	.word	0x40023800
 80027c0:	08009378 	.word	0x08009378

080027c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	220f      	movs	r2, #15
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80027d4:	4b12      	ldr	r3, [pc, #72]	; (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0203 	and.w	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80027e0:	4b0f      	ldr	r3, [pc, #60]	; (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80027f8:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_GetClockConfig+0x5c>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	08db      	lsrs	r3, r3, #3
 80027fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <HAL_RCC_GetClockConfig+0x60>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 020f 	and.w	r2, r3, #15
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	601a      	str	r2, [r3, #0]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	40023c00 	.word	0x40023c00

08002828 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e01d      	b.n	8002876 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d106      	bne.n	8002854 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 f815 	bl	800287e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3304      	adds	r3, #4
 8002864:	4619      	mov	r1, r3
 8002866:	4610      	mov	r0, r2
 8002868:	f000 fa96 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f042 0201 	orr.w	r2, r2, #1
 80028a8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d007      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028cc:	2300      	movs	r3, #0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3714      	adds	r7, #20
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b082      	sub	sp, #8
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d101      	bne.n	80028ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e01d      	b.n	8002928 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d106      	bne.n	8002906 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7fe f9d1 	bl	8000ca8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3304      	adds	r3, #4
 8002916:	4619      	mov	r1, r3
 8002918:	4610      	mov	r0, r2
 800291a:	f000 fa3d 	bl	8002d98 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002926:	2300      	movs	r3, #0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2201      	movs	r2, #1
 8002940:	6839      	ldr	r1, [r7, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f000 fc78 	bl	8003238 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <HAL_TIM_PWM_Start+0x74>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d004      	beq.n	800295c <HAL_TIM_PWM_Start+0x2c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <HAL_TIM_PWM_Start+0x78>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d101      	bne.n	8002960 <HAL_TIM_PWM_Start+0x30>
 800295c:	2301      	movs	r3, #1
 800295e:	e000      	b.n	8002962 <HAL_TIM_PWM_Start+0x32>
 8002960:	2300      	movs	r3, #0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d007      	beq.n	8002976 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2b06      	cmp	r3, #6
 8002986:	d007      	beq.n	8002998 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40010000 	.word	0x40010000
 80029a8:	40010400 	.word	0x40010400

080029ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d122      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d11b      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0202 	mvn.w	r2, #2
 80029d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f003 0303 	and.w	r3, r3, #3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f9b4 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f9a6 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f9b7 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0304 	and.w	r3, r3, #4
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d122      	bne.n	8002a5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d11b      	bne.n	8002a5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0204 	mvn.w	r2, #4
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d003      	beq.n	8002a4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f98a 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002a48:	e005      	b.n	8002a56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f97c 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f98d 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d122      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d11b      	bne.n	8002ab0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0208 	mvn.w	r2, #8
 8002a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2204      	movs	r2, #4
 8002a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f960 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002a9c:	e005      	b.n	8002aaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f952 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f963 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b10      	cmp	r3, #16
 8002abc:	d122      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d11b      	bne.n	8002b04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f06f 0210 	mvn.w	r2, #16
 8002ad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2208      	movs	r2, #8
 8002ada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f936 	bl	8002d5c <HAL_TIM_IC_CaptureCallback>
 8002af0:	e005      	b.n	8002afe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f928 	bl	8002d48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f939 	bl	8002d70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d10e      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d107      	bne.n	8002b30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f06f 0201 	mvn.w	r2, #1
 8002b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe f832 	bl	8000b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b3a:	2b80      	cmp	r3, #128	; 0x80
 8002b3c:	d10e      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b80      	cmp	r3, #128	; 0x80
 8002b4a:	d107      	bne.n	8002b5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fc1a 	bl	8003390 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b40      	cmp	r3, #64	; 0x40
 8002b68:	d10e      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b74:	2b40      	cmp	r3, #64	; 0x40
 8002b76:	d107      	bne.n	8002b88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f8fe 	bl	8002d84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b20      	cmp	r3, #32
 8002b94:	d10e      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d107      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f06f 0220 	mvn.w	r2, #32
 8002bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 fbe4 	bl	800337c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e0b4      	b.n	8002d40 <HAL_TIM_PWM_ConfigChannel+0x184>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2202      	movs	r2, #2
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2b0c      	cmp	r3, #12
 8002bea:	f200 809f 	bhi.w	8002d2c <HAL_TIM_PWM_ConfigChannel+0x170>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c29 	.word	0x08002c29
 8002bf8:	08002d2d 	.word	0x08002d2d
 8002bfc:	08002d2d 	.word	0x08002d2d
 8002c00:	08002d2d 	.word	0x08002d2d
 8002c04:	08002c69 	.word	0x08002c69
 8002c08:	08002d2d 	.word	0x08002d2d
 8002c0c:	08002d2d 	.word	0x08002d2d
 8002c10:	08002d2d 	.word	0x08002d2d
 8002c14:	08002cab 	.word	0x08002cab
 8002c18:	08002d2d 	.word	0x08002d2d
 8002c1c:	08002d2d 	.word	0x08002d2d
 8002c20:	08002d2d 	.word	0x08002d2d
 8002c24:	08002ceb 	.word	0x08002ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f952 	bl	8002ed8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	699a      	ldr	r2, [r3, #24]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0208 	orr.w	r2, r2, #8
 8002c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699a      	ldr	r2, [r3, #24]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0204 	bic.w	r2, r2, #4
 8002c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6999      	ldr	r1, [r3, #24]
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	691a      	ldr	r2, [r3, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	430a      	orrs	r2, r1
 8002c64:	619a      	str	r2, [r3, #24]
      break;
 8002c66:	e062      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68b9      	ldr	r1, [r7, #8]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f9a2 	bl	8002fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	699a      	ldr	r2, [r3, #24]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	699a      	ldr	r2, [r3, #24]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6999      	ldr	r1, [r3, #24]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	021a      	lsls	r2, r3, #8
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	619a      	str	r2, [r3, #24]
      break;
 8002ca8:	e041      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68b9      	ldr	r1, [r7, #8]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 f9f7 	bl	80030a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69da      	ldr	r2, [r3, #28]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0208 	orr.w	r2, r2, #8
 8002cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0204 	bic.w	r2, r2, #4
 8002cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	69d9      	ldr	r1, [r3, #28]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	61da      	str	r2, [r3, #28]
      break;
 8002ce8:	e021      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f000 fa4b 	bl	800318c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	69da      	ldr	r2, [r3, #28]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	69d9      	ldr	r1, [r3, #28]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	021a      	lsls	r2, r3, #8
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	61da      	str	r2, [r3, #28]
      break;
 8002d2a:	e000      	b.n	8002d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002d2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b083      	sub	sp, #12
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	4a40      	ldr	r2, [pc, #256]	; (8002eac <TIM_Base_SetConfig+0x114>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db6:	d00f      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a3d      	ldr	r2, [pc, #244]	; (8002eb0 <TIM_Base_SetConfig+0x118>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d00b      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a3c      	ldr	r2, [pc, #240]	; (8002eb4 <TIM_Base_SetConfig+0x11c>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d007      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a3b      	ldr	r2, [pc, #236]	; (8002eb8 <TIM_Base_SetConfig+0x120>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_Base_SetConfig+0x40>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a3a      	ldr	r2, [pc, #232]	; (8002ebc <TIM_Base_SetConfig+0x124>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d108      	bne.n	8002dea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a2f      	ldr	r2, [pc, #188]	; (8002eac <TIM_Base_SetConfig+0x114>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d02b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df8:	d027      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a2c      	ldr	r2, [pc, #176]	; (8002eb0 <TIM_Base_SetConfig+0x118>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d023      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a2b      	ldr	r2, [pc, #172]	; (8002eb4 <TIM_Base_SetConfig+0x11c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01f      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a2a      	ldr	r2, [pc, #168]	; (8002eb8 <TIM_Base_SetConfig+0x120>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d01b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a29      	ldr	r2, [pc, #164]	; (8002ebc <TIM_Base_SetConfig+0x124>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d017      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <TIM_Base_SetConfig+0x128>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d013      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a27      	ldr	r2, [pc, #156]	; (8002ec4 <TIM_Base_SetConfig+0x12c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00f      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a26      	ldr	r2, [pc, #152]	; (8002ec8 <TIM_Base_SetConfig+0x130>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00b      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <TIM_Base_SetConfig+0x134>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a24      	ldr	r2, [pc, #144]	; (8002ed0 <TIM_Base_SetConfig+0x138>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d003      	beq.n	8002e4a <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <TIM_Base_SetConfig+0x13c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d108      	bne.n	8002e5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0a      	ldr	r2, [pc, #40]	; (8002eac <TIM_Base_SetConfig+0x114>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0xf8>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a0c      	ldr	r2, [pc, #48]	; (8002ebc <TIM_Base_SetConfig+0x124>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d103      	bne.n	8002e98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	40000c00 	.word	0x40000c00
 8002ebc:	40010400 	.word	0x40010400
 8002ec0:	40014000 	.word	0x40014000
 8002ec4:	40014400 	.word	0x40014400
 8002ec8:	40014800 	.word	0x40014800
 8002ecc:	40001800 	.word	0x40001800
 8002ed0:	40001c00 	.word	0x40001c00
 8002ed4:	40002000 	.word	0x40002000

08002ed8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b087      	sub	sp, #28
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a1b      	ldr	r3, [r3, #32]
 8002ee6:	f023 0201 	bic.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f023 0303 	bic.w	r3, r3, #3
 8002f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	f023 0302 	bic.w	r3, r3, #2
 8002f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a20      	ldr	r2, [pc, #128]	; (8002fb0 <TIM_OC1_SetConfig+0xd8>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d003      	beq.n	8002f3c <TIM_OC1_SetConfig+0x64>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <TIM_OC1_SetConfig+0xdc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d10c      	bne.n	8002f56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	f023 0308 	bic.w	r3, r3, #8
 8002f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	f023 0304 	bic.w	r3, r3, #4
 8002f54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a15      	ldr	r2, [pc, #84]	; (8002fb0 <TIM_OC1_SetConfig+0xd8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <TIM_OC1_SetConfig+0x8e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <TIM_OC1_SetConfig+0xdc>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d111      	bne.n	8002f8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	693a      	ldr	r2, [r7, #16]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	697a      	ldr	r2, [r7, #20]
 8002fa2:	621a      	str	r2, [r3, #32]
}
 8002fa4:	bf00      	nop
 8002fa6:	371c      	adds	r7, #28
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40010400 	.word	0x40010400

08002fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b087      	sub	sp, #28
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	f023 0210 	bic.w	r2, r3, #16
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fe6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	f023 0320 	bic.w	r3, r3, #32
 8003002:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	4313      	orrs	r3, r2
 800300e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a22      	ldr	r2, [pc, #136]	; (800309c <TIM_OC2_SetConfig+0xe4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_OC2_SetConfig+0x68>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <TIM_OC2_SetConfig+0xe8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d10d      	bne.n	800303c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003026:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800303a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <TIM_OC2_SetConfig+0xe4>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <TIM_OC2_SetConfig+0x94>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a16      	ldr	r2, [pc, #88]	; (80030a0 <TIM_OC2_SetConfig+0xe8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d113      	bne.n	8003074 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003052:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800305a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	4313      	orrs	r3, r2
 8003072:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	621a      	str	r2, [r3, #32]
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40010400 	.word	0x40010400

080030a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b087      	sub	sp, #28
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6a1b      	ldr	r3, [r3, #32]
 80030b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0303 	bic.w	r3, r3, #3
 80030da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	021b      	lsls	r3, r3, #8
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a21      	ldr	r2, [pc, #132]	; (8003184 <TIM_OC3_SetConfig+0xe0>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d003      	beq.n	800310a <TIM_OC3_SetConfig+0x66>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a20      	ldr	r2, [pc, #128]	; (8003188 <TIM_OC3_SetConfig+0xe4>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10d      	bne.n	8003126 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003110:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	021b      	lsls	r3, r3, #8
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	4313      	orrs	r3, r2
 800311c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003124:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a16      	ldr	r2, [pc, #88]	; (8003184 <TIM_OC3_SetConfig+0xe0>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d003      	beq.n	8003136 <TIM_OC3_SetConfig+0x92>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a15      	ldr	r2, [pc, #84]	; (8003188 <TIM_OC3_SetConfig+0xe4>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d113      	bne.n	800315e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800313c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	011b      	lsls	r3, r3, #4
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40010000 	.word	0x40010000
 8003188:	40010400 	.word	0x40010400

0800318c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	021b      	lsls	r3, r3, #8
 80031ca:	68fa      	ldr	r2, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	031b      	lsls	r3, r3, #12
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	4a12      	ldr	r2, [pc, #72]	; (8003230 <TIM_OC4_SetConfig+0xa4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d003      	beq.n	80031f4 <TIM_OC4_SetConfig+0x68>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a11      	ldr	r2, [pc, #68]	; (8003234 <TIM_OC4_SetConfig+0xa8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d109      	bne.n	8003208 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	019b      	lsls	r3, r3, #6
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685a      	ldr	r2, [r3, #4]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	621a      	str	r2, [r3, #32]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40010000 	.word	0x40010000
 8003234:	40010400 	.word	0x40010400

08003238 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003238:	b480      	push	{r7}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 031f 	and.w	r3, r3, #31
 800324a:	2201      	movs	r2, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a1a      	ldr	r2, [r3, #32]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	43db      	mvns	r3, r3
 800325a:	401a      	ands	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 031f 	and.w	r3, r3, #31
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	fa01 f303 	lsl.w	r3, r1, r3
 8003270:	431a      	orrs	r2, r3
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	621a      	str	r2, [r3, #32]
}
 8003276:	bf00      	nop
 8003278:	371c      	adds	r7, #28
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003298:	2302      	movs	r3, #2
 800329a:	e05a      	b.n	8003352 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a21      	ldr	r2, [pc, #132]	; (8003360 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d022      	beq.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d01d      	beq.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1d      	ldr	r2, [pc, #116]	; (8003364 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d018      	beq.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d013      	beq.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a1a      	ldr	r2, [pc, #104]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00e      	beq.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a18      	ldr	r2, [pc, #96]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d009      	beq.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a17      	ldr	r2, [pc, #92]	; (8003374 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d004      	beq.n	8003326 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a15      	ldr	r2, [pc, #84]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d10c      	bne.n	8003340 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800332c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	4313      	orrs	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2201      	movs	r2, #1
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40010000 	.word	0x40010000
 8003364:	40000400 	.word	0x40000400
 8003368:	40000800 	.word	0x40000800
 800336c:	40000c00 	.word	0x40000c00
 8003370:	40010400 	.word	0x40010400
 8003374:	40014000 	.word	0x40014000
 8003378:	40001800 	.word	0x40001800

0800337c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e03f      	b.n	8003436 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d106      	bne.n	80033d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7fd fcc8 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f000 f987 	bl	80036fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	691a      	ldr	r2, [r3, #16]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695a      	ldr	r2, [r3, #20]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800340c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800341c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2220      	movs	r2, #32
 8003428:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2220      	movs	r2, #32
 8003430:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b086      	sub	sp, #24
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	4613      	mov	r3, r2
 800344c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b20      	cmp	r3, #32
 8003458:	d166      	bne.n	8003528 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_Receive_DMA+0x26>
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e05f      	b.n	800352a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_UART_Receive_DMA+0x38>
 8003474:	2302      	movs	r3, #2
 8003476:	e058      	b.n	800352a <HAL_UART_Receive_DMA+0xea>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	88fa      	ldrh	r2, [r7, #6]
 800348a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2222      	movs	r2, #34	; 0x22
 8003496:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349e:	4a25      	ldr	r2, [pc, #148]	; (8003534 <HAL_UART_Receive_DMA+0xf4>)
 80034a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a6:	4a24      	ldr	r2, [pc, #144]	; (8003538 <HAL_UART_Receive_DMA+0xf8>)
 80034a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ae:	4a23      	ldr	r2, [pc, #140]	; (800353c <HAL_UART_Receive_DMA+0xfc>)
 80034b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	2200      	movs	r2, #0
 80034b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80034ba:	f107 0308 	add.w	r3, r7, #8
 80034be:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	3304      	adds	r3, #4
 80034ca:	4619      	mov	r1, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	f7fe f8c7 	bl	8001664 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003502:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	695a      	ldr	r2, [r3, #20]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	695a      	ldr	r2, [r3, #20]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003522:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003524:	2300      	movs	r3, #0
 8003526:	e000      	b.n	800352a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003528:	2302      	movs	r3, #2
  }
}
 800352a:	4618      	mov	r0, r3
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	0800357d 	.word	0x0800357d
 8003538:	080035e5 	.word	0x080035e5
 800353c:	08003601 	.word	0x08003601

08003540 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003570:	bf00      	nop
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11e      	bne.n	80035d6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035ac:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695a      	ldr	r2, [r3, #20]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035cc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f7ff ffb2 	bl	8003540 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f7ff ffae 	bl	8003554 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035f8:	bf00      	nop
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003610:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800361c:	2b80      	cmp	r3, #128	; 0x80
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b21      	cmp	r3, #33	; 0x21
 8003632:	d108      	bne.n	8003646 <UART_DMAError+0x46>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	2200      	movs	r2, #0
 800363e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003640:	68b8      	ldr	r0, [r7, #8]
 8003642:	f000 f827 	bl	8003694 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003650:	2b40      	cmp	r3, #64	; 0x40
 8003652:	bf0c      	ite	eq
 8003654:	2301      	moveq	r3, #1
 8003656:	2300      	movne	r3, #0
 8003658:	b2db      	uxtb	r3, r3
 800365a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003662:	b2db      	uxtb	r3, r3
 8003664:	2b22      	cmp	r3, #34	; 0x22
 8003666:	d108      	bne.n	800367a <UART_DMAError+0x7a>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d005      	beq.n	800367a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2200      	movs	r2, #0
 8003672:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003674:	68b8      	ldr	r0, [r7, #8]
 8003676:	f000 f823 	bl	80036c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003686:	68b8      	ldr	r0, [r7, #8]
 8003688:	f7ff ff6e 	bl	8003568 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800368c:	bf00      	nop
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68da      	ldr	r2, [r3, #12]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80036aa:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80036d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0201 	bic.w	r2, r2, #1
 80036e6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003700:	b085      	sub	sp, #20
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691b      	ldr	r3, [r3, #16]
 800370c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	431a      	orrs	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	4313      	orrs	r3, r2
 8003732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800373e:	f023 030c 	bic.w	r3, r3, #12
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	68f9      	ldr	r1, [r7, #12]
 8003748:	430b      	orrs	r3, r1
 800374a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800376a:	f040 818b 	bne.w	8003a84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4ac1      	ldr	r2, [pc, #772]	; (8003a78 <UART_SetConfig+0x37c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d005      	beq.n	8003784 <UART_SetConfig+0x88>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4abf      	ldr	r2, [pc, #764]	; (8003a7c <UART_SetConfig+0x380>)
 800377e:	4293      	cmp	r3, r2
 8003780:	f040 80bd 	bne.w	80038fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003784:	f7ff f80a 	bl	800279c <HAL_RCC_GetPCLK2Freq>
 8003788:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	461d      	mov	r5, r3
 800378e:	f04f 0600 	mov.w	r6, #0
 8003792:	46a8      	mov	r8, r5
 8003794:	46b1      	mov	r9, r6
 8003796:	eb18 0308 	adds.w	r3, r8, r8
 800379a:	eb49 0409 	adc.w	r4, r9, r9
 800379e:	4698      	mov	r8, r3
 80037a0:	46a1      	mov	r9, r4
 80037a2:	eb18 0805 	adds.w	r8, r8, r5
 80037a6:	eb49 0906 	adc.w	r9, r9, r6
 80037aa:	f04f 0100 	mov.w	r1, #0
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80037b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80037ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80037be:	4688      	mov	r8, r1
 80037c0:	4691      	mov	r9, r2
 80037c2:	eb18 0005 	adds.w	r0, r8, r5
 80037c6:	eb49 0106 	adc.w	r1, r9, r6
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	461d      	mov	r5, r3
 80037d0:	f04f 0600 	mov.w	r6, #0
 80037d4:	196b      	adds	r3, r5, r5
 80037d6:	eb46 0406 	adc.w	r4, r6, r6
 80037da:	461a      	mov	r2, r3
 80037dc:	4623      	mov	r3, r4
 80037de:	f7fc fd41 	bl	8000264 <__aeabi_uldivmod>
 80037e2:	4603      	mov	r3, r0
 80037e4:	460c      	mov	r4, r1
 80037e6:	461a      	mov	r2, r3
 80037e8:	4ba5      	ldr	r3, [pc, #660]	; (8003a80 <UART_SetConfig+0x384>)
 80037ea:	fba3 2302 	umull	r2, r3, r3, r2
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	461d      	mov	r5, r3
 80037f8:	f04f 0600 	mov.w	r6, #0
 80037fc:	46a9      	mov	r9, r5
 80037fe:	46b2      	mov	sl, r6
 8003800:	eb19 0309 	adds.w	r3, r9, r9
 8003804:	eb4a 040a 	adc.w	r4, sl, sl
 8003808:	4699      	mov	r9, r3
 800380a:	46a2      	mov	sl, r4
 800380c:	eb19 0905 	adds.w	r9, r9, r5
 8003810:	eb4a 0a06 	adc.w	sl, sl, r6
 8003814:	f04f 0100 	mov.w	r1, #0
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003820:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003824:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003828:	4689      	mov	r9, r1
 800382a:	4692      	mov	sl, r2
 800382c:	eb19 0005 	adds.w	r0, r9, r5
 8003830:	eb4a 0106 	adc.w	r1, sl, r6
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	461d      	mov	r5, r3
 800383a:	f04f 0600 	mov.w	r6, #0
 800383e:	196b      	adds	r3, r5, r5
 8003840:	eb46 0406 	adc.w	r4, r6, r6
 8003844:	461a      	mov	r2, r3
 8003846:	4623      	mov	r3, r4
 8003848:	f7fc fd0c 	bl	8000264 <__aeabi_uldivmod>
 800384c:	4603      	mov	r3, r0
 800384e:	460c      	mov	r4, r1
 8003850:	461a      	mov	r2, r3
 8003852:	4b8b      	ldr	r3, [pc, #556]	; (8003a80 <UART_SetConfig+0x384>)
 8003854:	fba3 1302 	umull	r1, r3, r3, r2
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	2164      	movs	r1, #100	; 0x64
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	3332      	adds	r3, #50	; 0x32
 8003866:	4a86      	ldr	r2, [pc, #536]	; (8003a80 <UART_SetConfig+0x384>)
 8003868:	fba2 2303 	umull	r2, r3, r2, r3
 800386c:	095b      	lsrs	r3, r3, #5
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003874:	4498      	add	r8, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	461d      	mov	r5, r3
 800387a:	f04f 0600 	mov.w	r6, #0
 800387e:	46a9      	mov	r9, r5
 8003880:	46b2      	mov	sl, r6
 8003882:	eb19 0309 	adds.w	r3, r9, r9
 8003886:	eb4a 040a 	adc.w	r4, sl, sl
 800388a:	4699      	mov	r9, r3
 800388c:	46a2      	mov	sl, r4
 800388e:	eb19 0905 	adds.w	r9, r9, r5
 8003892:	eb4a 0a06 	adc.w	sl, sl, r6
 8003896:	f04f 0100 	mov.w	r1, #0
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80038a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80038aa:	4689      	mov	r9, r1
 80038ac:	4692      	mov	sl, r2
 80038ae:	eb19 0005 	adds.w	r0, r9, r5
 80038b2:	eb4a 0106 	adc.w	r1, sl, r6
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	461d      	mov	r5, r3
 80038bc:	f04f 0600 	mov.w	r6, #0
 80038c0:	196b      	adds	r3, r5, r5
 80038c2:	eb46 0406 	adc.w	r4, r6, r6
 80038c6:	461a      	mov	r2, r3
 80038c8:	4623      	mov	r3, r4
 80038ca:	f7fc fccb 	bl	8000264 <__aeabi_uldivmod>
 80038ce:	4603      	mov	r3, r0
 80038d0:	460c      	mov	r4, r1
 80038d2:	461a      	mov	r2, r3
 80038d4:	4b6a      	ldr	r3, [pc, #424]	; (8003a80 <UART_SetConfig+0x384>)
 80038d6:	fba3 1302 	umull	r1, r3, r3, r2
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2164      	movs	r1, #100	; 0x64
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	3332      	adds	r3, #50	; 0x32
 80038e8:	4a65      	ldr	r2, [pc, #404]	; (8003a80 <UART_SetConfig+0x384>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	f003 0207 	and.w	r2, r3, #7
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4442      	add	r2, r8
 80038fa:	609a      	str	r2, [r3, #8]
 80038fc:	e26f      	b.n	8003dde <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038fe:	f7fe ff39 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8003902:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	461d      	mov	r5, r3
 8003908:	f04f 0600 	mov.w	r6, #0
 800390c:	46a8      	mov	r8, r5
 800390e:	46b1      	mov	r9, r6
 8003910:	eb18 0308 	adds.w	r3, r8, r8
 8003914:	eb49 0409 	adc.w	r4, r9, r9
 8003918:	4698      	mov	r8, r3
 800391a:	46a1      	mov	r9, r4
 800391c:	eb18 0805 	adds.w	r8, r8, r5
 8003920:	eb49 0906 	adc.w	r9, r9, r6
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003930:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003934:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003938:	4688      	mov	r8, r1
 800393a:	4691      	mov	r9, r2
 800393c:	eb18 0005 	adds.w	r0, r8, r5
 8003940:	eb49 0106 	adc.w	r1, r9, r6
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	461d      	mov	r5, r3
 800394a:	f04f 0600 	mov.w	r6, #0
 800394e:	196b      	adds	r3, r5, r5
 8003950:	eb46 0406 	adc.w	r4, r6, r6
 8003954:	461a      	mov	r2, r3
 8003956:	4623      	mov	r3, r4
 8003958:	f7fc fc84 	bl	8000264 <__aeabi_uldivmod>
 800395c:	4603      	mov	r3, r0
 800395e:	460c      	mov	r4, r1
 8003960:	461a      	mov	r2, r3
 8003962:	4b47      	ldr	r3, [pc, #284]	; (8003a80 <UART_SetConfig+0x384>)
 8003964:	fba3 2302 	umull	r2, r3, r3, r2
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	461d      	mov	r5, r3
 8003972:	f04f 0600 	mov.w	r6, #0
 8003976:	46a9      	mov	r9, r5
 8003978:	46b2      	mov	sl, r6
 800397a:	eb19 0309 	adds.w	r3, r9, r9
 800397e:	eb4a 040a 	adc.w	r4, sl, sl
 8003982:	4699      	mov	r9, r3
 8003984:	46a2      	mov	sl, r4
 8003986:	eb19 0905 	adds.w	r9, r9, r5
 800398a:	eb4a 0a06 	adc.w	sl, sl, r6
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800399a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800399e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039a2:	4689      	mov	r9, r1
 80039a4:	4692      	mov	sl, r2
 80039a6:	eb19 0005 	adds.w	r0, r9, r5
 80039aa:	eb4a 0106 	adc.w	r1, sl, r6
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	461d      	mov	r5, r3
 80039b4:	f04f 0600 	mov.w	r6, #0
 80039b8:	196b      	adds	r3, r5, r5
 80039ba:	eb46 0406 	adc.w	r4, r6, r6
 80039be:	461a      	mov	r2, r3
 80039c0:	4623      	mov	r3, r4
 80039c2:	f7fc fc4f 	bl	8000264 <__aeabi_uldivmod>
 80039c6:	4603      	mov	r3, r0
 80039c8:	460c      	mov	r4, r1
 80039ca:	461a      	mov	r2, r3
 80039cc:	4b2c      	ldr	r3, [pc, #176]	; (8003a80 <UART_SetConfig+0x384>)
 80039ce:	fba3 1302 	umull	r1, r3, r3, r2
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	2164      	movs	r1, #100	; 0x64
 80039d6:	fb01 f303 	mul.w	r3, r1, r3
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	3332      	adds	r3, #50	; 0x32
 80039e0:	4a27      	ldr	r2, [pc, #156]	; (8003a80 <UART_SetConfig+0x384>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	095b      	lsrs	r3, r3, #5
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039ee:	4498      	add	r8, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	461d      	mov	r5, r3
 80039f4:	f04f 0600 	mov.w	r6, #0
 80039f8:	46a9      	mov	r9, r5
 80039fa:	46b2      	mov	sl, r6
 80039fc:	eb19 0309 	adds.w	r3, r9, r9
 8003a00:	eb4a 040a 	adc.w	r4, sl, sl
 8003a04:	4699      	mov	r9, r3
 8003a06:	46a2      	mov	sl, r4
 8003a08:	eb19 0905 	adds.w	r9, r9, r5
 8003a0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a24:	4689      	mov	r9, r1
 8003a26:	4692      	mov	sl, r2
 8003a28:	eb19 0005 	adds.w	r0, r9, r5
 8003a2c:	eb4a 0106 	adc.w	r1, sl, r6
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	461d      	mov	r5, r3
 8003a36:	f04f 0600 	mov.w	r6, #0
 8003a3a:	196b      	adds	r3, r5, r5
 8003a3c:	eb46 0406 	adc.w	r4, r6, r6
 8003a40:	461a      	mov	r2, r3
 8003a42:	4623      	mov	r3, r4
 8003a44:	f7fc fc0e 	bl	8000264 <__aeabi_uldivmod>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	460c      	mov	r4, r1
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4b0c      	ldr	r3, [pc, #48]	; (8003a80 <UART_SetConfig+0x384>)
 8003a50:	fba3 1302 	umull	r1, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	2164      	movs	r1, #100	; 0x64
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	3332      	adds	r3, #50	; 0x32
 8003a62:	4a07      	ldr	r2, [pc, #28]	; (8003a80 <UART_SetConfig+0x384>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	f003 0207 	and.w	r2, r3, #7
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4442      	add	r2, r8
 8003a74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003a76:	e1b2      	b.n	8003dde <UART_SetConfig+0x6e2>
 8003a78:	40011000 	.word	0x40011000
 8003a7c:	40011400 	.word	0x40011400
 8003a80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4ad7      	ldr	r2, [pc, #860]	; (8003de8 <UART_SetConfig+0x6ec>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d005      	beq.n	8003a9a <UART_SetConfig+0x39e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4ad6      	ldr	r2, [pc, #856]	; (8003dec <UART_SetConfig+0x6f0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	f040 80d1 	bne.w	8003c3c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a9a:	f7fe fe7f 	bl	800279c <HAL_RCC_GetPCLK2Freq>
 8003a9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	469a      	mov	sl, r3
 8003aa4:	f04f 0b00 	mov.w	fp, #0
 8003aa8:	46d0      	mov	r8, sl
 8003aaa:	46d9      	mov	r9, fp
 8003aac:	eb18 0308 	adds.w	r3, r8, r8
 8003ab0:	eb49 0409 	adc.w	r4, r9, r9
 8003ab4:	4698      	mov	r8, r3
 8003ab6:	46a1      	mov	r9, r4
 8003ab8:	eb18 080a 	adds.w	r8, r8, sl
 8003abc:	eb49 090b 	adc.w	r9, r9, fp
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003acc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ad0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ad4:	4688      	mov	r8, r1
 8003ad6:	4691      	mov	r9, r2
 8003ad8:	eb1a 0508 	adds.w	r5, sl, r8
 8003adc:	eb4b 0609 	adc.w	r6, fp, r9
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	f04f 0300 	mov.w	r3, #0
 8003aee:	f04f 0400 	mov.w	r4, #0
 8003af2:	0094      	lsls	r4, r2, #2
 8003af4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003af8:	008b      	lsls	r3, r1, #2
 8003afa:	461a      	mov	r2, r3
 8003afc:	4623      	mov	r3, r4
 8003afe:	4628      	mov	r0, r5
 8003b00:	4631      	mov	r1, r6
 8003b02:	f7fc fbaf 	bl	8000264 <__aeabi_uldivmod>
 8003b06:	4603      	mov	r3, r0
 8003b08:	460c      	mov	r4, r1
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	4bb8      	ldr	r3, [pc, #736]	; (8003df0 <UART_SetConfig+0x6f4>)
 8003b0e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b12:	095b      	lsrs	r3, r3, #5
 8003b14:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	469b      	mov	fp, r3
 8003b1c:	f04f 0c00 	mov.w	ip, #0
 8003b20:	46d9      	mov	r9, fp
 8003b22:	46e2      	mov	sl, ip
 8003b24:	eb19 0309 	adds.w	r3, r9, r9
 8003b28:	eb4a 040a 	adc.w	r4, sl, sl
 8003b2c:	4699      	mov	r9, r3
 8003b2e:	46a2      	mov	sl, r4
 8003b30:	eb19 090b 	adds.w	r9, r9, fp
 8003b34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b38:	f04f 0100 	mov.w	r1, #0
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b4c:	4689      	mov	r9, r1
 8003b4e:	4692      	mov	sl, r2
 8003b50:	eb1b 0509 	adds.w	r5, fp, r9
 8003b54:	eb4c 060a 	adc.w	r6, ip, sl
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	f04f 0400 	mov.w	r4, #0
 8003b6a:	0094      	lsls	r4, r2, #2
 8003b6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b70:	008b      	lsls	r3, r1, #2
 8003b72:	461a      	mov	r2, r3
 8003b74:	4623      	mov	r3, r4
 8003b76:	4628      	mov	r0, r5
 8003b78:	4631      	mov	r1, r6
 8003b7a:	f7fc fb73 	bl	8000264 <__aeabi_uldivmod>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	460c      	mov	r4, r1
 8003b82:	461a      	mov	r2, r3
 8003b84:	4b9a      	ldr	r3, [pc, #616]	; (8003df0 <UART_SetConfig+0x6f4>)
 8003b86:	fba3 1302 	umull	r1, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2164      	movs	r1, #100	; 0x64
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	3332      	adds	r3, #50	; 0x32
 8003b98:	4a95      	ldr	r2, [pc, #596]	; (8003df0 <UART_SetConfig+0x6f4>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba4:	4498      	add	r8, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	469b      	mov	fp, r3
 8003baa:	f04f 0c00 	mov.w	ip, #0
 8003bae:	46d9      	mov	r9, fp
 8003bb0:	46e2      	mov	sl, ip
 8003bb2:	eb19 0309 	adds.w	r3, r9, r9
 8003bb6:	eb4a 040a 	adc.w	r4, sl, sl
 8003bba:	4699      	mov	r9, r3
 8003bbc:	46a2      	mov	sl, r4
 8003bbe:	eb19 090b 	adds.w	r9, r9, fp
 8003bc2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bda:	4689      	mov	r9, r1
 8003bdc:	4692      	mov	sl, r2
 8003bde:	eb1b 0509 	adds.w	r5, fp, r9
 8003be2:	eb4c 060a 	adc.w	r6, ip, sl
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	4619      	mov	r1, r3
 8003bec:	f04f 0200 	mov.w	r2, #0
 8003bf0:	f04f 0300 	mov.w	r3, #0
 8003bf4:	f04f 0400 	mov.w	r4, #0
 8003bf8:	0094      	lsls	r4, r2, #2
 8003bfa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003bfe:	008b      	lsls	r3, r1, #2
 8003c00:	461a      	mov	r2, r3
 8003c02:	4623      	mov	r3, r4
 8003c04:	4628      	mov	r0, r5
 8003c06:	4631      	mov	r1, r6
 8003c08:	f7fc fb2c 	bl	8000264 <__aeabi_uldivmod>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	460c      	mov	r4, r1
 8003c10:	461a      	mov	r2, r3
 8003c12:	4b77      	ldr	r3, [pc, #476]	; (8003df0 <UART_SetConfig+0x6f4>)
 8003c14:	fba3 1302 	umull	r1, r3, r3, r2
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	2164      	movs	r1, #100	; 0x64
 8003c1c:	fb01 f303 	mul.w	r3, r1, r3
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	3332      	adds	r3, #50	; 0x32
 8003c26:	4a72      	ldr	r2, [pc, #456]	; (8003df0 <UART_SetConfig+0x6f4>)
 8003c28:	fba2 2303 	umull	r2, r3, r2, r3
 8003c2c:	095b      	lsrs	r3, r3, #5
 8003c2e:	f003 020f 	and.w	r2, r3, #15
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4442      	add	r2, r8
 8003c38:	609a      	str	r2, [r3, #8]
 8003c3a:	e0d0      	b.n	8003dde <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7fe fd9a 	bl	8002774 <HAL_RCC_GetPCLK1Freq>
 8003c40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	469a      	mov	sl, r3
 8003c46:	f04f 0b00 	mov.w	fp, #0
 8003c4a:	46d0      	mov	r8, sl
 8003c4c:	46d9      	mov	r9, fp
 8003c4e:	eb18 0308 	adds.w	r3, r8, r8
 8003c52:	eb49 0409 	adc.w	r4, r9, r9
 8003c56:	4698      	mov	r8, r3
 8003c58:	46a1      	mov	r9, r4
 8003c5a:	eb18 080a 	adds.w	r8, r8, sl
 8003c5e:	eb49 090b 	adc.w	r9, r9, fp
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c76:	4688      	mov	r8, r1
 8003c78:	4691      	mov	r9, r2
 8003c7a:	eb1a 0508 	adds.w	r5, sl, r8
 8003c7e:	eb4b 0609 	adc.w	r6, fp, r9
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	4619      	mov	r1, r3
 8003c88:	f04f 0200 	mov.w	r2, #0
 8003c8c:	f04f 0300 	mov.w	r3, #0
 8003c90:	f04f 0400 	mov.w	r4, #0
 8003c94:	0094      	lsls	r4, r2, #2
 8003c96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c9a:	008b      	lsls	r3, r1, #2
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	4628      	mov	r0, r5
 8003ca2:	4631      	mov	r1, r6
 8003ca4:	f7fc fade 	bl	8000264 <__aeabi_uldivmod>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	460c      	mov	r4, r1
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <UART_SetConfig+0x6f4>)
 8003cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	469b      	mov	fp, r3
 8003cbe:	f04f 0c00 	mov.w	ip, #0
 8003cc2:	46d9      	mov	r9, fp
 8003cc4:	46e2      	mov	sl, ip
 8003cc6:	eb19 0309 	adds.w	r3, r9, r9
 8003cca:	eb4a 040a 	adc.w	r4, sl, sl
 8003cce:	4699      	mov	r9, r3
 8003cd0:	46a2      	mov	sl, r4
 8003cd2:	eb19 090b 	adds.w	r9, r9, fp
 8003cd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003cda:	f04f 0100 	mov.w	r1, #0
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ce6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003cea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003cee:	4689      	mov	r9, r1
 8003cf0:	4692      	mov	sl, r2
 8003cf2:	eb1b 0509 	adds.w	r5, fp, r9
 8003cf6:	eb4c 060a 	adc.w	r6, ip, sl
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	f04f 0400 	mov.w	r4, #0
 8003d0c:	0094      	lsls	r4, r2, #2
 8003d0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d12:	008b      	lsls	r3, r1, #2
 8003d14:	461a      	mov	r2, r3
 8003d16:	4623      	mov	r3, r4
 8003d18:	4628      	mov	r0, r5
 8003d1a:	4631      	mov	r1, r6
 8003d1c:	f7fc faa2 	bl	8000264 <__aeabi_uldivmod>
 8003d20:	4603      	mov	r3, r0
 8003d22:	460c      	mov	r4, r1
 8003d24:	461a      	mov	r2, r3
 8003d26:	4b32      	ldr	r3, [pc, #200]	; (8003df0 <UART_SetConfig+0x6f4>)
 8003d28:	fba3 1302 	umull	r1, r3, r3, r2
 8003d2c:	095b      	lsrs	r3, r3, #5
 8003d2e:	2164      	movs	r1, #100	; 0x64
 8003d30:	fb01 f303 	mul.w	r3, r1, r3
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	011b      	lsls	r3, r3, #4
 8003d38:	3332      	adds	r3, #50	; 0x32
 8003d3a:	4a2d      	ldr	r2, [pc, #180]	; (8003df0 <UART_SetConfig+0x6f4>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	095b      	lsrs	r3, r3, #5
 8003d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d46:	4498      	add	r8, r3
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	469b      	mov	fp, r3
 8003d4c:	f04f 0c00 	mov.w	ip, #0
 8003d50:	46d9      	mov	r9, fp
 8003d52:	46e2      	mov	sl, ip
 8003d54:	eb19 0309 	adds.w	r3, r9, r9
 8003d58:	eb4a 040a 	adc.w	r4, sl, sl
 8003d5c:	4699      	mov	r9, r3
 8003d5e:	46a2      	mov	sl, r4
 8003d60:	eb19 090b 	adds.w	r9, r9, fp
 8003d64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d68:	f04f 0100 	mov.w	r1, #0
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d7c:	4689      	mov	r9, r1
 8003d7e:	4692      	mov	sl, r2
 8003d80:	eb1b 0509 	adds.w	r5, fp, r9
 8003d84:	eb4c 060a 	adc.w	r6, ip, sl
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	f04f 0400 	mov.w	r4, #0
 8003d9a:	0094      	lsls	r4, r2, #2
 8003d9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003da0:	008b      	lsls	r3, r1, #2
 8003da2:	461a      	mov	r2, r3
 8003da4:	4623      	mov	r3, r4
 8003da6:	4628      	mov	r0, r5
 8003da8:	4631      	mov	r1, r6
 8003daa:	f7fc fa5b 	bl	8000264 <__aeabi_uldivmod>
 8003dae:	4603      	mov	r3, r0
 8003db0:	460c      	mov	r4, r1
 8003db2:	461a      	mov	r2, r3
 8003db4:	4b0e      	ldr	r3, [pc, #56]	; (8003df0 <UART_SetConfig+0x6f4>)
 8003db6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dba:	095b      	lsrs	r3, r3, #5
 8003dbc:	2164      	movs	r1, #100	; 0x64
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	011b      	lsls	r3, r3, #4
 8003dc6:	3332      	adds	r3, #50	; 0x32
 8003dc8:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <UART_SetConfig+0x6f4>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	095b      	lsrs	r3, r3, #5
 8003dd0:	f003 020f 	and.w	r2, r3, #15
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4442      	add	r2, r8
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	e7ff      	b.n	8003dde <UART_SetConfig+0x6e2>
 8003dde:	bf00      	nop
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003de8:	40011000 	.word	0x40011000
 8003dec:	40011400 	.word	0x40011400
 8003df0:	51eb851f 	.word	0x51eb851f

08003df4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
	...

08003e04 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e04:	b480      	push	{r7}
 8003e06:	b085      	sub	sp, #20
 8003e08:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e0a:	f3ef 8305 	mrs	r3, IPSR
 8003e0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e16:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1a:	607b      	str	r3, [r7, #4]
  return(result);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e22:	f3ef 8311 	mrs	r3, BASEPRI
 8003e26:	603b      	str	r3, [r7, #0]
  return(result);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <osKernelInitialize+0x3a>
 8003e2e:	4b0e      	ldr	r3, [pc, #56]	; (8003e68 <osKernelInitialize+0x64>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d103      	bne.n	8003e3e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003e36:	f06f 0305 	mvn.w	r3, #5
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	e00c      	b.n	8003e58 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <osKernelInitialize+0x64>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d105      	bne.n	8003e52 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e46:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <osKernelInitialize+0x64>)
 8003e48:	2201      	movs	r2, #1
 8003e4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	e002      	b.n	8003e58 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003e52:	f04f 33ff 	mov.w	r3, #4294967295
 8003e56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003e58:	68fb      	ldr	r3, [r7, #12]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	20000030 	.word	0x20000030

08003e6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e72:	f3ef 8305 	mrs	r3, IPSR
 8003e76:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10f      	bne.n	8003e9e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e82:	607b      	str	r3, [r7, #4]
  return(result);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8003e8e:	603b      	str	r3, [r7, #0]
  return(result);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <osKernelStart+0x3a>
 8003e96:	4b0f      	ldr	r3, [pc, #60]	; (8003ed4 <osKernelStart+0x68>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d103      	bne.n	8003ea6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003e9e:	f06f 0305 	mvn.w	r3, #5
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	e010      	b.n	8003ec8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	; (8003ed4 <osKernelStart+0x68>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d109      	bne.n	8003ec2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003eae:	f7ff ffa1 	bl	8003df4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003eb2:	4b08      	ldr	r3, [pc, #32]	; (8003ed4 <osKernelStart+0x68>)
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003eb8:	f001 fe00 	bl	8005abc <vTaskStartScheduler>
      stat = osOK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	e002      	b.n	8003ec8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ec6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	20000030 	.word	0x20000030

08003ed8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b090      	sub	sp, #64	; 0x40
 8003edc:	af04      	add	r7, sp, #16
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ee8:	f3ef 8305 	mrs	r3, IPSR
 8003eec:	61fb      	str	r3, [r7, #28]
  return(result);
 8003eee:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f040 808f 	bne.w	8004014 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8003efa:	61bb      	str	r3, [r7, #24]
  return(result);
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d105      	bne.n	8003f0e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003f02:	f3ef 8311 	mrs	r3, BASEPRI
 8003f06:	617b      	str	r3, [r7, #20]
  return(result);
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <osThreadNew+0x3e>
 8003f0e:	4b44      	ldr	r3, [pc, #272]	; (8004020 <osThreadNew+0x148>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d07e      	beq.n	8004014 <osThreadNew+0x13c>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d07b      	beq.n	8004014 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003f1c:	2380      	movs	r3, #128	; 0x80
 8003f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8003f20:	2318      	movs	r3, #24
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003f28:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d045      	beq.n	8003fc0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <osThreadNew+0x6a>
        name = attr->name;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d002      	beq.n	8003f50 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <osThreadNew+0x90>
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	2b38      	cmp	r3, #56	; 0x38
 8003f5a:	d805      	bhi.n	8003f68 <osThreadNew+0x90>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d001      	beq.n	8003f6c <osThreadNew+0x94>
        return (NULL);
 8003f68:	2300      	movs	r3, #0
 8003f6a:	e054      	b.n	8004016 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	695b      	ldr	r3, [r3, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	089b      	lsrs	r3, r3, #2
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00e      	beq.n	8003fa2 <osThreadNew+0xca>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	2b5f      	cmp	r3, #95	; 0x5f
 8003f8a:	d90a      	bls.n	8003fa2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d006      	beq.n	8003fa2 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d002      	beq.n	8003fa2 <osThreadNew+0xca>
        mem = 1;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	623b      	str	r3, [r7, #32]
 8003fa0:	e010      	b.n	8003fc4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <osThreadNew+0xec>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d108      	bne.n	8003fc4 <osThreadNew+0xec>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d104      	bne.n	8003fc4 <osThreadNew+0xec>
          mem = 0;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	623b      	str	r3, [r7, #32]
 8003fbe:	e001      	b.n	8003fc4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	d110      	bne.n	8003fec <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fd2:	9202      	str	r2, [sp, #8]
 8003fd4:	9301      	str	r3, [sp, #4]
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f001 fb71 	bl	80056c8 <xTaskCreateStatic>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	e013      	b.n	8004014 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003fec:	6a3b      	ldr	r3, [r7, #32]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d110      	bne.n	8004014 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff4:	b29a      	uxth	r2, r3
 8003ff6:	f107 0310 	add.w	r3, r7, #16
 8003ffa:	9301      	str	r3, [sp, #4]
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f001 fbb9 	bl	800577c <xTaskCreate>
 800400a:	4603      	mov	r3, r0
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <osThreadNew+0x13c>
          hTask = NULL;
 8004010:	2300      	movs	r3, #0
 8004012:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004014:	693b      	ldr	r3, [r7, #16]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3730      	adds	r7, #48	; 0x30
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000030 	.word	0x20000030

08004024 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800402c:	f3ef 8305 	mrs	r3, IPSR
 8004030:	613b      	str	r3, [r7, #16]
  return(result);
 8004032:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10f      	bne.n	8004058 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004038:	f3ef 8310 	mrs	r3, PRIMASK
 800403c:	60fb      	str	r3, [r7, #12]
  return(result);
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004044:	f3ef 8311 	mrs	r3, BASEPRI
 8004048:	60bb      	str	r3, [r7, #8]
  return(result);
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d007      	beq.n	8004060 <osDelay+0x3c>
 8004050:	4b0a      	ldr	r3, [pc, #40]	; (800407c <osDelay+0x58>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2b02      	cmp	r3, #2
 8004056:	d103      	bne.n	8004060 <osDelay+0x3c>
    stat = osErrorISR;
 8004058:	f06f 0305 	mvn.w	r3, #5
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	e007      	b.n	8004070 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004060:	2300      	movs	r3, #0
 8004062:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <osDelay+0x4c>
      vTaskDelay(ticks);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f001 fcee 	bl	8005a4c <vTaskDelay>
    }
  }

  return (stat);
 8004070:	697b      	ldr	r3, [r7, #20]
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	20000030 	.word	0x20000030

08004080 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b08c      	sub	sp, #48	; 0x30
 8004084:	af02      	add	r7, sp, #8
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800408c:	2300      	movs	r3, #0
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004090:	f3ef 8305 	mrs	r3, IPSR
 8004094:	61bb      	str	r3, [r7, #24]
  return(result);
 8004096:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004098:	2b00      	cmp	r3, #0
 800409a:	f040 8087 	bne.w	80041ac <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800409e:	f3ef 8310 	mrs	r3, PRIMASK
 80040a2:	617b      	str	r3, [r7, #20]
  return(result);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d105      	bne.n	80040b6 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040aa:	f3ef 8311 	mrs	r3, BASEPRI
 80040ae:	613b      	str	r3, [r7, #16]
  return(result);
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d003      	beq.n	80040be <osSemaphoreNew+0x3e>
 80040b6:	4b40      	ldr	r3, [pc, #256]	; (80041b8 <osSemaphoreNew+0x138>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d076      	beq.n	80041ac <osSemaphoreNew+0x12c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d073      	beq.n	80041ac <osSemaphoreNew+0x12c>
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d86f      	bhi.n	80041ac <osSemaphoreNew+0x12c>
    mem = -1;
 80040cc:	f04f 33ff 	mov.w	r3, #4294967295
 80040d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d015      	beq.n	8004104 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d006      	beq.n	80040ee <osSemaphoreNew+0x6e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b4f      	cmp	r3, #79	; 0x4f
 80040e6:	d902      	bls.n	80040ee <osSemaphoreNew+0x6e>
        mem = 1;
 80040e8:	2301      	movs	r3, #1
 80040ea:	623b      	str	r3, [r7, #32]
 80040ec:	e00c      	b.n	8004108 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d108      	bne.n	8004108 <osSemaphoreNew+0x88>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <osSemaphoreNew+0x88>
          mem = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	623b      	str	r3, [r7, #32]
 8004102:	e001      	b.n	8004108 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8004104:	2300      	movs	r3, #0
 8004106:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410e:	d04d      	beq.n	80041ac <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d129      	bne.n	800416a <osSemaphoreNew+0xea>
        if (mem == 1) {
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10b      	bne.n	8004134 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	2303      	movs	r3, #3
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	4613      	mov	r3, r2
 8004126:	2200      	movs	r2, #0
 8004128:	2100      	movs	r1, #0
 800412a:	2001      	movs	r0, #1
 800412c:	f000 fa54 	bl	80045d8 <xQueueGenericCreateStatic>
 8004130:	6278      	str	r0, [r7, #36]	; 0x24
 8004132:	e005      	b.n	8004140 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8004134:	2203      	movs	r2, #3
 8004136:	2100      	movs	r1, #0
 8004138:	2001      	movs	r0, #1
 800413a:	f000 fac0 	bl	80046be <xQueueGenericCreate>
 800413e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	2b00      	cmp	r3, #0
 8004144:	d022      	beq.n	800418c <osSemaphoreNew+0x10c>
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d01f      	beq.n	800418c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800414c:	2300      	movs	r3, #0
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004154:	f000 fb82 	bl	800485c <xQueueGenericSend>
 8004158:	4603      	mov	r3, r0
 800415a:	2b01      	cmp	r3, #1
 800415c:	d016      	beq.n	800418c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 800415e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004160:	f001 f8d1 	bl	8005306 <vQueueDelete>
            hSemaphore = NULL;
 8004164:	2300      	movs	r3, #0
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
 8004168:	e010      	b.n	800418c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d108      	bne.n	8004182 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	461a      	mov	r2, r3
 8004176:	68b9      	ldr	r1, [r7, #8]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fb08 	bl	800478e <xQueueCreateCountingSemaphoreStatic>
 800417e:	6278      	str	r0, [r7, #36]	; 0x24
 8004180:	e004      	b.n	800418c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004182:	68b9      	ldr	r1, [r7, #8]
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 fb37 	bl	80047f8 <xQueueCreateCountingSemaphore>
 800418a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800418c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00c      	beq.n	80041ac <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <osSemaphoreNew+0x120>
          name = attr->name;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	61fb      	str	r3, [r7, #28]
 800419e:	e001      	b.n	80041a4 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80041a0:	2300      	movs	r3, #0
 80041a2:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80041a4:	69f9      	ldr	r1, [r7, #28]
 80041a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80041a8:	f001 fa00 	bl	80055ac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3728      	adds	r7, #40	; 0x28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000030 	.word	0x20000030

080041bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d103      	bne.n	80041dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80041d4:	f06f 0303 	mvn.w	r3, #3
 80041d8:	61fb      	str	r3, [r7, #28]
 80041da:	e04b      	b.n	8004274 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041dc:	f3ef 8305 	mrs	r3, IPSR
 80041e0:	617b      	str	r3, [r7, #20]
  return(result);
 80041e2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10f      	bne.n	8004208 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ec:	613b      	str	r3, [r7, #16]
  return(result);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041f4:	f3ef 8311 	mrs	r3, BASEPRI
 80041f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d026      	beq.n	800424e <osSemaphoreAcquire+0x92>
 8004200:	4b1f      	ldr	r3, [pc, #124]	; (8004280 <osSemaphoreAcquire+0xc4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b02      	cmp	r3, #2
 8004206:	d122      	bne.n	800424e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800420e:	f06f 0303 	mvn.w	r3, #3
 8004212:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004214:	e02d      	b.n	8004272 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800421a:	f107 0308 	add.w	r3, r7, #8
 800421e:	461a      	mov	r2, r3
 8004220:	2100      	movs	r1, #0
 8004222:	69b8      	ldr	r0, [r7, #24]
 8004224:	f000 ffd4 	bl	80051d0 <xQueueReceiveFromISR>
 8004228:	4603      	mov	r3, r0
 800422a:	2b01      	cmp	r3, #1
 800422c:	d003      	beq.n	8004236 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800422e:	f06f 0302 	mvn.w	r3, #2
 8004232:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8004234:	e01d      	b.n	8004272 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d01a      	beq.n	8004272 <osSemaphoreAcquire+0xb6>
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <osSemaphoreAcquire+0xc8>)
 800423e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	f3bf 8f4f 	dsb	sy
 8004248:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800424c:	e011      	b.n	8004272 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800424e:	6839      	ldr	r1, [r7, #0]
 8004250:	69b8      	ldr	r0, [r7, #24]
 8004252:	f000 fe7f 	bl	8004f54 <xQueueSemaphoreTake>
 8004256:	4603      	mov	r3, r0
 8004258:	2b01      	cmp	r3, #1
 800425a:	d00b      	beq.n	8004274 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8004262:	f06f 0301 	mvn.w	r3, #1
 8004266:	61fb      	str	r3, [r7, #28]
 8004268:	e004      	b.n	8004274 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800426a:	f06f 0302 	mvn.w	r3, #2
 800426e:	61fb      	str	r3, [r7, #28]
 8004270:	e000      	b.n	8004274 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8004272:	bf00      	nop
      }
    }
  }

  return (stat);
 8004274:	69fb      	ldr	r3, [r7, #28]
}
 8004276:	4618      	mov	r0, r3
 8004278:	3720      	adds	r7, #32
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000030 	.word	0x20000030
 8004284:	e000ed04 	.word	0xe000ed04

08004288 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800429e:	f06f 0303 	mvn.w	r3, #3
 80042a2:	61fb      	str	r3, [r7, #28]
 80042a4:	e03e      	b.n	8004324 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042a6:	f3ef 8305 	mrs	r3, IPSR
 80042aa:	617b      	str	r3, [r7, #20]
  return(result);
 80042ac:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b2:	f3ef 8310 	mrs	r3, PRIMASK
 80042b6:	613b      	str	r3, [r7, #16]
  return(result);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d105      	bne.n	80042ca <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042be:	f3ef 8311 	mrs	r3, BASEPRI
 80042c2:	60fb      	str	r3, [r7, #12]
  return(result);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01e      	beq.n	8004308 <osSemaphoreRelease+0x80>
 80042ca:	4b19      	ldr	r3, [pc, #100]	; (8004330 <osSemaphoreRelease+0xa8>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b02      	cmp	r3, #2
 80042d0:	d11a      	bne.n	8004308 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80042d6:	f107 0308 	add.w	r3, r7, #8
 80042da:	4619      	mov	r1, r3
 80042dc:	69b8      	ldr	r0, [r7, #24]
 80042de:	f000 fc87 	bl	8004bf0 <xQueueGiveFromISR>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d003      	beq.n	80042f0 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80042e8:	f06f 0302 	mvn.w	r3, #2
 80042ec:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80042ee:	e018      	b.n	8004322 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d015      	beq.n	8004322 <osSemaphoreRelease+0x9a>
 80042f6:	4b0f      	ldr	r3, [pc, #60]	; (8004334 <osSemaphoreRelease+0xac>)
 80042f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004306:	e00c      	b.n	8004322 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004308:	2300      	movs	r3, #0
 800430a:	2200      	movs	r2, #0
 800430c:	2100      	movs	r1, #0
 800430e:	69b8      	ldr	r0, [r7, #24]
 8004310:	f000 faa4 	bl	800485c <xQueueGenericSend>
 8004314:	4603      	mov	r3, r0
 8004316:	2b01      	cmp	r3, #1
 8004318:	d004      	beq.n	8004324 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800431a:	f06f 0302 	mvn.w	r3, #2
 800431e:	61fb      	str	r3, [r7, #28]
 8004320:	e000      	b.n	8004324 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004322:	bf00      	nop
    }
  }

  return (stat);
 8004324:	69fb      	ldr	r3, [r7, #28]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3720      	adds	r7, #32
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	20000030 	.word	0x20000030
 8004334:	e000ed04 	.word	0xe000ed04

08004338 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4a07      	ldr	r2, [pc, #28]	; (8004364 <vApplicationGetIdleTaskMemory+0x2c>)
 8004348:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	4a06      	ldr	r2, [pc, #24]	; (8004368 <vApplicationGetIdleTaskMemory+0x30>)
 800434e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	601a      	str	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	20000034 	.word	0x20000034
 8004368:	20000094 	.word	0x20000094

0800436c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4a07      	ldr	r2, [pc, #28]	; (8004398 <vApplicationGetTimerTaskMemory+0x2c>)
 800437c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4a06      	ldr	r2, [pc, #24]	; (800439c <vApplicationGetTimerTaskMemory+0x30>)
 8004382:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800438a:	601a      	str	r2, [r3, #0]
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr
 8004398:	20000294 	.word	0x20000294
 800439c:	200002f4 	.word	0x200002f4

080043a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80043a0:	b480      	push	{r7}
 80043a2:	b083      	sub	sp, #12
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f103 0208 	add.w	r2, r3, #8
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f04f 32ff 	mov.w	r2, #4294967295
 80043b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f103 0208 	add.w	r2, r3, #8
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f103 0208 	add.w	r2, r3, #8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043ee:	bf00      	nop
 80043f0:	370c      	adds	r7, #12
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr

080043fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043fa:	b480      	push	{r7}
 80043fc:	b085      	sub	sp, #20
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
 8004402:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	683a      	ldr	r2, [r7, #0]
 800441e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	683a      	ldr	r2, [r7, #0]
 8004424:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	1c5a      	adds	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	601a      	str	r2, [r3, #0]
}
 8004436:	bf00      	nop
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d103      	bne.n	8004462 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	60fb      	str	r3, [r7, #12]
 8004460:	e00c      	b.n	800447c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	3308      	adds	r3, #8
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e002      	b.n	8004470 <vListInsert+0x2e>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	d2f6      	bcs.n	800446a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	601a      	str	r2, [r3, #0]
}
 80044a8:	bf00      	nop
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	6892      	ldr	r2, [r2, #8]
 80044ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6852      	ldr	r2, [r2, #4]
 80044d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d103      	bne.n	80044e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	1e5a      	subs	r2, r3, #1
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d109      	bne.n	8004530 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60bb      	str	r3, [r7, #8]
 800452e:	e7fe      	b.n	800452e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004530:	f002 fe14 	bl	800715c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	68f9      	ldr	r1, [r7, #12]
 800453e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004540:	fb01 f303 	mul.w	r3, r1, r3
 8004544:	441a      	add	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004560:	3b01      	subs	r3, #1
 8004562:	68f9      	ldr	r1, [r7, #12]
 8004564:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	441a      	add	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	22ff      	movs	r2, #255	; 0xff
 8004574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	22ff      	movs	r2, #255	; 0xff
 800457c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d114      	bne.n	80045b0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	691b      	ldr	r3, [r3, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d01a      	beq.n	80045c4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3310      	adds	r3, #16
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fd78 	bl	8006088 <xTaskRemoveFromEventList>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800459e:	4b0d      	ldr	r3, [pc, #52]	; (80045d4 <xQueueGenericReset+0xcc>)
 80045a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a4:	601a      	str	r2, [r3, #0]
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	e009      	b.n	80045c4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	3310      	adds	r3, #16
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff fef3 	bl	80043a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3324      	adds	r3, #36	; 0x24
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff feee 	bl	80043a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80045c4:	f002 fdf8 	bl	80071b8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80045c8:	2301      	movs	r3, #1
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	e000ed04 	.word	0xe000ed04

080045d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08e      	sub	sp, #56	; 0x38
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <xQueueGenericCreateStatic+0x28>
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045fe:	e7fe      	b.n	80045fe <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <xQueueGenericCreateStatic+0x42>
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	f383 8811 	msr	BASEPRI, r3
 800460e:	f3bf 8f6f 	isb	sy
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	627b      	str	r3, [r7, #36]	; 0x24
 8004618:	e7fe      	b.n	8004618 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <xQueueGenericCreateStatic+0x4e>
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <xQueueGenericCreateStatic+0x52>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueGenericCreateStatic+0x54>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d109      	bne.n	8004644 <xQueueGenericCreateStatic+0x6c>
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	623b      	str	r3, [r7, #32]
 8004642:	e7fe      	b.n	8004642 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d102      	bne.n	8004650 <xQueueGenericCreateStatic+0x78>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d101      	bne.n	8004654 <xQueueGenericCreateStatic+0x7c>
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <xQueueGenericCreateStatic+0x7e>
 8004654:	2300      	movs	r3, #0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d109      	bne.n	800466e <xQueueGenericCreateStatic+0x96>
 800465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	61fb      	str	r3, [r7, #28]
 800466c:	e7fe      	b.n	800466c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800466e:	2350      	movs	r3, #80	; 0x50
 8004670:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2b50      	cmp	r3, #80	; 0x50
 8004676:	d009      	beq.n	800468c <xQueueGenericCreateStatic+0xb4>
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	e7fe      	b.n	800468a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800468c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00d      	beq.n	80046b4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80046a0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f844 	bl	800473c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80046b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3730      	adds	r7, #48	; 0x30
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b08a      	sub	sp, #40	; 0x28
 80046c2:	af02      	add	r7, sp, #8
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d109      	bne.n	80046e6 <xQueueGenericCreate+0x28>
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	e7fe      	b.n	80046e4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d102      	bne.n	80046f2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80046ec:	2300      	movs	r3, #0
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	e004      	b.n	80046fc <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	3350      	adds	r3, #80	; 0x50
 8004700:	4618      	mov	r0, r3
 8004702:	f002 fe45 	bl	8007390 <pvPortMalloc>
 8004706:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d011      	beq.n	8004732 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	3350      	adds	r3, #80	; 0x50
 8004716:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004720:	79fa      	ldrb	r2, [r7, #7]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	9300      	str	r3, [sp, #0]
 8004726:	4613      	mov	r3, r2
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f805 	bl	800473c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004732:	69bb      	ldr	r3, [r7, #24]
	}
 8004734:	4618      	mov	r0, r3
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d103      	bne.n	8004758 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	e002      	b.n	800475e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800476a:	2101      	movs	r1, #1
 800476c:	69b8      	ldr	r0, [r7, #24]
 800476e:	f7ff fecb 	bl	8004508 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	68f9      	ldr	r1, [r7, #12]
 8004780:	2073      	movs	r0, #115	; 0x73
 8004782:	f003 fcd3 	bl	800812c <SEGGER_SYSVIEW_RecordU32x3>
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800478e:	b580      	push	{r7, lr}
 8004790:	b08a      	sub	sp, #40	; 0x28
 8004792:	af02      	add	r7, sp, #8
 8004794:	60f8      	str	r0, [r7, #12]
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d109      	bne.n	80047b4 <xQueueCreateCountingSemaphoreStatic+0x26>
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	61bb      	str	r3, [r7, #24]
 80047b2:	e7fe      	b.n	80047b2 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80047b4:	68ba      	ldr	r2, [r7, #8]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d909      	bls.n	80047d0 <xQueueCreateCountingSemaphoreStatic+0x42>
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	617b      	str	r3, [r7, #20]
 80047ce:	e7fe      	b.n	80047ce <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80047d0:	2302      	movs	r3, #2
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	2100      	movs	r1, #0
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f7ff fefc 	bl	80045d8 <xQueueGenericCreateStatic>
 80047e0:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80047ee:	69fb      	ldr	r3, [r7, #28]
	}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3720      	adds	r7, #32
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <xQueueCreateCountingSemaphore+0x24>
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	613b      	str	r3, [r7, #16]
 800481a:	e7fe      	b.n	800481a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	429a      	cmp	r2, r3
 8004822:	d909      	bls.n	8004838 <xQueueCreateCountingSemaphore+0x40>
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	e7fe      	b.n	8004836 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004838:	2202      	movs	r2, #2
 800483a:	2100      	movs	r1, #0
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f7ff ff3e 	bl	80046be <xQueueGenericCreate>
 8004842:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004844:	697b      	ldr	r3, [r7, #20]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	683a      	ldr	r2, [r7, #0]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004850:	697b      	ldr	r3, [r7, #20]
	}
 8004852:	4618      	mov	r0, r3
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b090      	sub	sp, #64	; 0x40
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	60b9      	str	r1, [r7, #8]
 8004866:	607a      	str	r2, [r7, #4]
 8004868:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800486a:	2300      	movs	r3, #0
 800486c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <xQueueGenericSend+0x30>
 8004878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	62bb      	str	r3, [r7, #40]	; 0x28
 800488a:	e7fe      	b.n	800488a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d103      	bne.n	800489a <xQueueGenericSend+0x3e>
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	2b00      	cmp	r3, #0
 8004898:	d101      	bne.n	800489e <xQueueGenericSend+0x42>
 800489a:	2301      	movs	r3, #1
 800489c:	e000      	b.n	80048a0 <xQueueGenericSend+0x44>
 800489e:	2300      	movs	r3, #0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <xQueueGenericSend+0x5c>
 80048a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
 80048b6:	e7fe      	b.n	80048b6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d103      	bne.n	80048c6 <xQueueGenericSend+0x6a>
 80048be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <xQueueGenericSend+0x6e>
 80048c6:	2301      	movs	r3, #1
 80048c8:	e000      	b.n	80048cc <xQueueGenericSend+0x70>
 80048ca:	2300      	movs	r3, #0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d109      	bne.n	80048e4 <xQueueGenericSend+0x88>
 80048d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d4:	f383 8811 	msr	BASEPRI, r3
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	623b      	str	r3, [r7, #32]
 80048e2:	e7fe      	b.n	80048e2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048e4:	f001 fdd2 	bl	800648c <xTaskGetSchedulerState>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d102      	bne.n	80048f4 <xQueueGenericSend+0x98>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <xQueueGenericSend+0x9c>
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <xQueueGenericSend+0x9e>
 80048f8:	2300      	movs	r3, #0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <xQueueGenericSend+0xb6>
 80048fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	61fb      	str	r3, [r7, #28]
 8004910:	e7fe      	b.n	8004910 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004912:	f002 fc23 	bl	800715c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800491e:	429a      	cmp	r2, r3
 8004920:	d302      	bcc.n	8004928 <xQueueGenericSend+0xcc>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b02      	cmp	r3, #2
 8004926:	d136      	bne.n	8004996 <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 8004928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492a:	4618      	mov	r0, r3
 800492c:	f004 f90c 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	9300      	str	r3, [sp, #0]
 8004938:	460b      	mov	r3, r1
 800493a:	4601      	mov	r1, r0
 800493c:	205a      	movs	r0, #90	; 0x5a
 800493e:	f003 fc6b 	bl	8008218 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004942:	683a      	ldr	r2, [r7, #0]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004948:	f000 fd20 	bl	800538c <prvCopyDataToQueue>
 800494c:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d010      	beq.n	8004978 <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004958:	3324      	adds	r3, #36	; 0x24
 800495a:	4618      	mov	r0, r3
 800495c:	f001 fb94 	bl	8006088 <xTaskRemoveFromEventList>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d013      	beq.n	800498e <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004966:	4b4d      	ldr	r3, [pc, #308]	; (8004a9c <xQueueGenericSend+0x240>)
 8004968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	e00a      	b.n	800498e <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800497e:	4b47      	ldr	r3, [pc, #284]	; (8004a9c <xQueueGenericSend+0x240>)
 8004980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004984:	601a      	str	r2, [r3, #0]
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800498e:	f002 fc13 	bl	80071b8 <vPortExitCritical>
				return pdPASS;
 8004992:	2301      	movs	r3, #1
 8004994:	e07d      	b.n	8004a92 <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d110      	bne.n	80049be <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800499c:	f002 fc0c 	bl	80071b8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	4618      	mov	r0, r3
 80049a4:	f004 f8d0 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 80049a8:	68ba      	ldr	r2, [r7, #8]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	460b      	mov	r3, r1
 80049b2:	4601      	mov	r1, r0
 80049b4:	205a      	movs	r0, #90	; 0x5a
 80049b6:	f003 fc2f 	bl	8008218 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	e069      	b.n	8004a92 <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d106      	bne.n	80049d2 <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049c4:	f107 0314 	add.w	r3, r7, #20
 80049c8:	4618      	mov	r0, r3
 80049ca:	f001 fbc3 	bl	8006154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049d2:	f002 fbf1 	bl	80071b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049d6:	f001 f8ed 	bl	8005bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049da:	f002 fbbf 	bl	800715c <vPortEnterCritical>
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049e4:	b25b      	sxtb	r3, r3
 80049e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ea:	d103      	bne.n	80049f4 <xQueueGenericSend+0x198>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049fa:	b25b      	sxtb	r3, r3
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d103      	bne.n	8004a0a <xQueueGenericSend+0x1ae>
 8004a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a0a:	f002 fbd5 	bl	80071b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a0e:	1d3a      	adds	r2, r7, #4
 8004a10:	f107 0314 	add.w	r3, r7, #20
 8004a14:	4611      	mov	r1, r2
 8004a16:	4618      	mov	r0, r3
 8004a18:	f001 fbb2 	bl	8006180 <xTaskCheckForTimeOut>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d124      	bne.n	8004a6c <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a24:	f000 fdaa 	bl	800557c <prvIsQueueFull>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d018      	beq.n	8004a60 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	3310      	adds	r3, #16
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4611      	mov	r1, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 fad4 	bl	8005fe4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a3e:	f000 fd35 	bl	80054ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a42:	f001 f8c5 	bl	8005bd0 <xTaskResumeAll>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f47f af62 	bne.w	8004912 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004a4e:	4b13      	ldr	r3, [pc, #76]	; (8004a9c <xQueueGenericSend+0x240>)
 8004a50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	e758      	b.n	8004912 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a62:	f000 fd23 	bl	80054ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a66:	f001 f8b3 	bl	8005bd0 <xTaskResumeAll>
 8004a6a:	e752      	b.n	8004912 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a6e:	f000 fd1d 	bl	80054ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a72:	f001 f8ad 	bl	8005bd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f004 f865 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004a7e:	68ba      	ldr	r2, [r7, #8]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	460b      	mov	r3, r1
 8004a88:	4601      	mov	r1, r0
 8004a8a:	205a      	movs	r0, #90	; 0x5a
 8004a8c:	f003 fbc4 	bl	8008218 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 8004a90:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3738      	adds	r7, #56	; 0x38
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	e000ed04 	.word	0xe000ed04

08004aa0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08e      	sub	sp, #56	; 0x38
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
 8004aac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <xQueueGenericSendFromISR+0x2c>
 8004ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abc:	f383 8811 	msr	BASEPRI, r3
 8004ac0:	f3bf 8f6f 	isb	sy
 8004ac4:	f3bf 8f4f 	dsb	sy
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aca:	e7fe      	b.n	8004aca <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <xQueueGenericSendFromISR+0x3a>
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <xQueueGenericSendFromISR+0x3e>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <xQueueGenericSendFromISR+0x40>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <xQueueGenericSendFromISR+0x58>
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	623b      	str	r3, [r7, #32]
 8004af6:	e7fe      	b.n	8004af6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d103      	bne.n	8004b06 <xQueueGenericSendFromISR+0x66>
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <xQueueGenericSendFromISR+0x6a>
 8004b06:	2301      	movs	r3, #1
 8004b08:	e000      	b.n	8004b0c <xQueueGenericSendFromISR+0x6c>
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d109      	bne.n	8004b24 <xQueueGenericSendFromISR+0x84>
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	61fb      	str	r3, [r7, #28]
 8004b22:	e7fe      	b.n	8004b22 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b24:	f002 fbf6 	bl	8007314 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004b28:	f3ef 8211 	mrs	r2, BASEPRI
 8004b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b30:	f383 8811 	msr	BASEPRI, r3
 8004b34:	f3bf 8f6f 	isb	sy
 8004b38:	f3bf 8f4f 	dsb	sy
 8004b3c:	61ba      	str	r2, [r7, #24]
 8004b3e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004b40:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b42:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d302      	bcc.n	8004b56 <xQueueGenericSendFromISR+0xb6>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d136      	bne.n	8004bc4 <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b62:	4618      	mov	r0, r3
 8004b64:	f003 fff0 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004b68:	4601      	mov	r1, r0
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	2060      	movs	r0, #96	; 0x60
 8004b70:	f003 fa82 	bl	8008078 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b7a:	f000 fc07 	bl	800538c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b7e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b86:	d112      	bne.n	8004bae <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d016      	beq.n	8004bbe <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	3324      	adds	r3, #36	; 0x24
 8004b94:	4618      	mov	r0, r3
 8004b96:	f001 fa77 	bl	8006088 <xTaskRemoveFromEventList>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00e      	beq.n	8004bbe <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e007      	b.n	8004bbe <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	b25a      	sxtb	r2, r3
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004bc2:	e00b      	b.n	8004bdc <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f003 ffbe 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004bcc:	4601      	mov	r1, r0
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	2060      	movs	r0, #96	; 0x60
 8004bd4:	f003 fa50 	bl	8008078 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	637b      	str	r3, [r7, #52]	; 0x34
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3738      	adds	r7, #56	; 0x38
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08e      	sub	sp, #56	; 0x38
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <xQueueGiveFromISR+0x28>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	623b      	str	r3, [r7, #32]
 8004c16:	e7fe      	b.n	8004c16 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <xQueueGiveFromISR+0x44>
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	61fb      	str	r3, [r7, #28]
 8004c32:	e7fe      	b.n	8004c32 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d103      	bne.n	8004c44 <xQueueGiveFromISR+0x54>
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <xQueueGiveFromISR+0x58>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <xQueueGiveFromISR+0x5a>
 8004c48:	2300      	movs	r3, #0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <xQueueGiveFromISR+0x72>
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	61bb      	str	r3, [r7, #24]
 8004c60:	e7fe      	b.n	8004c60 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c62:	f002 fb57 	bl	8007314 <vPortValidateInterruptPriority>
	__asm volatile
 8004c66:	f3ef 8211 	mrs	r2, BASEPRI
 8004c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	617a      	str	r2, [r7, #20]
 8004c7c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004c7e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d235      	bcs.n	8004cfe <xQueueGiveFromISR+0x10e>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f003 ff52 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004ca4:	4601      	mov	r1, r0
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2060      	movs	r0, #96	; 0x60
 8004cac:	f003 f9e4 	bl	8008078 <SEGGER_SYSVIEW_RecordU32x2>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb2:	1c5a      	adds	r2, r3, #1
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc0:	d112      	bne.n	8004ce8 <xQueueGiveFromISR+0xf8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d016      	beq.n	8004cf8 <xQueueGiveFromISR+0x108>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	3324      	adds	r3, #36	; 0x24
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f9da 	bl	8006088 <xTaskRemoveFromEventList>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00e      	beq.n	8004cf8 <xQueueGiveFromISR+0x108>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <xQueueGiveFromISR+0x108>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	e007      	b.n	8004cf8 <xQueueGiveFromISR+0x108>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cec:	3301      	adds	r3, #1
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	b25a      	sxtb	r2, r3
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	637b      	str	r3, [r7, #52]	; 0x34
 8004cfc:	e00b      	b.n	8004d16 <xQueueGiveFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	4618      	mov	r0, r3
 8004d02:	f003 ff21 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004d06:	4601      	mov	r1, r0
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	2060      	movs	r0, #96	; 0x60
 8004d0e:	f003 f9b3 	bl	8008078 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	637b      	str	r3, [r7, #52]	; 0x34
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3738      	adds	r7, #56	; 0x38
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
	...

08004d2c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d2c:	b590      	push	{r4, r7, lr}
 8004d2e:	b08f      	sub	sp, #60	; 0x3c
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <xQueueReceive+0x2e>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	623b      	str	r3, [r7, #32]
 8004d58:	e7fe      	b.n	8004d58 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d103      	bne.n	8004d68 <xQueueReceive+0x3c>
 8004d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <xQueueReceive+0x40>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <xQueueReceive+0x42>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <xQueueReceive+0x5a>
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	61fb      	str	r3, [r7, #28]
 8004d84:	e7fe      	b.n	8004d84 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d86:	f001 fb81 	bl	800648c <xTaskGetSchedulerState>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <xQueueReceive+0x6a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <xQueueReceive+0x6e>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <xQueueReceive+0x70>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d109      	bne.n	8004db4 <xQueueReceive+0x88>
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	e7fe      	b.n	8004db2 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004db4:	f002 f9d2 	bl	800715c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d031      	beq.n	8004e28 <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004dc8:	f000 fb4a 	bl	8005460 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 8004dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f003 feba 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	f003 feb6 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004ddc:	4601      	mov	r1, r0
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	2301      	movs	r3, #1
 8004de2:	9300      	str	r3, [sp, #0]
 8004de4:	4613      	mov	r3, r2
 8004de6:	460a      	mov	r2, r1
 8004de8:	4621      	mov	r1, r4
 8004dea:	205c      	movs	r0, #92	; 0x5c
 8004dec:	f003 fa14 	bl	8008218 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df2:	1e5a      	subs	r2, r3, #1
 8004df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df6:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00f      	beq.n	8004e20 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	3310      	adds	r3, #16
 8004e04:	4618      	mov	r0, r3
 8004e06:	f001 f93f 	bl	8006088 <xTaskRemoveFromEventList>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d007      	beq.n	8004e20 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e10:	4b4f      	ldr	r3, [pc, #316]	; (8004f50 <xQueueReceive+0x224>)
 8004e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e20:	f002 f9ca 	bl	80071b8 <vPortExitCritical>
				return pdPASS;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e08e      	b.n	8004f46 <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d115      	bne.n	8004e5a <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e2e:	f002 f9c3 	bl	80071b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e34:	4618      	mov	r0, r3
 8004e36:	f003 fe87 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	2000      	movs	r0, #0
 8004e3e:	f003 fe83 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004e42:	4601      	mov	r1, r0
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	2301      	movs	r3, #1
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	460a      	mov	r2, r1
 8004e4e:	4621      	mov	r1, r4
 8004e50:	205c      	movs	r0, #92	; 0x5c
 8004e52:	f003 f9e1 	bl	8008218 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8004e56:	2300      	movs	r3, #0
 8004e58:	e075      	b.n	8004f46 <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e60:	f107 0310 	add.w	r3, r7, #16
 8004e64:	4618      	mov	r0, r3
 8004e66:	f001 f975 	bl	8006154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e6e:	f002 f9a3 	bl	80071b8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e72:	f000 fe9f 	bl	8005bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e76:	f002 f971 	bl	800715c <vPortEnterCritical>
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e80:	b25b      	sxtb	r3, r3
 8004e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e86:	d103      	bne.n	8004e90 <xQueueReceive+0x164>
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e96:	b25b      	sxtb	r3, r3
 8004e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9c:	d103      	bne.n	8004ea6 <xQueueReceive+0x17a>
 8004e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea6:	f002 f987 	bl	80071b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eaa:	1d3a      	adds	r2, r7, #4
 8004eac:	f107 0310 	add.w	r3, r7, #16
 8004eb0:	4611      	mov	r1, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f001 f964 	bl	8006180 <xTaskCheckForTimeOut>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d124      	bne.n	8004f08 <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec0:	f000 fb46 	bl	8005550 <prvIsQueueEmpty>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	3324      	adds	r3, #36	; 0x24
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f001 f886 	bl	8005fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eda:	f000 fae7 	bl	80054ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ede:	f000 fe77 	bl	8005bd0 <xTaskResumeAll>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f47f af65 	bne.w	8004db4 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004eea:	4b19      	ldr	r3, [pc, #100]	; (8004f50 <xQueueReceive+0x224>)
 8004eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	e75b      	b.n	8004db4 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efe:	f000 fad5 	bl	80054ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f02:	f000 fe65 	bl	8005bd0 <xTaskResumeAll>
 8004f06:	e755      	b.n	8004db4 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0a:	f000 facf 	bl	80054ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f0e:	f000 fe5f 	bl	8005bd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f14:	f000 fb1c 	bl	8005550 <prvIsQueueEmpty>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f43f af4a 	beq.w	8004db4 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	4618      	mov	r0, r3
 8004f24:	f003 fe10 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004f28:	4604      	mov	r4, r0
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	f003 fe0c 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004f30:	4601      	mov	r1, r0
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	2301      	movs	r3, #1
 8004f36:	9300      	str	r3, [sp, #0]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	460a      	mov	r2, r1
 8004f3c:	4621      	mov	r1, r4
 8004f3e:	205c      	movs	r0, #92	; 0x5c
 8004f40:	f003 f96a 	bl	8008218 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 8004f44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3734      	adds	r7, #52	; 0x34
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd90      	pop	{r4, r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	e000ed04 	.word	0xe000ed04

08004f54 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004f54:	b590      	push	{r4, r7, lr}
 8004f56:	b091      	sub	sp, #68	; 0x44
 8004f58:	af02      	add	r7, sp, #8
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004f66:	2300      	movs	r3, #0
 8004f68:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <xQueueSemaphoreTake+0x30>
 8004f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	623b      	str	r3, [r7, #32]
 8004f82:	e7fe      	b.n	8004f82 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d009      	beq.n	8004fa0 <xQueueSemaphoreTake+0x4c>
 8004f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	e7fe      	b.n	8004f9e <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fa0:	f001 fa74 	bl	800648c <xTaskGetSchedulerState>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <xQueueSemaphoreTake+0x5c>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <xQueueSemaphoreTake+0x60>
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e000      	b.n	8004fb6 <xQueueSemaphoreTake+0x62>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <xQueueSemaphoreTake+0x7a>
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	f383 8811 	msr	BASEPRI, r3
 8004fc2:	f3bf 8f6f 	isb	sy
 8004fc6:	f3bf 8f4f 	dsb	sy
 8004fca:	61bb      	str	r3, [r7, #24]
 8004fcc:	e7fe      	b.n	8004fcc <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fce:	f002 f8c5 	bl	800715c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d036      	beq.n	800504c <xQueueSemaphoreTake+0xf8>
			{
				traceQUEUE_RECEIVE( pxQueue );
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f003 fdb1 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f003 fdad 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8004fee:	4601      	mov	r1, r0
 8004ff0:	683a      	ldr	r2, [r7, #0]
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	460a      	mov	r2, r1
 8004ffa:	4621      	mov	r1, r4
 8004ffc:	205c      	movs	r0, #92	; 0x5c
 8004ffe:	f003 f90b 	bl	8008218 <SEGGER_SYSVIEW_RecordU32x4>

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005004:	1e5a      	subs	r2, r3, #1
 8005006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005008:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800500a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d104      	bne.n	800501c <xQueueSemaphoreTake+0xc8>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005012:	f001 fbc7 	bl	80067a4 <pvTaskIncrementMutexHeldCount>
 8005016:	4602      	mov	r2, r0
 8005018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800501c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00f      	beq.n	8005044 <xQueueSemaphoreTake+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	3310      	adds	r3, #16
 8005028:	4618      	mov	r0, r3
 800502a:	f001 f82d 	bl	8006088 <xTaskRemoveFromEventList>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d007      	beq.n	8005044 <xQueueSemaphoreTake+0xf0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005034:	4b65      	ldr	r3, [pc, #404]	; (80051cc <xQueueSemaphoreTake+0x278>)
 8005036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	f3bf 8f4f 	dsb	sy
 8005040:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005044:	f002 f8b8 	bl	80071b8 <vPortExitCritical>
				return pdPASS;
 8005048:	2301      	movs	r3, #1
 800504a:	e0ba      	b.n	80051c2 <xQueueSemaphoreTake+0x26e>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d122      	bne.n	8005098 <xQueueSemaphoreTake+0x144>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005054:	2b00      	cmp	r3, #0
 8005056:	d009      	beq.n	800506c <xQueueSemaphoreTake+0x118>
 8005058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505c:	f383 8811 	msr	BASEPRI, r3
 8005060:	f3bf 8f6f 	isb	sy
 8005064:	f3bf 8f4f 	dsb	sy
 8005068:	617b      	str	r3, [r7, #20]
 800506a:	e7fe      	b.n	800506a <xQueueSemaphoreTake+0x116>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800506c:	f002 f8a4 	bl	80071b8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	4618      	mov	r0, r3
 8005074:	f003 fd68 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8005078:	4604      	mov	r4, r0
 800507a:	2000      	movs	r0, #0
 800507c:	f003 fd64 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8005080:	4601      	mov	r1, r0
 8005082:	683a      	ldr	r2, [r7, #0]
 8005084:	2301      	movs	r3, #1
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	460a      	mov	r2, r1
 800508c:	4621      	mov	r1, r4
 800508e:	205c      	movs	r0, #92	; 0x5c
 8005090:	f003 f8c2 	bl	8008218 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 8005094:	2300      	movs	r3, #0
 8005096:	e094      	b.n	80051c2 <xQueueSemaphoreTake+0x26e>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	2b00      	cmp	r3, #0
 800509c:	d106      	bne.n	80050ac <xQueueSemaphoreTake+0x158>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800509e:	f107 030c 	add.w	r3, r7, #12
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 f856 	bl	8006154 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050ac:	f002 f884 	bl	80071b8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050b0:	f000 fd80 	bl	8005bb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050b4:	f002 f852 	bl	800715c <vPortEnterCritical>
 80050b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050be:	b25b      	sxtb	r3, r3
 80050c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c4:	d103      	bne.n	80050ce <xQueueSemaphoreTake+0x17a>
 80050c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050d4:	b25b      	sxtb	r3, r3
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d103      	bne.n	80050e4 <xQueueSemaphoreTake+0x190>
 80050dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050e4:	f002 f868 	bl	80071b8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80050e8:	463a      	mov	r2, r7
 80050ea:	f107 030c 	add.w	r3, r7, #12
 80050ee:	4611      	mov	r1, r2
 80050f0:	4618      	mov	r0, r3
 80050f2:	f001 f845 	bl	8006180 <xTaskCheckForTimeOut>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d132      	bne.n	8005162 <xQueueSemaphoreTake+0x20e>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050fe:	f000 fa27 	bl	8005550 <prvIsQueueEmpty>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d026      	beq.n	8005156 <xQueueSemaphoreTake+0x202>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <xQueueSemaphoreTake+0x1d0>
					{
						taskENTER_CRITICAL();
 8005110:	f002 f824 	bl	800715c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	4618      	mov	r0, r3
 800511a:	f001 f9d5 	bl	80064c8 <xTaskPriorityInherit>
 800511e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005120:	f002 f84a 	bl	80071b8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005126:	3324      	adds	r3, #36	; 0x24
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	4611      	mov	r1, r2
 800512c:	4618      	mov	r0, r3
 800512e:	f000 ff59 	bl	8005fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005132:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005134:	f000 f9ba 	bl	80054ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005138:	f000 fd4a 	bl	8005bd0 <xTaskResumeAll>
 800513c:	4603      	mov	r3, r0
 800513e:	2b00      	cmp	r3, #0
 8005140:	f47f af45 	bne.w	8004fce <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <xQueueSemaphoreTake+0x278>)
 8005146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	f3bf 8f6f 	isb	sy
 8005154:	e73b      	b.n	8004fce <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005156:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005158:	f000 f9a8 	bl	80054ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800515c:	f000 fd38 	bl	8005bd0 <xTaskResumeAll>
 8005160:	e735      	b.n	8004fce <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005164:	f000 f9a2 	bl	80054ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005168:	f000 fd32 	bl	8005bd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800516c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800516e:	f000 f9ef 	bl	8005550 <prvIsQueueEmpty>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	f43f af2a 	beq.w	8004fce <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00d      	beq.n	800519c <xQueueSemaphoreTake+0x248>
					{
						taskENTER_CRITICAL();
 8005180:	f001 ffec 	bl	800715c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005186:	f000 f8e9 	bl	800535c <prvGetDisinheritPriorityAfterTimeout>
 800518a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800518c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005192:	4618      	mov	r0, r3
 8005194:	f001 fa7e 	bl	8006694 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005198:	f002 f80e 	bl	80071b8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800519c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800519e:	4618      	mov	r0, r3
 80051a0:	f003 fcd2 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 80051a4:	4604      	mov	r4, r0
 80051a6:	2000      	movs	r0, #0
 80051a8:	f003 fcce 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 80051ac:	4601      	mov	r1, r0
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	2301      	movs	r3, #1
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	4613      	mov	r3, r2
 80051b6:	460a      	mov	r2, r1
 80051b8:	4621      	mov	r1, r4
 80051ba:	205c      	movs	r0, #92	; 0x5c
 80051bc:	f003 f82c 	bl	8008218 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 80051c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	373c      	adds	r7, #60	; 0x3c
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd90      	pop	{r4, r7, pc}
 80051ca:	bf00      	nop
 80051cc:	e000ed04 	.word	0xe000ed04

080051d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051d0:	b590      	push	{r4, r7, lr}
 80051d2:	b08f      	sub	sp, #60	; 0x3c
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d109      	bne.n	80051fa <xQueueReceiveFromISR+0x2a>
 80051e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	623b      	str	r3, [r7, #32]
 80051f8:	e7fe      	b.n	80051f8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d103      	bne.n	8005208 <xQueueReceiveFromISR+0x38>
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <xQueueReceiveFromISR+0x3c>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <xQueueReceiveFromISR+0x3e>
 800520c:	2300      	movs	r3, #0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d109      	bne.n	8005226 <xQueueReceiveFromISR+0x56>
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	e7fe      	b.n	8005224 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005226:	f002 f875 	bl	8007314 <vPortValidateInterruptPriority>
	__asm volatile
 800522a:	f3ef 8211 	mrs	r2, BASEPRI
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	61ba      	str	r2, [r7, #24]
 8005240:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005242:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005244:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800524c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d03e      	beq.n	80052d0 <xQueueReceiveFromISR+0x100>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005254:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800525c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525e:	4618      	mov	r0, r3
 8005260:	f003 fc72 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8005264:	4604      	mov	r4, r0
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	4618      	mov	r0, r3
 800526a:	f003 fc6d 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 800526e:	4602      	mov	r2, r0
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4621      	mov	r1, r4
 8005274:	2062      	movs	r0, #98	; 0x62
 8005276:	f002 ff59 	bl	800812c <SEGGER_SYSVIEW_RecordU32x3>

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800527a:	68b9      	ldr	r1, [r7, #8]
 800527c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800527e:	f000 f8ef 	bl	8005460 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	1e5a      	subs	r2, r3, #1
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800528a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800528e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005292:	d112      	bne.n	80052ba <xQueueReceiveFromISR+0xea>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d016      	beq.n	80052ca <xQueueReceiveFromISR+0xfa>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	3310      	adds	r3, #16
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 fef1 	bl	8006088 <xTaskRemoveFromEventList>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00e      	beq.n	80052ca <xQueueReceiveFromISR+0xfa>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d00b      	beq.n	80052ca <xQueueReceiveFromISR+0xfa>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	e007      	b.n	80052ca <xQueueReceiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80052ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052be:	3301      	adds	r3, #1
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	b25a      	sxtb	r2, r3
 80052c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80052ca:	2301      	movs	r3, #1
 80052cc:	637b      	str	r3, [r7, #52]	; 0x34
 80052ce:	e010      	b.n	80052f2 <xQueueReceiveFromISR+0x122>
		}
		else
		{
			xReturn = pdFAIL;
 80052d0:	2300      	movs	r3, #0
 80052d2:	637b      	str	r3, [r7, #52]	; 0x34
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	4618      	mov	r0, r3
 80052d8:	f003 fc36 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 80052dc:	4604      	mov	r4, r0
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	4618      	mov	r0, r3
 80052e2:	f003 fc31 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 80052e6:	4602      	mov	r2, r0
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4621      	mov	r1, r4
 80052ec:	2062      	movs	r0, #98	; 0x62
 80052ee:	f002 ff1d 	bl	800812c <SEGGER_SYSVIEW_RecordU32x3>
 80052f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052fe:	4618      	mov	r0, r3
 8005300:	373c      	adds	r7, #60	; 0x3c
 8005302:	46bd      	mov	sp, r7
 8005304:	bd90      	pop	{r4, r7, pc}

08005306 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005306:	b580      	push	{r7, lr}
 8005308:	b084      	sub	sp, #16
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <vQueueDelete+0x26>
	__asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	e7fe      	b.n	800532a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4618      	mov	r0, r3
 8005330:	f003 fc0a 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 8005334:	4603      	mov	r3, r0
 8005336:	4619      	mov	r1, r3
 8005338:	205f      	movs	r0, #95	; 0x5f
 800533a:	f002 fe61 	bl	8008000 <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 f964 	bl	800560c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800534a:	2b00      	cmp	r3, #0
 800534c:	d102      	bne.n	8005354 <vQueueDelete+0x4e>
		{
			vPortFree( pxQueue );
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f002 f8e0 	bl	8007514 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005354:	bf00      	nop
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b00      	cmp	r3, #0
 800536a:	d006      	beq.n	800537a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e001      	b.n	800537e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800537a:	2300      	movs	r3, #0
 800537c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800537e:	68fb      	ldr	r3, [r7, #12]
	}
 8005380:	4618      	mov	r0, r3
 8005382:	3714      	adds	r7, #20
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	60b9      	str	r1, [r7, #8]
 8005396:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d14d      	bne.n	800544e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	4618      	mov	r0, r3
 80053b8:	f001 f8f8 	bl	80065ac <xTaskPriorityDisinherit>
 80053bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	e043      	b.n	800544e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d119      	bne.n	8005400 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6858      	ldr	r0, [r3, #4]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	461a      	mov	r2, r3
 80053d6:	68b9      	ldr	r1, [r7, #8]
 80053d8:	f003 fed3 	bl	8009182 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	441a      	add	r2, r3
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d32b      	bcc.n	800544e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	605a      	str	r2, [r3, #4]
 80053fe:	e026      	b.n	800544e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	68d8      	ldr	r0, [r3, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005408:	461a      	mov	r2, r3
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	f003 feb9 	bl	8009182 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	68da      	ldr	r2, [r3, #12]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	425b      	negs	r3, r3
 800541a:	441a      	add	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	68da      	ldr	r2, [r3, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d207      	bcs.n	800543c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	425b      	negs	r3, r3
 8005436:	441a      	add	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b02      	cmp	r3, #2
 8005440:	d105      	bne.n	800544e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	3b01      	subs	r3, #1
 800544c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005456:	697b      	ldr	r3, [r7, #20]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3718      	adds	r7, #24
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d018      	beq.n	80054a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	441a      	add	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68da      	ldr	r2, [r3, #12]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	d303      	bcc.n	8005494 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68d9      	ldr	r1, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	461a      	mov	r2, r3
 800549e:	6838      	ldr	r0, [r7, #0]
 80054a0:	f003 fe6f 	bl	8009182 <memcpy>
	}
}
 80054a4:	bf00      	nop
 80054a6:	3708      	adds	r7, #8
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}

080054ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b084      	sub	sp, #16
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054b4:	f001 fe52 	bl	800715c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054c0:	e011      	b.n	80054e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d012      	beq.n	80054f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3324      	adds	r3, #36	; 0x24
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 fdda 	bl	8006088 <xTaskRemoveFromEventList>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d001      	beq.n	80054de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80054da:	f000 fec1 	bl	8006260 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	3b01      	subs	r3, #1
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	dce9      	bgt.n	80054c2 <prvUnlockQueue+0x16>
 80054ee:	e000      	b.n	80054f2 <prvUnlockQueue+0x46>
					break;
 80054f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	22ff      	movs	r2, #255	; 0xff
 80054f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80054fa:	f001 fe5d 	bl	80071b8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80054fe:	f001 fe2d 	bl	800715c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005508:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800550a:	e011      	b.n	8005530 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d012      	beq.n	800553a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3310      	adds	r3, #16
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fdb5 	bl	8006088 <xTaskRemoveFromEventList>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005524:	f000 fe9c 	bl	8006260 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005528:	7bbb      	ldrb	r3, [r7, #14]
 800552a:	3b01      	subs	r3, #1
 800552c:	b2db      	uxtb	r3, r3
 800552e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005530:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005534:	2b00      	cmp	r3, #0
 8005536:	dce9      	bgt.n	800550c <prvUnlockQueue+0x60>
 8005538:	e000      	b.n	800553c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800553a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	22ff      	movs	r2, #255	; 0xff
 8005540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005544:	f001 fe38 	bl	80071b8 <vPortExitCritical>
}
 8005548:	bf00      	nop
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005558:	f001 fe00 	bl	800715c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	2b00      	cmp	r3, #0
 8005562:	d102      	bne.n	800556a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005564:	2301      	movs	r3, #1
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e001      	b.n	800556e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800556e:	f001 fe23 	bl	80071b8 <vPortExitCritical>

	return xReturn;
 8005572:	68fb      	ldr	r3, [r7, #12]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005584:	f001 fdea 	bl	800715c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005590:	429a      	cmp	r2, r3
 8005592:	d102      	bne.n	800559a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005594:	2301      	movs	r3, #1
 8005596:	60fb      	str	r3, [r7, #12]
 8005598:	e001      	b.n	800559e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800559a:	2300      	movs	r3, #0
 800559c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800559e:	f001 fe0b 	bl	80071b8 <vPortExitCritical>

	return xReturn;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3710      	adds	r7, #16
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055b6:	2300      	movs	r3, #0
 80055b8:	60fb      	str	r3, [r7, #12]
 80055ba:	e01e      	b.n	80055fa <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055bc:	4a12      	ldr	r2, [pc, #72]	; (8005608 <vQueueAddToRegistry+0x5c>)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d115      	bne.n	80055f4 <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80055c8:	490f      	ldr	r1, [pc, #60]	; (8005608 <vQueueAddToRegistry+0x5c>)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80055d2:	4a0d      	ldr	r2, [pc, #52]	; (8005608 <vQueueAddToRegistry+0x5c>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	00db      	lsls	r3, r3, #3
 80055d8:	4413      	add	r3, r2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f003 fab1 	bl	8008b48 <SEGGER_SYSVIEW_ShrinkId>
 80055e6:	4601      	mov	r1, r0
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	461a      	mov	r2, r3
 80055ec:	2071      	movs	r0, #113	; 0x71
 80055ee:	f002 fd43 	bl	8008078 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 80055f2:	e005      	b.n	8005600 <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	3301      	adds	r3, #1
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2b07      	cmp	r3, #7
 80055fe:	d9dd      	bls.n	80055bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005600:	bf00      	nop
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	200054f0 	.word	0x200054f0

0800560c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005614:	2300      	movs	r3, #0
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e016      	b.n	8005648 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800561a:	4a10      	ldr	r2, [pc, #64]	; (800565c <vQueueUnregisterQueue+0x50>)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	4413      	add	r3, r2
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	429a      	cmp	r2, r3
 8005628:	d10b      	bne.n	8005642 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800562a:	4a0c      	ldr	r2, [pc, #48]	; (800565c <vQueueUnregisterQueue+0x50>)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2100      	movs	r1, #0
 8005630:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005634:	4a09      	ldr	r2, [pc, #36]	; (800565c <vQueueUnregisterQueue+0x50>)
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	2200      	movs	r2, #0
 800563e:	605a      	str	r2, [r3, #4]
				break;
 8005640:	e005      	b.n	800564e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	3301      	adds	r3, #1
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	2b07      	cmp	r3, #7
 800564c:	d9e5      	bls.n	800561a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800564e:	bf00      	nop
 8005650:	3714      	adds	r7, #20
 8005652:	46bd      	mov	sp, r7
 8005654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005658:	4770      	bx	lr
 800565a:	bf00      	nop
 800565c:	200054f0 	.word	0x200054f0

08005660 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005670:	f001 fd74 	bl	800715c <vPortEnterCritical>
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800567a:	b25b      	sxtb	r3, r3
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d103      	bne.n	800568a <vQueueWaitForMessageRestricted+0x2a>
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005690:	b25b      	sxtb	r3, r3
 8005692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005696:	d103      	bne.n	80056a0 <vQueueWaitForMessageRestricted+0x40>
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056a0:	f001 fd8a 	bl	80071b8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d106      	bne.n	80056ba <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	3324      	adds	r3, #36	; 0x24
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fcb9 	bl	800602c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056ba:	6978      	ldr	r0, [r7, #20]
 80056bc:	f7ff fef6 	bl	80054ac <prvUnlockQueue>
	}
 80056c0:	bf00      	nop
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b08e      	sub	sp, #56	; 0x38
 80056cc:	af04      	add	r7, sp, #16
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80056d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d109      	bne.n	80056f0 <xTaskCreateStatic+0x28>
 80056dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e0:	f383 8811 	msr	BASEPRI, r3
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	f3bf 8f4f 	dsb	sy
 80056ec:	623b      	str	r3, [r7, #32]
 80056ee:	e7fe      	b.n	80056ee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <xTaskCreateStatic+0x42>
 80056f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056fa:	f383 8811 	msr	BASEPRI, r3
 80056fe:	f3bf 8f6f 	isb	sy
 8005702:	f3bf 8f4f 	dsb	sy
 8005706:	61fb      	str	r3, [r7, #28]
 8005708:	e7fe      	b.n	8005708 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800570a:	2360      	movs	r3, #96	; 0x60
 800570c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b60      	cmp	r3, #96	; 0x60
 8005712:	d009      	beq.n	8005728 <xTaskCreateStatic+0x60>
 8005714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	e7fe      	b.n	8005726 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005728:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800572a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572c:	2b00      	cmp	r3, #0
 800572e:	d01e      	beq.n	800576e <xTaskCreateStatic+0xa6>
 8005730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01b      	beq.n	800576e <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800573e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	2202      	movs	r2, #2
 8005744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005748:	2300      	movs	r3, #0
 800574a:	9303      	str	r3, [sp, #12]
 800574c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800574e:	9302      	str	r3, [sp, #8]
 8005750:	f107 0314 	add.w	r3, r7, #20
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f000 f850 	bl	8005806 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005766:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005768:	f000 f8e2 	bl	8005930 <prvAddNewTaskToReadyList>
 800576c:	e001      	b.n	8005772 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005772:	697b      	ldr	r3, [r7, #20]
	}
 8005774:	4618      	mov	r0, r3
 8005776:	3728      	adds	r7, #40	; 0x28
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800577c:	b580      	push	{r7, lr}
 800577e:	b08c      	sub	sp, #48	; 0x30
 8005780:	af04      	add	r7, sp, #16
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	603b      	str	r3, [r7, #0]
 8005788:	4613      	mov	r3, r2
 800578a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800578c:	88fb      	ldrh	r3, [r7, #6]
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4618      	mov	r0, r3
 8005792:	f001 fdfd 	bl	8007390 <pvPortMalloc>
 8005796:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00e      	beq.n	80057bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800579e:	2060      	movs	r0, #96	; 0x60
 80057a0:	f001 fdf6 	bl	8007390 <pvPortMalloc>
 80057a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
 80057b2:	e005      	b.n	80057c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057b4:	6978      	ldr	r0, [r7, #20]
 80057b6:	f001 fead 	bl	8007514 <vPortFree>
 80057ba:	e001      	b.n	80057c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057bc:	2300      	movs	r3, #0
 80057be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d017      	beq.n	80057f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80057ce:	88fa      	ldrh	r2, [r7, #6]
 80057d0:	2300      	movs	r3, #0
 80057d2:	9303      	str	r3, [sp, #12]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	9302      	str	r3, [sp, #8]
 80057d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f80e 	bl	8005806 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80057ea:	69f8      	ldr	r0, [r7, #28]
 80057ec:	f000 f8a0 	bl	8005930 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80057f0:	2301      	movs	r3, #1
 80057f2:	61bb      	str	r3, [r7, #24]
 80057f4:	e002      	b.n	80057fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80057f6:	f04f 33ff 	mov.w	r3, #4294967295
 80057fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80057fc:	69bb      	ldr	r3, [r7, #24]
	}
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b088      	sub	sp, #32
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005816:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	461a      	mov	r2, r3
 800581e:	21a5      	movs	r1, #165	; 0xa5
 8005820:	f003 fcba 	bl	8009198 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800582e:	3b01      	subs	r3, #1
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	4413      	add	r3, r2
 8005834:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	f023 0307 	bic.w	r3, r3, #7
 800583c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	2b00      	cmp	r3, #0
 8005846:	d009      	beq.n	800585c <prvInitialiseNewTask+0x56>
 8005848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	e7fe      	b.n	800585a <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d01f      	beq.n	80058a2 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005862:	2300      	movs	r3, #0
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e012      	b.n	800588e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	7819      	ldrb	r1, [r3, #0]
 8005870:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	3334      	adds	r3, #52	; 0x34
 8005878:	460a      	mov	r2, r1
 800587a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d006      	beq.n	8005896 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	3301      	adds	r3, #1
 800588c:	61fb      	str	r3, [r7, #28]
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	2b0f      	cmp	r3, #15
 8005892:	d9e9      	bls.n	8005868 <prvInitialiseNewTask+0x62>
 8005894:	e000      	b.n	8005898 <prvInitialiseNewTask+0x92>
			{
				break;
 8005896:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058a0:	e003      	b.n	80058aa <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	2b37      	cmp	r3, #55	; 0x37
 80058ae:	d901      	bls.n	80058b4 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058b0:	2337      	movs	r3, #55	; 0x37
 80058b2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058be:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c2:	2200      	movs	r2, #0
 80058c4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	3304      	adds	r3, #4
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fd88 	bl	80043e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	3318      	adds	r3, #24
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7fe fd83 	bl	80043e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058de:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058ee:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	2200      	movs	r2, #0
 80058f4:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80058f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f8:	2200      	movs	r2, #0
 80058fa:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80058fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8005904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005906:	2200      	movs	r2, #0
 8005908:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	68f9      	ldr	r1, [r7, #12]
 8005910:	69b8      	ldr	r0, [r7, #24]
 8005912:	f001 fafb 	bl	8006f0c <pxPortInitialiseStack>
 8005916:	4602      	mov	r2, r0
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800591c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <prvInitialiseNewTask+0x122>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005926:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005928:	bf00      	nop
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005930:	b5b0      	push	{r4, r5, r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af02      	add	r7, sp, #8
 8005936:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005938:	f001 fc10 	bl	800715c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800593c:	4b3c      	ldr	r3, [pc, #240]	; (8005a30 <prvAddNewTaskToReadyList+0x100>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3301      	adds	r3, #1
 8005942:	4a3b      	ldr	r2, [pc, #236]	; (8005a30 <prvAddNewTaskToReadyList+0x100>)
 8005944:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005946:	4b3b      	ldr	r3, [pc, #236]	; (8005a34 <prvAddNewTaskToReadyList+0x104>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800594e:	4a39      	ldr	r2, [pc, #228]	; (8005a34 <prvAddNewTaskToReadyList+0x104>)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005954:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <prvAddNewTaskToReadyList+0x100>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2b01      	cmp	r3, #1
 800595a:	d110      	bne.n	800597e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800595c:	f000 fca4 	bl	80062a8 <prvInitialiseTaskLists>
 8005960:	e00d      	b.n	800597e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005962:	4b35      	ldr	r3, [pc, #212]	; (8005a38 <prvAddNewTaskToReadyList+0x108>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d109      	bne.n	800597e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800596a:	4b32      	ldr	r3, [pc, #200]	; (8005a34 <prvAddNewTaskToReadyList+0x104>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005974:	429a      	cmp	r2, r3
 8005976:	d802      	bhi.n	800597e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005978:	4a2e      	ldr	r2, [pc, #184]	; (8005a34 <prvAddNewTaskToReadyList+0x104>)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800597e:	4b2f      	ldr	r3, [pc, #188]	; (8005a3c <prvAddNewTaskToReadyList+0x10c>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a2d      	ldr	r2, [pc, #180]	; (8005a3c <prvAddNewTaskToReadyList+0x10c>)
 8005986:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005988:	4b2c      	ldr	r3, [pc, #176]	; (8005a3c <prvAddNewTaskToReadyList+0x10c>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <prvAddNewTaskToReadyList+0x94>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4618      	mov	r0, r3
 800599a:	f003 f80f 	bl	80089bc <SEGGER_SYSVIEW_OnTaskCreate>
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	461d      	mov	r5, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461c      	mov	r4, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ba:	1ae3      	subs	r3, r4, r3
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	462b      	mov	r3, r5
 80059c0:	f003 fb22 	bl	8009008 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f003 f87c 	bl	8008ac4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d0:	4b1b      	ldr	r3, [pc, #108]	; (8005a40 <prvAddNewTaskToReadyList+0x110>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d903      	bls.n	80059e0 <prvAddNewTaskToReadyList+0xb0>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059dc:	4a18      	ldr	r2, [pc, #96]	; (8005a40 <prvAddNewTaskToReadyList+0x110>)
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4a15      	ldr	r2, [pc, #84]	; (8005a44 <prvAddNewTaskToReadyList+0x114>)
 80059ee:	441a      	add	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	4619      	mov	r1, r3
 80059f6:	4610      	mov	r0, r2
 80059f8:	f7fe fcff 	bl	80043fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80059fc:	f001 fbdc 	bl	80071b8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a00:	4b0d      	ldr	r3, [pc, #52]	; (8005a38 <prvAddNewTaskToReadyList+0x108>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00e      	beq.n	8005a26 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <prvAddNewTaskToReadyList+0x104>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d207      	bcs.n	8005a26 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a16:	4b0c      	ldr	r3, [pc, #48]	; (8005a48 <prvAddNewTaskToReadyList+0x118>)
 8005a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	f3bf 8f4f 	dsb	sy
 8005a22:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	20000bc8 	.word	0x20000bc8
 8005a34:	200006f4 	.word	0x200006f4
 8005a38:	20000bd4 	.word	0x20000bd4
 8005a3c:	20000be4 	.word	0x20000be4
 8005a40:	20000bd0 	.word	0x20000bd0
 8005a44:	200006f8 	.word	0x200006f8
 8005a48:	e000ed04 	.word	0xe000ed04

08005a4c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a54:	2300      	movs	r3, #0
 8005a56:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01a      	beq.n	8005a94 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a5e:	4b15      	ldr	r3, [pc, #84]	; (8005ab4 <vTaskDelay+0x68>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <vTaskDelay+0x2e>
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	60bb      	str	r3, [r7, #8]
 8005a78:	e7fe      	b.n	8005a78 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005a7a:	f000 f89b 	bl	8005bb4 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8005a7e:	6879      	ldr	r1, [r7, #4]
 8005a80:	2023      	movs	r0, #35	; 0x23
 8005a82:	f002 fabd 	bl	8008000 <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a86:	2100      	movs	r1, #0
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 fe9f 	bl	80067cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005a8e:	f000 f89f 	bl	8005bd0 <xTaskResumeAll>
 8005a92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d107      	bne.n	8005aaa <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8005a9a:	4b07      	ldr	r3, [pc, #28]	; (8005ab8 <vTaskDelay+0x6c>)
 8005a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	f3bf 8f4f 	dsb	sy
 8005aa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005aaa:	bf00      	nop
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000bf0 	.word	0x20000bf0
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005aca:	463a      	mov	r2, r7
 8005acc:	1d39      	adds	r1, r7, #4
 8005ace:	f107 0308 	add.w	r3, r7, #8
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fe fc30 	bl	8004338 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ad8:	6839      	ldr	r1, [r7, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	9202      	str	r2, [sp, #8]
 8005ae0:	9301      	str	r3, [sp, #4]
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	460a      	mov	r2, r1
 8005aea:	492b      	ldr	r1, [pc, #172]	; (8005b98 <vTaskStartScheduler+0xdc>)
 8005aec:	482b      	ldr	r0, [pc, #172]	; (8005b9c <vTaskStartScheduler+0xe0>)
 8005aee:	f7ff fdeb 	bl	80056c8 <xTaskCreateStatic>
 8005af2:	4602      	mov	r2, r0
 8005af4:	4b2a      	ldr	r3, [pc, #168]	; (8005ba0 <vTaskStartScheduler+0xe4>)
 8005af6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005af8:	4b29      	ldr	r3, [pc, #164]	; (8005ba0 <vTaskStartScheduler+0xe4>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d002      	beq.n	8005b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b00:	2301      	movs	r3, #1
 8005b02:	617b      	str	r3, [r7, #20]
 8005b04:	e001      	b.n	8005b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b06:	2300      	movs	r3, #0
 8005b08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d102      	bne.n	8005b16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b10:	f000 feb6 	bl	8006880 <xTimerCreateTimerTask>
 8005b14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d12a      	bne.n	8005b72 <vTaskStartScheduler+0xb6>
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ba4 <vTaskStartScheduler+0xe8>)
 8005b30:	f04f 32ff 	mov.w	r2, #4294967295
 8005b34:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b36:	4b1c      	ldr	r3, [pc, #112]	; (8005ba8 <vTaskStartScheduler+0xec>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b3c:	4b1b      	ldr	r3, [pc, #108]	; (8005bac <vTaskStartScheduler+0xf0>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8005b42:	f7fa fd0f 	bl	8000564 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 8005b46:	4b1a      	ldr	r3, [pc, #104]	; (8005bb0 <vTaskStartScheduler+0xf4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3334      	adds	r3, #52	; 0x34
 8005b4c:	2205      	movs	r2, #5
 8005b4e:	4912      	ldr	r1, [pc, #72]	; (8005b98 <vTaskStartScheduler+0xdc>)
 8005b50:	4618      	mov	r0, r3
 8005b52:	f003 fb07 	bl	8009164 <memcmp>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d005      	beq.n	8005b68 <vTaskStartScheduler+0xac>
 8005b5c:	4b14      	ldr	r3, [pc, #80]	; (8005bb0 <vTaskStartScheduler+0xf4>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f002 ff6d 	bl	8008a40 <SEGGER_SYSVIEW_OnTaskStartExec>
 8005b66:	e001      	b.n	8005b6c <vTaskStartScheduler+0xb0>
 8005b68:	f002 ff0c 	bl	8008984 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b6c:	f001 fa58 	bl	8007020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b70:	e00d      	b.n	8005b8e <vTaskStartScheduler+0xd2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b78:	d109      	bne.n	8005b8e <vTaskStartScheduler+0xd2>
 8005b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7e:	f383 8811 	msr	BASEPRI, r3
 8005b82:	f3bf 8f6f 	isb	sy
 8005b86:	f3bf 8f4f 	dsb	sy
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	e7fe      	b.n	8005b8c <vTaskStartScheduler+0xd0>
}
 8005b8e:	bf00      	nop
 8005b90:	3718      	adds	r7, #24
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop
 8005b98:	08009214 	.word	0x08009214
 8005b9c:	08006279 	.word	0x08006279
 8005ba0:	20000bec 	.word	0x20000bec
 8005ba4:	20000be8 	.word	0x20000be8
 8005ba8:	20000bd4 	.word	0x20000bd4
 8005bac:	20000bcc 	.word	0x20000bcc
 8005bb0:	200006f4 	.word	0x200006f4

08005bb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005bb8:	4b04      	ldr	r3, [pc, #16]	; (8005bcc <vTaskSuspendAll+0x18>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	4a03      	ldr	r2, [pc, #12]	; (8005bcc <vTaskSuspendAll+0x18>)
 8005bc0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8005bc2:	bf00      	nop
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000bf0 	.word	0x20000bf0

08005bd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bde:	4b43      	ldr	r3, [pc, #268]	; (8005cec <xTaskResumeAll+0x11c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d109      	bne.n	8005bfa <xTaskResumeAll+0x2a>
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	e7fe      	b.n	8005bf8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bfa:	f001 faaf 	bl	800715c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bfe:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <xTaskResumeAll+0x11c>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3b01      	subs	r3, #1
 8005c04:	4a39      	ldr	r2, [pc, #228]	; (8005cec <xTaskResumeAll+0x11c>)
 8005c06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c08:	4b38      	ldr	r3, [pc, #224]	; (8005cec <xTaskResumeAll+0x11c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d166      	bne.n	8005cde <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c10:	4b37      	ldr	r3, [pc, #220]	; (8005cf0 <xTaskResumeAll+0x120>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d062      	beq.n	8005cde <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c18:	e033      	b.n	8005c82 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c1a:	4b36      	ldr	r3, [pc, #216]	; (8005cf4 <xTaskResumeAll+0x124>)
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3318      	adds	r3, #24
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe fc44 	bl	80044b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	3304      	adds	r3, #4
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe fc3f 	bl	80044b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f002 ff43 	bl	8008ac4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c42:	4b2d      	ldr	r3, [pc, #180]	; (8005cf8 <xTaskResumeAll+0x128>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d903      	bls.n	8005c52 <xTaskResumeAll+0x82>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4e:	4a2a      	ldr	r2, [pc, #168]	; (8005cf8 <xTaskResumeAll+0x128>)
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009b      	lsls	r3, r3, #2
 8005c5e:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <xTaskResumeAll+0x12c>)
 8005c60:	441a      	add	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	3304      	adds	r3, #4
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f7fe fbc6 	bl	80043fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c72:	4b23      	ldr	r3, [pc, #140]	; (8005d00 <xTaskResumeAll+0x130>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d302      	bcc.n	8005c82 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8005c7c:	4b21      	ldr	r3, [pc, #132]	; (8005d04 <xTaskResumeAll+0x134>)
 8005c7e:	2201      	movs	r2, #1
 8005c80:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c82:	4b1c      	ldr	r3, [pc, #112]	; (8005cf4 <xTaskResumeAll+0x124>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1c7      	bne.n	8005c1a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d001      	beq.n	8005c94 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c90:	f000 fbdc 	bl	800644c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005c94:	4b1c      	ldr	r3, [pc, #112]	; (8005d08 <xTaskResumeAll+0x138>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d010      	beq.n	8005cc2 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ca0:	f000 f858 	bl	8005d54 <xTaskIncrementTick>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d002      	beq.n	8005cb0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8005caa:	4b16      	ldr	r3, [pc, #88]	; (8005d04 <xTaskResumeAll+0x134>)
 8005cac:	2201      	movs	r2, #1
 8005cae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f1      	bne.n	8005ca0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8005cbc:	4b12      	ldr	r3, [pc, #72]	; (8005d08 <xTaskResumeAll+0x138>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cc2:	4b10      	ldr	r3, [pc, #64]	; (8005d04 <xTaskResumeAll+0x134>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cce:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <xTaskResumeAll+0x13c>)
 8005cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cd4:	601a      	str	r2, [r3, #0]
 8005cd6:	f3bf 8f4f 	dsb	sy
 8005cda:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cde:	f001 fa6b 	bl	80071b8 <vPortExitCritical>

	return xAlreadyYielded;
 8005ce2:	68bb      	ldr	r3, [r7, #8]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}
 8005cec:	20000bf0 	.word	0x20000bf0
 8005cf0:	20000bc8 	.word	0x20000bc8
 8005cf4:	20000b88 	.word	0x20000b88
 8005cf8:	20000bd0 	.word	0x20000bd0
 8005cfc:	200006f8 	.word	0x200006f8
 8005d00:	200006f4 	.word	0x200006f4
 8005d04:	20000bdc 	.word	0x20000bdc
 8005d08:	20000bd8 	.word	0x20000bd8
 8005d0c:	e000ed04 	.word	0xe000ed04

08005d10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <xTaskGetTickCount+0x1c>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d1c:	687b      	ldr	r3, [r7, #4]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	20000bcc 	.word	0x20000bcc

08005d30 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b082      	sub	sp, #8
 8005d34:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d36:	f001 faed 	bl	8007314 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005d3e:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <xTaskGetTickCountFromISR+0x20>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d44:	683b      	ldr	r3, [r7, #0]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3708      	adds	r7, #8
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	20000bcc 	.word	0x20000bcc

08005d54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b086      	sub	sp, #24
 8005d58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d5e:	4b50      	ldr	r3, [pc, #320]	; (8005ea0 <xTaskIncrementTick+0x14c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f040 808c 	bne.w	8005e80 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d68:	4b4e      	ldr	r3, [pc, #312]	; (8005ea4 <xTaskIncrementTick+0x150>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d70:	4a4c      	ldr	r2, [pc, #304]	; (8005ea4 <xTaskIncrementTick+0x150>)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d11f      	bne.n	8005dbc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d7c:	4b4a      	ldr	r3, [pc, #296]	; (8005ea8 <xTaskIncrementTick+0x154>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d009      	beq.n	8005d9a <xTaskIncrementTick+0x46>
 8005d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d8a:	f383 8811 	msr	BASEPRI, r3
 8005d8e:	f3bf 8f6f 	isb	sy
 8005d92:	f3bf 8f4f 	dsb	sy
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	e7fe      	b.n	8005d98 <xTaskIncrementTick+0x44>
 8005d9a:	4b43      	ldr	r3, [pc, #268]	; (8005ea8 <xTaskIncrementTick+0x154>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]
 8005da0:	4b42      	ldr	r3, [pc, #264]	; (8005eac <xTaskIncrementTick+0x158>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a40      	ldr	r2, [pc, #256]	; (8005ea8 <xTaskIncrementTick+0x154>)
 8005da6:	6013      	str	r3, [r2, #0]
 8005da8:	4a40      	ldr	r2, [pc, #256]	; (8005eac <xTaskIncrementTick+0x158>)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	4b40      	ldr	r3, [pc, #256]	; (8005eb0 <xTaskIncrementTick+0x15c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3301      	adds	r3, #1
 8005db4:	4a3e      	ldr	r2, [pc, #248]	; (8005eb0 <xTaskIncrementTick+0x15c>)
 8005db6:	6013      	str	r3, [r2, #0]
 8005db8:	f000 fb48 	bl	800644c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005dbc:	4b3d      	ldr	r3, [pc, #244]	; (8005eb4 <xTaskIncrementTick+0x160>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d34d      	bcc.n	8005e62 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005dc6:	4b38      	ldr	r3, [pc, #224]	; (8005ea8 <xTaskIncrementTick+0x154>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd0:	4b38      	ldr	r3, [pc, #224]	; (8005eb4 <xTaskIncrementTick+0x160>)
 8005dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005dd6:	601a      	str	r2, [r3, #0]
					break;
 8005dd8:	e043      	b.n	8005e62 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dda:	4b33      	ldr	r3, [pc, #204]	; (8005ea8 <xTaskIncrementTick+0x154>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d203      	bcs.n	8005dfa <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005df2:	4a30      	ldr	r2, [pc, #192]	; (8005eb4 <xTaskIncrementTick+0x160>)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005df8:	e033      	b.n	8005e62 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	3304      	adds	r3, #4
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fe fb58 	bl	80044b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	3318      	adds	r3, #24
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fe fb4f 	bl	80044b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f002 fe53 	bl	8008ac4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e22:	4b25      	ldr	r3, [pc, #148]	; (8005eb8 <xTaskIncrementTick+0x164>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d903      	bls.n	8005e32 <xTaskIncrementTick+0xde>
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	4a22      	ldr	r2, [pc, #136]	; (8005eb8 <xTaskIncrementTick+0x164>)
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	4613      	mov	r3, r2
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	4413      	add	r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	4a1f      	ldr	r2, [pc, #124]	; (8005ebc <xTaskIncrementTick+0x168>)
 8005e40:	441a      	add	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	3304      	adds	r3, #4
 8005e46:	4619      	mov	r1, r3
 8005e48:	4610      	mov	r0, r2
 8005e4a:	f7fe fad6 	bl	80043fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e52:	4b1b      	ldr	r3, [pc, #108]	; (8005ec0 <xTaskIncrementTick+0x16c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d3b4      	bcc.n	8005dc6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e60:	e7b1      	b.n	8005dc6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e62:	4b17      	ldr	r3, [pc, #92]	; (8005ec0 <xTaskIncrementTick+0x16c>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e68:	4914      	ldr	r1, [pc, #80]	; (8005ebc <xTaskIncrementTick+0x168>)
 8005e6a:	4613      	mov	r3, r2
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	4413      	add	r3, r2
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	440b      	add	r3, r1
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d907      	bls.n	8005e8a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	617b      	str	r3, [r7, #20]
 8005e7e:	e004      	b.n	8005e8a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005e80:	4b10      	ldr	r3, [pc, #64]	; (8005ec4 <xTaskIncrementTick+0x170>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3301      	adds	r3, #1
 8005e86:	4a0f      	ldr	r2, [pc, #60]	; (8005ec4 <xTaskIncrementTick+0x170>)
 8005e88:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005e8a:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <xTaskIncrementTick+0x174>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d001      	beq.n	8005e96 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005e92:	2301      	movs	r3, #1
 8005e94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005e96:	697b      	ldr	r3, [r7, #20]
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000bf0 	.word	0x20000bf0
 8005ea4:	20000bcc 	.word	0x20000bcc
 8005ea8:	20000b80 	.word	0x20000b80
 8005eac:	20000b84 	.word	0x20000b84
 8005eb0:	20000be0 	.word	0x20000be0
 8005eb4:	20000be8 	.word	0x20000be8
 8005eb8:	20000bd0 	.word	0x20000bd0
 8005ebc:	200006f8 	.word	0x200006f8
 8005ec0:	200006f4 	.word	0x200006f4
 8005ec4:	20000bd8 	.word	0x20000bd8
 8005ec8:	20000bdc 	.word	0x20000bdc

08005ecc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ed2:	4b3c      	ldr	r3, [pc, #240]	; (8005fc4 <vTaskSwitchContext+0xf8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eda:	4b3b      	ldr	r3, [pc, #236]	; (8005fc8 <vTaskSwitchContext+0xfc>)
 8005edc:	2201      	movs	r2, #1
 8005ede:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005ee0:	e06c      	b.n	8005fbc <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 8005ee2:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <vTaskSwitchContext+0xfc>)
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8005ee8:	f7fa fb43 	bl	8000572 <getRunTimeCounterValue>
 8005eec:	4602      	mov	r2, r0
 8005eee:	4b37      	ldr	r3, [pc, #220]	; (8005fcc <vTaskSwitchContext+0x100>)
 8005ef0:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8005ef2:	4b36      	ldr	r3, [pc, #216]	; (8005fcc <vTaskSwitchContext+0x100>)
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	4b36      	ldr	r3, [pc, #216]	; (8005fd0 <vTaskSwitchContext+0x104>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d909      	bls.n	8005f12 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8005efe:	4b35      	ldr	r3, [pc, #212]	; (8005fd4 <vTaskSwitchContext+0x108>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005f04:	4a31      	ldr	r2, [pc, #196]	; (8005fcc <vTaskSwitchContext+0x100>)
 8005f06:	6810      	ldr	r0, [r2, #0]
 8005f08:	4a31      	ldr	r2, [pc, #196]	; (8005fd0 <vTaskSwitchContext+0x104>)
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	1a82      	subs	r2, r0, r2
 8005f0e:	440a      	add	r2, r1
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8005f12:	4b2e      	ldr	r3, [pc, #184]	; (8005fcc <vTaskSwitchContext+0x100>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a2e      	ldr	r2, [pc, #184]	; (8005fd0 <vTaskSwitchContext+0x104>)
 8005f18:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f1a:	4b2f      	ldr	r3, [pc, #188]	; (8005fd8 <vTaskSwitchContext+0x10c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	e00f      	b.n	8005f42 <vTaskSwitchContext+0x76>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d109      	bne.n	8005f3c <vTaskSwitchContext+0x70>
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	607b      	str	r3, [r7, #4]
 8005f3a:	e7fe      	b.n	8005f3a <vTaskSwitchContext+0x6e>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	4926      	ldr	r1, [pc, #152]	; (8005fdc <vTaskSwitchContext+0x110>)
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0e5      	beq.n	8005f22 <vTaskSwitchContext+0x56>
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4a1e      	ldr	r2, [pc, #120]	; (8005fdc <vTaskSwitchContext+0x110>)
 8005f62:	4413      	add	r3, r2
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	685a      	ldr	r2, [r3, #4]
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	605a      	str	r2, [r3, #4]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	3308      	adds	r3, #8
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d104      	bne.n	8005f86 <vTaskSwitchContext+0xba>
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	685a      	ldr	r2, [r3, #4]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	4a11      	ldr	r2, [pc, #68]	; (8005fd4 <vTaskSwitchContext+0x108>)
 8005f8e:	6013      	str	r3, [r2, #0]
 8005f90:	4a11      	ldr	r2, [pc, #68]	; (8005fd8 <vTaskSwitchContext+0x10c>)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8005f96:	4b0f      	ldr	r3, [pc, #60]	; (8005fd4 <vTaskSwitchContext+0x108>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3334      	adds	r3, #52	; 0x34
 8005f9c:	2205      	movs	r2, #5
 8005f9e:	4910      	ldr	r1, [pc, #64]	; (8005fe0 <vTaskSwitchContext+0x114>)
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f003 f8df 	bl	8009164 <memcmp>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d005      	beq.n	8005fb8 <vTaskSwitchContext+0xec>
 8005fac:	4b09      	ldr	r3, [pc, #36]	; (8005fd4 <vTaskSwitchContext+0x108>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f002 fd45 	bl	8008a40 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8005fb6:	e001      	b.n	8005fbc <vTaskSwitchContext+0xf0>
		traceTASK_SWITCHED_IN();
 8005fb8:	f002 fce4 	bl	8008984 <SEGGER_SYSVIEW_OnIdle>
}
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	20000bf0 	.word	0x20000bf0
 8005fc8:	20000bdc 	.word	0x20000bdc
 8005fcc:	20000bf8 	.word	0x20000bf8
 8005fd0:	20000bf4 	.word	0x20000bf4
 8005fd4:	200006f4 	.word	0x200006f4
 8005fd8:	20000bd0 	.word	0x20000bd0
 8005fdc:	200006f8 	.word	0x200006f8
 8005fe0:	08009214 	.word	0x08009214

08005fe4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <vTaskPlaceOnEventList+0x24>
 8005ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff8:	f383 8811 	msr	BASEPRI, r3
 8005ffc:	f3bf 8f6f 	isb	sy
 8006000:	f3bf 8f4f 	dsb	sy
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e7fe      	b.n	8006006 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006008:	4b07      	ldr	r3, [pc, #28]	; (8006028 <vTaskPlaceOnEventList+0x44>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3318      	adds	r3, #24
 800600e:	4619      	mov	r1, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f7fe fa16 	bl	8004442 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006016:	2101      	movs	r1, #1
 8006018:	6838      	ldr	r0, [r7, #0]
 800601a:	f000 fbd7 	bl	80067cc <prvAddCurrentTaskToDelayedList>
}
 800601e:	bf00      	nop
 8006020:	3710      	adds	r7, #16
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	200006f4 	.word	0x200006f4

0800602c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800602c:	b580      	push	{r7, lr}
 800602e:	b086      	sub	sp, #24
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <vTaskPlaceOnEventListRestricted+0x26>
 800603e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006042:	f383 8811 	msr	BASEPRI, r3
 8006046:	f3bf 8f6f 	isb	sy
 800604a:	f3bf 8f4f 	dsb	sy
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e7fe      	b.n	8006050 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006052:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <vTaskPlaceOnEventListRestricted+0x58>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3318      	adds	r3, #24
 8006058:	4619      	mov	r1, r3
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f7fe f9cd 	bl	80043fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8006066:	f04f 33ff 	mov.w	r3, #4294967295
 800606a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800606c:	2024      	movs	r0, #36	; 0x24
 800606e:	f001 ffa9 	bl	8007fc4 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006072:	6879      	ldr	r1, [r7, #4]
 8006074:	68b8      	ldr	r0, [r7, #8]
 8006076:	f000 fba9 	bl	80067cc <prvAddCurrentTaskToDelayedList>
	}
 800607a:	bf00      	nop
 800607c:	3718      	adds	r7, #24
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	200006f4 	.word	0x200006f4

08006088 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <xTaskRemoveFromEventList+0x2a>
 800609e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e7fe      	b.n	80060b0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	3318      	adds	r3, #24
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fe f9fc 	bl	80044b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060bc:	4b1f      	ldr	r3, [pc, #124]	; (800613c <xTaskRemoveFromEventList+0xb4>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d121      	bne.n	8006108 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	3304      	adds	r3, #4
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7fe f9f3 	bl	80044b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4618      	mov	r0, r3
 80060d2:	f002 fcf7 	bl	8008ac4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060da:	4b19      	ldr	r3, [pc, #100]	; (8006140 <xTaskRemoveFromEventList+0xb8>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d903      	bls.n	80060ea <xTaskRemoveFromEventList+0x62>
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e6:	4a16      	ldr	r2, [pc, #88]	; (8006140 <xTaskRemoveFromEventList+0xb8>)
 80060e8:	6013      	str	r3, [r2, #0]
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ee:	4613      	mov	r3, r2
 80060f0:	009b      	lsls	r3, r3, #2
 80060f2:	4413      	add	r3, r2
 80060f4:	009b      	lsls	r3, r3, #2
 80060f6:	4a13      	ldr	r2, [pc, #76]	; (8006144 <xTaskRemoveFromEventList+0xbc>)
 80060f8:	441a      	add	r2, r3
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	3304      	adds	r3, #4
 80060fe:	4619      	mov	r1, r3
 8006100:	4610      	mov	r0, r2
 8006102:	f7fe f97a 	bl	80043fa <vListInsertEnd>
 8006106:	e005      	b.n	8006114 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	3318      	adds	r3, #24
 800610c:	4619      	mov	r1, r3
 800610e:	480e      	ldr	r0, [pc, #56]	; (8006148 <xTaskRemoveFromEventList+0xc0>)
 8006110:	f7fe f973 	bl	80043fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006118:	4b0c      	ldr	r3, [pc, #48]	; (800614c <xTaskRemoveFromEventList+0xc4>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800611e:	429a      	cmp	r2, r3
 8006120:	d905      	bls.n	800612e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006122:	2301      	movs	r3, #1
 8006124:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006126:	4b0a      	ldr	r3, [pc, #40]	; (8006150 <xTaskRemoveFromEventList+0xc8>)
 8006128:	2201      	movs	r2, #1
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	e001      	b.n	8006132 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006132:	697b      	ldr	r3, [r7, #20]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3718      	adds	r7, #24
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000bf0 	.word	0x20000bf0
 8006140:	20000bd0 	.word	0x20000bd0
 8006144:	200006f8 	.word	0x200006f8
 8006148:	20000b88 	.word	0x20000b88
 800614c:	200006f4 	.word	0x200006f4
 8006150:	20000bdc 	.word	0x20000bdc

08006154 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800615c:	4b06      	ldr	r3, [pc, #24]	; (8006178 <vTaskInternalSetTimeOutState+0x24>)
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006164:	4b05      	ldr	r3, [pc, #20]	; (800617c <vTaskInternalSetTimeOutState+0x28>)
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	605a      	str	r2, [r3, #4]
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	20000be0 	.word	0x20000be0
 800617c:	20000bcc 	.word	0x20000bcc

08006180 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d109      	bne.n	80061a4 <xTaskCheckForTimeOut+0x24>
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e7fe      	b.n	80061a2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <xTaskCheckForTimeOut+0x3e>
 80061aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ae:	f383 8811 	msr	BASEPRI, r3
 80061b2:	f3bf 8f6f 	isb	sy
 80061b6:	f3bf 8f4f 	dsb	sy
 80061ba:	60fb      	str	r3, [r7, #12]
 80061bc:	e7fe      	b.n	80061bc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80061be:	f000 ffcd 	bl	800715c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061c2:	4b24      	ldr	r3, [pc, #144]	; (8006254 <xTaskCheckForTimeOut+0xd4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	69ba      	ldr	r2, [r7, #24]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80061d2:	4b21      	ldr	r3, [pc, #132]	; (8006258 <xTaskCheckForTimeOut+0xd8>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80061de:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <xTaskCheckForTimeOut+0xd8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
				xReturn = pdTRUE;
 80061e8:	2301      	movs	r3, #1
 80061ea:	61fb      	str	r3, [r7, #28]
 80061ec:	e02b      	b.n	8006246 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d102      	bne.n	80061fe <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	e023      	b.n	8006246 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b16      	ldr	r3, [pc, #88]	; (800625c <xTaskCheckForTimeOut+0xdc>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	429a      	cmp	r2, r3
 8006208:	d007      	beq.n	800621a <xTaskCheckForTimeOut+0x9a>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	429a      	cmp	r2, r3
 8006212:	d302      	bcc.n	800621a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006214:	2301      	movs	r3, #1
 8006216:	61fb      	str	r3, [r7, #28]
 8006218:	e015      	b.n	8006246 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	429a      	cmp	r2, r3
 8006222:	d20b      	bcs.n	800623c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	1ad2      	subs	r2, r2, r3
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff ff8f 	bl	8006154 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006236:	2300      	movs	r3, #0
 8006238:	61fb      	str	r3, [r7, #28]
 800623a:	e004      	b.n	8006246 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006242:	2301      	movs	r3, #1
 8006244:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006246:	f000 ffb7 	bl	80071b8 <vPortExitCritical>

	return xReturn;
 800624a:	69fb      	ldr	r3, [r7, #28]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20000bcc 	.word	0x20000bcc
 8006258:	200006f4 	.word	0x200006f4
 800625c:	20000be0 	.word	0x20000be0

08006260 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006264:	4b03      	ldr	r3, [pc, #12]	; (8006274 <vTaskMissedYield+0x14>)
 8006266:	2201      	movs	r2, #1
 8006268:	601a      	str	r2, [r3, #0]
}
 800626a:	bf00      	nop
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr
 8006274:	20000bdc 	.word	0x20000bdc

08006278 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006280:	f000 f852 	bl	8006328 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006284:	4b06      	ldr	r3, [pc, #24]	; (80062a0 <prvIdleTask+0x28>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d9f9      	bls.n	8006280 <prvIdleTask+0x8>
			{
				taskYIELD();
 800628c:	4b05      	ldr	r3, [pc, #20]	; (80062a4 <prvIdleTask+0x2c>)
 800628e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006292:	601a      	str	r2, [r3, #0]
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800629c:	e7f0      	b.n	8006280 <prvIdleTask+0x8>
 800629e:	bf00      	nop
 80062a0:	200006f8 	.word	0x200006f8
 80062a4:	e000ed04 	.word	0xe000ed04

080062a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062ae:	2300      	movs	r3, #0
 80062b0:	607b      	str	r3, [r7, #4]
 80062b2:	e00c      	b.n	80062ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4a12      	ldr	r2, [pc, #72]	; (8006308 <prvInitialiseTaskLists+0x60>)
 80062c0:	4413      	add	r3, r2
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe f86c 	bl	80043a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3301      	adds	r3, #1
 80062cc:	607b      	str	r3, [r7, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b37      	cmp	r3, #55	; 0x37
 80062d2:	d9ef      	bls.n	80062b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062d4:	480d      	ldr	r0, [pc, #52]	; (800630c <prvInitialiseTaskLists+0x64>)
 80062d6:	f7fe f863 	bl	80043a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062da:	480d      	ldr	r0, [pc, #52]	; (8006310 <prvInitialiseTaskLists+0x68>)
 80062dc:	f7fe f860 	bl	80043a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062e0:	480c      	ldr	r0, [pc, #48]	; (8006314 <prvInitialiseTaskLists+0x6c>)
 80062e2:	f7fe f85d 	bl	80043a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062e6:	480c      	ldr	r0, [pc, #48]	; (8006318 <prvInitialiseTaskLists+0x70>)
 80062e8:	f7fe f85a 	bl	80043a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062ec:	480b      	ldr	r0, [pc, #44]	; (800631c <prvInitialiseTaskLists+0x74>)
 80062ee:	f7fe f857 	bl	80043a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062f2:	4b0b      	ldr	r3, [pc, #44]	; (8006320 <prvInitialiseTaskLists+0x78>)
 80062f4:	4a05      	ldr	r2, [pc, #20]	; (800630c <prvInitialiseTaskLists+0x64>)
 80062f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062f8:	4b0a      	ldr	r3, [pc, #40]	; (8006324 <prvInitialiseTaskLists+0x7c>)
 80062fa:	4a05      	ldr	r2, [pc, #20]	; (8006310 <prvInitialiseTaskLists+0x68>)
 80062fc:	601a      	str	r2, [r3, #0]
}
 80062fe:	bf00      	nop
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop
 8006308:	200006f8 	.word	0x200006f8
 800630c:	20000b58 	.word	0x20000b58
 8006310:	20000b6c 	.word	0x20000b6c
 8006314:	20000b88 	.word	0x20000b88
 8006318:	20000b9c 	.word	0x20000b9c
 800631c:	20000bb4 	.word	0x20000bb4
 8006320:	20000b80 	.word	0x20000b80
 8006324:	20000b84 	.word	0x20000b84

08006328 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b082      	sub	sp, #8
 800632c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800632e:	e019      	b.n	8006364 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006330:	f000 ff14 	bl	800715c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006334:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <prvCheckTasksWaitingTermination+0x4c>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	3304      	adds	r3, #4
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe f8b7 	bl	80044b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006346:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <prvCheckTasksWaitingTermination+0x50>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3b01      	subs	r3, #1
 800634c:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <prvCheckTasksWaitingTermination+0x50>)
 800634e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006350:	4b0a      	ldr	r3, [pc, #40]	; (800637c <prvCheckTasksWaitingTermination+0x54>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3b01      	subs	r3, #1
 8006356:	4a09      	ldr	r2, [pc, #36]	; (800637c <prvCheckTasksWaitingTermination+0x54>)
 8006358:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800635a:	f000 ff2d 	bl	80071b8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f846 	bl	80063f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006364:	4b05      	ldr	r3, [pc, #20]	; (800637c <prvCheckTasksWaitingTermination+0x54>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e1      	bne.n	8006330 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800636c:	bf00      	nop
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000b9c 	.word	0x20000b9c
 8006378:	20000bc8 	.word	0x20000bc8
 800637c:	20000bb0 	.word	0x20000bb0

08006380 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8006388:	2300      	movs	r3, #0
 800638a:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800638c:	e005      	b.n	800639a <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3301      	adds	r3, #1
 8006392:	607b      	str	r3, [r7, #4]
			ulCount++;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3301      	adds	r3, #1
 8006398:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	2ba5      	cmp	r3, #165	; 0xa5
 80063a0:	d0f5      	beq.n	800638e <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	089b      	lsrs	r3, r3, #2
 80063a6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	b29b      	uxth	r3, r3
	}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d102      	bne.n	80063cc <uxTaskGetStackHighWaterMark+0x14>
 80063c6:	4b09      	ldr	r3, [pc, #36]	; (80063ec <uxTaskGetStackHighWaterMark+0x34>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	e000      	b.n	80063ce <uxTaskGetStackHighWaterMark+0x16>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80063d6:	6938      	ldr	r0, [r7, #16]
 80063d8:	f7ff ffd2 	bl	8006380 <prvTaskCheckFreeStackSpace>
 80063dc:	4603      	mov	r3, r0
 80063de:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 80063e0:	68fb      	ldr	r3, [r7, #12]
	}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	200006f4 	.word	0x200006f4

080063f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b084      	sub	sp, #16
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d108      	bne.n	8006414 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	4618      	mov	r0, r3
 8006408:	f001 f884 	bl	8007514 <vPortFree>
				vPortFree( pxTCB );
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f001 f881 	bl	8007514 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006412:	e017      	b.n	8006444 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800641a:	2b01      	cmp	r3, #1
 800641c:	d103      	bne.n	8006426 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 f878 	bl	8007514 <vPortFree>
	}
 8006424:	e00e      	b.n	8006444 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800642c:	2b02      	cmp	r3, #2
 800642e:	d009      	beq.n	8006444 <prvDeleteTCB+0x54>
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	60fb      	str	r3, [r7, #12]
 8006442:	e7fe      	b.n	8006442 <prvDeleteTCB+0x52>
	}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006452:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <prvResetNextTaskUnblockTime+0x38>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d104      	bne.n	8006466 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800645c:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <prvResetNextTaskUnblockTime+0x3c>)
 800645e:	f04f 32ff 	mov.w	r2, #4294967295
 8006462:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006464:	e008      	b.n	8006478 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006466:	4b07      	ldr	r3, [pc, #28]	; (8006484 <prvResetNextTaskUnblockTime+0x38>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	4a04      	ldr	r2, [pc, #16]	; (8006488 <prvResetNextTaskUnblockTime+0x3c>)
 8006476:	6013      	str	r3, [r2, #0]
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	20000b80 	.word	0x20000b80
 8006488:	20000be8 	.word	0x20000be8

0800648c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800648c:	b480      	push	{r7}
 800648e:	b083      	sub	sp, #12
 8006490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <xTaskGetSchedulerState+0x34>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800649a:	2301      	movs	r3, #1
 800649c:	607b      	str	r3, [r7, #4]
 800649e:	e008      	b.n	80064b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a0:	4b08      	ldr	r3, [pc, #32]	; (80064c4 <xTaskGetSchedulerState+0x38>)
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d102      	bne.n	80064ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064a8:	2302      	movs	r3, #2
 80064aa:	607b      	str	r3, [r7, #4]
 80064ac:	e001      	b.n	80064b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064ae:	2300      	movs	r3, #0
 80064b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064b2:	687b      	ldr	r3, [r7, #4]
	}
 80064b4:	4618      	mov	r0, r3
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	20000bd4 	.word	0x20000bd4
 80064c4:	20000bf0 	.word	0x20000bf0

080064c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d05a      	beq.n	8006594 <xTaskPriorityInherit+0xcc>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e2:	4b2f      	ldr	r3, [pc, #188]	; (80065a0 <xTaskPriorityInherit+0xd8>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d24a      	bcs.n	8006582 <xTaskPriorityInherit+0xba>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db06      	blt.n	8006502 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064f4:	4b2a      	ldr	r3, [pc, #168]	; (80065a0 <xTaskPriorityInherit+0xd8>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	6959      	ldr	r1, [r3, #20]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4a24      	ldr	r2, [pc, #144]	; (80065a4 <xTaskPriorityInherit+0xdc>)
 8006514:	4413      	add	r3, r2
 8006516:	4299      	cmp	r1, r3
 8006518:	d126      	bne.n	8006568 <xTaskPriorityInherit+0xa0>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	3304      	adds	r3, #4
 800651e:	4618      	mov	r0, r3
 8006520:	f7fd ffc8 	bl	80044b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006524:	4b1e      	ldr	r3, [pc, #120]	; (80065a0 <xTaskPriorityInherit+0xd8>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4618      	mov	r0, r3
 8006532:	f002 fac7 	bl	8008ac4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653a:	4b1b      	ldr	r3, [pc, #108]	; (80065a8 <xTaskPriorityInherit+0xe0>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d903      	bls.n	800654a <xTaskPriorityInherit+0x82>
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006546:	4a18      	ldr	r2, [pc, #96]	; (80065a8 <xTaskPriorityInherit+0xe0>)
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	4a13      	ldr	r2, [pc, #76]	; (80065a4 <xTaskPriorityInherit+0xdc>)
 8006558:	441a      	add	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	3304      	adds	r3, #4
 800655e:	4619      	mov	r1, r3
 8006560:	4610      	mov	r0, r2
 8006562:	f7fd ff4a 	bl	80043fa <vListInsertEnd>
 8006566:	e004      	b.n	8006572 <xTaskPriorityInherit+0xaa>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006568:	4b0d      	ldr	r3, [pc, #52]	; (80065a0 <xTaskPriorityInherit+0xd8>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4619      	mov	r1, r3
 8006576:	2049      	movs	r0, #73	; 0x49
 8006578:	f001 fd42 	bl	8008000 <SEGGER_SYSVIEW_RecordU32>

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800657c:	2301      	movs	r3, #1
 800657e:	60fb      	str	r3, [r7, #12]
 8006580:	e008      	b.n	8006594 <xTaskPriorityInherit+0xcc>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006586:	4b06      	ldr	r3, [pc, #24]	; (80065a0 <xTaskPriorityInherit+0xd8>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	429a      	cmp	r2, r3
 800658e:	d201      	bcs.n	8006594 <xTaskPriorityInherit+0xcc>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006590:	2301      	movs	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006594:	68fb      	ldr	r3, [r7, #12]
	}
 8006596:	4618      	mov	r0, r3
 8006598:	3710      	adds	r7, #16
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200006f4 	.word	0x200006f4
 80065a4:	200006f8 	.word	0x200006f8
 80065a8:	20000bd0 	.word	0x20000bd0

080065ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d05d      	beq.n	800667e <xTaskPriorityDisinherit+0xd2>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80065c2:	4b31      	ldr	r3, [pc, #196]	; (8006688 <xTaskPriorityDisinherit+0xdc>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	693a      	ldr	r2, [r7, #16]
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d009      	beq.n	80065e0 <xTaskPriorityDisinherit+0x34>
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	60fb      	str	r3, [r7, #12]
 80065de:	e7fe      	b.n	80065de <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <xTaskPriorityDisinherit+0x50>
 80065e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	60bb      	str	r3, [r7, #8]
 80065fa:	e7fe      	b.n	80065fa <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006600:	1e5a      	subs	r2, r3, #1
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800660e:	429a      	cmp	r2, r3
 8006610:	d035      	beq.n	800667e <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006616:	2b00      	cmp	r3, #0
 8006618:	d131      	bne.n	800667e <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	3304      	adds	r3, #4
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd ff48 	bl	80044b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4619      	mov	r1, r3
 8006628:	204a      	movs	r0, #74	; 0x4a
 800662a:	f001 fce9 	bl	8008000 <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	4618      	mov	r0, r3
 8006646:	f002 fa3d 	bl	8008ac4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800664e:	4b0f      	ldr	r3, [pc, #60]	; (800668c <xTaskPriorityDisinherit+0xe0>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	429a      	cmp	r2, r3
 8006654:	d903      	bls.n	800665e <xTaskPriorityDisinherit+0xb2>
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665a:	4a0c      	ldr	r2, [pc, #48]	; (800668c <xTaskPriorityDisinherit+0xe0>)
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006662:	4613      	mov	r3, r2
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4a09      	ldr	r2, [pc, #36]	; (8006690 <xTaskPriorityDisinherit+0xe4>)
 800666c:	441a      	add	r2, r3
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	3304      	adds	r3, #4
 8006672:	4619      	mov	r1, r3
 8006674:	4610      	mov	r0, r2
 8006676:	f7fd fec0 	bl	80043fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800667a:	2301      	movs	r3, #1
 800667c:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800667e:	697b      	ldr	r3, [r7, #20]
	}
 8006680:	4618      	mov	r0, r3
 8006682:	3718      	adds	r7, #24
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	200006f4 	.word	0x200006f4
 800668c:	20000bd0 	.word	0x20000bd0
 8006690:	200006f8 	.word	0x200006f8

08006694 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006694:	b580      	push	{r7, lr}
 8006696:	b088      	sub	sp, #32
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80066a2:	2301      	movs	r3, #1
 80066a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d071      	beq.n	8006790 <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d109      	bne.n	80066c8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80066b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066b8:	f383 8811 	msr	BASEPRI, r3
 80066bc:	f3bf 8f6f 	isb	sy
 80066c0:	f3bf 8f4f 	dsb	sy
 80066c4:	60fb      	str	r3, [r7, #12]
 80066c6:	e7fe      	b.n	80066c6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d902      	bls.n	80066d8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	61fb      	str	r3, [r7, #28]
 80066d6:	e002      	b.n	80066de <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066dc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d053      	beq.n	8006790 <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d14e      	bne.n	8006790 <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80066f2:	4b29      	ldr	r3, [pc, #164]	; (8006798 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69ba      	ldr	r2, [r7, #24]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d109      	bne.n	8006710 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80066fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006700:	f383 8811 	msr	BASEPRI, r3
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	f3bf 8f4f 	dsb	sy
 800670c:	60bb      	str	r3, [r7, #8]
 800670e:	e7fe      	b.n	800670e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4619      	mov	r1, r3
 8006714:	204a      	movs	r0, #74	; 0x4a
 8006716:	f001 fc73 	bl	8008000 <SEGGER_SYSVIEW_RecordU32>
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	69fa      	ldr	r2, [r7, #28]
 8006724:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	2b00      	cmp	r3, #0
 800672c:	db04      	blt.n	8006738 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	6959      	ldr	r1, [r3, #20]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	4a15      	ldr	r2, [pc, #84]	; (800679c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006748:	4413      	add	r3, r2
 800674a:	4299      	cmp	r1, r3
 800674c:	d120      	bne.n	8006790 <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	3304      	adds	r3, #4
 8006752:	4618      	mov	r0, r3
 8006754:	f7fd feae 	bl	80044b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	4618      	mov	r0, r3
 800675c:	f002 f9b2 	bl	8008ac4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	4b0e      	ldr	r3, [pc, #56]	; (80067a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d903      	bls.n	8006774 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	4a0b      	ldr	r2, [pc, #44]	; (80067a0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	69bb      	ldr	r3, [r7, #24]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4a06      	ldr	r2, [pc, #24]	; (800679c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8006782:	441a      	add	r2, r3
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	3304      	adds	r3, #4
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f7fd fe35 	bl	80043fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006790:	bf00      	nop
 8006792:	3720      	adds	r7, #32
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	200006f4 	.word	0x200006f4
 800679c:	200006f8 	.word	0x200006f8
 80067a0:	20000bd0 	.word	0x20000bd0

080067a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80067a4:	b480      	push	{r7}
 80067a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80067a8:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d004      	beq.n	80067ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067b6:	3201      	adds	r2, #1
 80067b8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80067ba:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80067bc:	681b      	ldr	r3, [r3, #0]
	}
 80067be:	4618      	mov	r0, r3
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr
 80067c8:	200006f4 	.word	0x200006f4

080067cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067d6:	4b24      	ldr	r3, [pc, #144]	; (8006868 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80067dc:	4b23      	ldr	r3, [pc, #140]	; (800686c <prvAddCurrentTaskToDelayedList+0xa0>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067e6:	4b21      	ldr	r3, [pc, #132]	; (800686c <prvAddCurrentTaskToDelayedList+0xa0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3304      	adds	r3, #4
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7fd fe61 	bl	80044b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067f8:	d10a      	bne.n	8006810 <prvAddCurrentTaskToDelayedList+0x44>
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d007      	beq.n	8006810 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006800:	4b1a      	ldr	r3, [pc, #104]	; (800686c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3304      	adds	r3, #4
 8006806:	4619      	mov	r1, r3
 8006808:	4819      	ldr	r0, [pc, #100]	; (8006870 <prvAddCurrentTaskToDelayedList+0xa4>)
 800680a:	f7fd fdf6 	bl	80043fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800680e:	e026      	b.n	800685e <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4413      	add	r3, r2
 8006816:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006818:	4b14      	ldr	r3, [pc, #80]	; (800686c <prvAddCurrentTaskToDelayedList+0xa0>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006820:	68ba      	ldr	r2, [r7, #8]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	429a      	cmp	r2, r3
 8006826:	d209      	bcs.n	800683c <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006828:	4b12      	ldr	r3, [pc, #72]	; (8006874 <prvAddCurrentTaskToDelayedList+0xa8>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	4b0f      	ldr	r3, [pc, #60]	; (800686c <prvAddCurrentTaskToDelayedList+0xa0>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3304      	adds	r3, #4
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f7fd fe04 	bl	8004442 <vListInsert>
}
 800683a:	e010      	b.n	800685e <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800683c:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <prvAddCurrentTaskToDelayedList+0xac>)
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	4b0a      	ldr	r3, [pc, #40]	; (800686c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	3304      	adds	r3, #4
 8006846:	4619      	mov	r1, r3
 8006848:	4610      	mov	r0, r2
 800684a:	f7fd fdfa 	bl	8004442 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800684e:	4b0b      	ldr	r3, [pc, #44]	; (800687c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	429a      	cmp	r2, r3
 8006856:	d202      	bcs.n	800685e <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8006858:	4a08      	ldr	r2, [pc, #32]	; (800687c <prvAddCurrentTaskToDelayedList+0xb0>)
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	6013      	str	r3, [r2, #0]
}
 800685e:	bf00      	nop
 8006860:	3710      	adds	r7, #16
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000bcc 	.word	0x20000bcc
 800686c:	200006f4 	.word	0x200006f4
 8006870:	20000bb4 	.word	0x20000bb4
 8006874:	20000b84 	.word	0x20000b84
 8006878:	20000b80 	.word	0x20000b80
 800687c:	20000be8 	.word	0x20000be8

08006880 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006886:	2300      	movs	r3, #0
 8006888:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800688a:	f000 faff 	bl	8006e8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800688e:	4b1c      	ldr	r3, [pc, #112]	; (8006900 <xTimerCreateTimerTask+0x80>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d021      	beq.n	80068da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800689e:	1d3a      	adds	r2, r7, #4
 80068a0:	f107 0108 	add.w	r1, r7, #8
 80068a4:	f107 030c 	add.w	r3, r7, #12
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7fd fd5f 	bl	800436c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	68fa      	ldr	r2, [r7, #12]
 80068b4:	9202      	str	r2, [sp, #8]
 80068b6:	9301      	str	r3, [sp, #4]
 80068b8:	2302      	movs	r3, #2
 80068ba:	9300      	str	r3, [sp, #0]
 80068bc:	2300      	movs	r3, #0
 80068be:	460a      	mov	r2, r1
 80068c0:	4910      	ldr	r1, [pc, #64]	; (8006904 <xTimerCreateTimerTask+0x84>)
 80068c2:	4811      	ldr	r0, [pc, #68]	; (8006908 <xTimerCreateTimerTask+0x88>)
 80068c4:	f7fe ff00 	bl	80056c8 <xTaskCreateStatic>
 80068c8:	4602      	mov	r2, r0
 80068ca:	4b10      	ldr	r3, [pc, #64]	; (800690c <xTimerCreateTimerTask+0x8c>)
 80068cc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068ce:	4b0f      	ldr	r3, [pc, #60]	; (800690c <xTimerCreateTimerTask+0x8c>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80068d6:	2301      	movs	r3, #1
 80068d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d109      	bne.n	80068f4 <xTimerCreateTimerTask+0x74>
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	613b      	str	r3, [r7, #16]
 80068f2:	e7fe      	b.n	80068f2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80068f4:	697b      	ldr	r3, [r7, #20]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000c2c 	.word	0x20000c2c
 8006904:	08009244 	.word	0x08009244
 8006908:	08006a41 	.word	0x08006a41
 800690c:	20000c30 	.word	0x20000c30

08006910 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	; 0x28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800691e:	2300      	movs	r3, #0
 8006920:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d109      	bne.n	800693c <xTimerGenericCommand+0x2c>
 8006928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800692c:	f383 8811 	msr	BASEPRI, r3
 8006930:	f3bf 8f6f 	isb	sy
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	623b      	str	r3, [r7, #32]
 800693a:	e7fe      	b.n	800693a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800693c:	4b19      	ldr	r3, [pc, #100]	; (80069a4 <xTimerGenericCommand+0x94>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d02a      	beq.n	800699a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b05      	cmp	r3, #5
 8006954:	dc18      	bgt.n	8006988 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006956:	f7ff fd99 	bl	800648c <xTaskGetSchedulerState>
 800695a:	4603      	mov	r3, r0
 800695c:	2b02      	cmp	r3, #2
 800695e:	d109      	bne.n	8006974 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006960:	4b10      	ldr	r3, [pc, #64]	; (80069a4 <xTimerGenericCommand+0x94>)
 8006962:	6818      	ldr	r0, [r3, #0]
 8006964:	f107 0110 	add.w	r1, r7, #16
 8006968:	2300      	movs	r3, #0
 800696a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800696c:	f7fd ff76 	bl	800485c <xQueueGenericSend>
 8006970:	6278      	str	r0, [r7, #36]	; 0x24
 8006972:	e012      	b.n	800699a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006974:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <xTimerGenericCommand+0x94>)
 8006976:	6818      	ldr	r0, [r3, #0]
 8006978:	f107 0110 	add.w	r1, r7, #16
 800697c:	2300      	movs	r3, #0
 800697e:	2200      	movs	r2, #0
 8006980:	f7fd ff6c 	bl	800485c <xQueueGenericSend>
 8006984:	6278      	str	r0, [r7, #36]	; 0x24
 8006986:	e008      	b.n	800699a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006988:	4b06      	ldr	r3, [pc, #24]	; (80069a4 <xTimerGenericCommand+0x94>)
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	f107 0110 	add.w	r1, r7, #16
 8006990:	2300      	movs	r3, #0
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	f7fe f884 	bl	8004aa0 <xQueueGenericSendFromISR>
 8006998:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800699c:	4618      	mov	r0, r3
 800699e:	3728      	adds	r7, #40	; 0x28
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20000c2c 	.word	0x20000c2c

080069a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b088      	sub	sp, #32
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069b2:	4b22      	ldr	r3, [pc, #136]	; (8006a3c <prvProcessExpiredTimer+0x94>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	3304      	adds	r3, #4
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7fd fd77 	bl	80044b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069cc:	f003 0304 	and.w	r3, r3, #4
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d021      	beq.n	8006a18 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	699a      	ldr	r2, [r3, #24]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	18d1      	adds	r1, r2, r3
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	6978      	ldr	r0, [r7, #20]
 80069e2:	f000 f8d1 	bl	8006b88 <prvInsertTimerInActiveList>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d01e      	beq.n	8006a2a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069ec:	2300      	movs	r3, #0
 80069ee:	9300      	str	r3, [sp, #0]
 80069f0:	2300      	movs	r3, #0
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	2100      	movs	r1, #0
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	f7ff ff8a 	bl	8006910 <xTimerGenericCommand>
 80069fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d112      	bne.n	8006a2a <prvProcessExpiredTimer+0x82>
 8006a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a08:	f383 8811 	msr	BASEPRI, r3
 8006a0c:	f3bf 8f6f 	isb	sy
 8006a10:	f3bf 8f4f 	dsb	sy
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	e7fe      	b.n	8006a16 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a1e:	f023 0301 	bic.w	r3, r3, #1
 8006a22:	b2da      	uxtb	r2, r3
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	6978      	ldr	r0, [r7, #20]
 8006a30:	4798      	blx	r3
}
 8006a32:	bf00      	nop
 8006a34:	3718      	adds	r7, #24
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000c24 	.word	0x20000c24

08006a40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a48:	f107 0308 	add.w	r3, r7, #8
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	f000 f857 	bl	8006b00 <prvGetNextExpireTime>
 8006a52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	4619      	mov	r1, r3
 8006a58:	68f8      	ldr	r0, [r7, #12]
 8006a5a:	f000 f803 	bl	8006a64 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a5e:	f000 f8d5 	bl	8006c0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a62:	e7f1      	b.n	8006a48 <prvTimerTask+0x8>

08006a64 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a6e:	f7ff f8a1 	bl	8005bb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a72:	f107 0308 	add.w	r3, r7, #8
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 f866 	bl	8006b48 <prvSampleTimeNow>
 8006a7c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d130      	bne.n	8006ae6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10a      	bne.n	8006aa0 <prvProcessTimerOrBlockTask+0x3c>
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d806      	bhi.n	8006aa0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a92:	f7ff f89d 	bl	8005bd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a96:	68f9      	ldr	r1, [r7, #12]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff ff85 	bl	80069a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a9e:	e024      	b.n	8006aea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d008      	beq.n	8006ab8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006aa6:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <prvProcessTimerOrBlockTask+0x90>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <prvProcessTimerOrBlockTask+0x50>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e000      	b.n	8006ab6 <prvProcessTimerOrBlockTask+0x52>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	; (8006af8 <prvProcessTimerOrBlockTask+0x94>)
 8006aba:	6818      	ldr	r0, [r3, #0]
 8006abc:	687a      	ldr	r2, [r7, #4]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	f7fe fdcb 	bl	8005660 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006aca:	f7ff f881 	bl	8005bd0 <xTaskResumeAll>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10a      	bne.n	8006aea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ad4:	4b09      	ldr	r3, [pc, #36]	; (8006afc <prvProcessTimerOrBlockTask+0x98>)
 8006ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ada:	601a      	str	r2, [r3, #0]
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	f3bf 8f6f 	isb	sy
}
 8006ae4:	e001      	b.n	8006aea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ae6:	f7ff f873 	bl	8005bd0 <xTaskResumeAll>
}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000c28 	.word	0x20000c28
 8006af8:	20000c2c 	.word	0x20000c2c
 8006afc:	e000ed04 	.word	0xe000ed04

08006b00 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b08:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <prvGetNextExpireTime+0x44>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <prvGetNextExpireTime+0x16>
 8006b12:	2201      	movs	r2, #1
 8006b14:	e000      	b.n	8006b18 <prvGetNextExpireTime+0x18>
 8006b16:	2200      	movs	r2, #0
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d105      	bne.n	8006b30 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b24:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <prvGetNextExpireTime+0x44>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68db      	ldr	r3, [r3, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	60fb      	str	r3, [r7, #12]
 8006b2e:	e001      	b.n	8006b34 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b30:	2300      	movs	r3, #0
 8006b32:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b34:	68fb      	ldr	r3, [r7, #12]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000c24 	.word	0x20000c24

08006b48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b50:	f7ff f8de 	bl	8005d10 <xTaskGetTickCount>
 8006b54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b56:	4b0b      	ldr	r3, [pc, #44]	; (8006b84 <prvSampleTimeNow+0x3c>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d205      	bcs.n	8006b6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b60:	f000 f930 	bl	8006dc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	e002      	b.n	8006b72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b72:	4a04      	ldr	r2, [pc, #16]	; (8006b84 <prvSampleTimeNow+0x3c>)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b78:	68fb      	ldr	r3, [r7, #12]
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000c34 	.word	0x20000c34

08006b88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
 8006b94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d812      	bhi.n	8006bd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	1ad2      	subs	r2, r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	699b      	ldr	r3, [r3, #24]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d302      	bcc.n	8006bc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	e01b      	b.n	8006bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bc2:	4b10      	ldr	r3, [pc, #64]	; (8006c04 <prvInsertTimerInActiveList+0x7c>)
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	4619      	mov	r1, r3
 8006bcc:	4610      	mov	r0, r2
 8006bce:	f7fd fc38 	bl	8004442 <vListInsert>
 8006bd2:	e012      	b.n	8006bfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d206      	bcs.n	8006bea <prvInsertTimerInActiveList+0x62>
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d302      	bcc.n	8006bea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006be4:	2301      	movs	r3, #1
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	e007      	b.n	8006bfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006bea:	4b07      	ldr	r3, [pc, #28]	; (8006c08 <prvInsertTimerInActiveList+0x80>)
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	3304      	adds	r3, #4
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f7fd fc24 	bl	8004442 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bfa:	697b      	ldr	r3, [r7, #20]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3718      	adds	r7, #24
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000c28 	.word	0x20000c28
 8006c08:	20000c24 	.word	0x20000c24

08006c0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b08e      	sub	sp, #56	; 0x38
 8006c10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c12:	e0c6      	b.n	8006da2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da17      	bge.n	8006c4a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c1a:	1d3b      	adds	r3, r7, #4
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <prvProcessReceivedCommands+0x2e>
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	61fb      	str	r3, [r7, #28]
 8006c38:	e7fe      	b.n	8006c38 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c40:	6850      	ldr	r0, [r2, #4]
 8006c42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c44:	6892      	ldr	r2, [r2, #8]
 8006c46:	4611      	mov	r1, r2
 8006c48:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f2c0 80a7 	blt.w	8006da0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c58:	695b      	ldr	r3, [r3, #20]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d004      	beq.n	8006c68 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	3304      	adds	r3, #4
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7fd fc26 	bl	80044b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c68:	463b      	mov	r3, r7
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff ff6c 	bl	8006b48 <prvSampleTimeNow>
 8006c70:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b09      	cmp	r3, #9
 8006c76:	f200 8094 	bhi.w	8006da2 <prvProcessReceivedCommands+0x196>
 8006c7a:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <prvProcessReceivedCommands+0x74>)
 8006c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c80:	08006ca9 	.word	0x08006ca9
 8006c84:	08006ca9 	.word	0x08006ca9
 8006c88:	08006ca9 	.word	0x08006ca9
 8006c8c:	08006d1b 	.word	0x08006d1b
 8006c90:	08006d2f 	.word	0x08006d2f
 8006c94:	08006d77 	.word	0x08006d77
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006ca9 	.word	0x08006ca9
 8006ca0:	08006d1b 	.word	0x08006d1b
 8006ca4:	08006d2f 	.word	0x08006d2f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	18d1      	adds	r1, r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc8:	f7ff ff5e 	bl	8006b88 <prvInsertTimerInActiveList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d067      	beq.n	8006da2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d05c      	beq.n	8006da2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	441a      	add	r2, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfa:	f7ff fe09 	bl	8006910 <xTimerGenericCommand>
 8006cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d14d      	bne.n	8006da2 <prvProcessReceivedCommands+0x196>
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	e7fe      	b.n	8006d18 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d2c:	e039      	b.n	8006da2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d34:	f043 0301 	orr.w	r3, r3, #1
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d109      	bne.n	8006d62 <prvProcessReceivedCommands+0x156>
 8006d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d52:	f383 8811 	msr	BASEPRI, r3
 8006d56:	f3bf 8f6f 	isb	sy
 8006d5a:	f3bf 8f4f 	dsb	sy
 8006d5e:	617b      	str	r3, [r7, #20]
 8006d60:	e7fe      	b.n	8006d60 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d64:	699a      	ldr	r2, [r3, #24]
 8006d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d68:	18d1      	adds	r1, r2, r3
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d70:	f7ff ff0a 	bl	8006b88 <prvInsertTimerInActiveList>
					break;
 8006d74:	e015      	b.n	8006da2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d103      	bne.n	8006d8c <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d86:	f000 fbc5 	bl	8007514 <vPortFree>
 8006d8a:	e00a      	b.n	8006da2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d9e:	e000      	b.n	8006da2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006da0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006da2:	4b07      	ldr	r3, [pc, #28]	; (8006dc0 <prvProcessReceivedCommands+0x1b4>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	1d39      	adds	r1, r7, #4
 8006da8:	2200      	movs	r2, #0
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fd ffbe 	bl	8004d2c <xQueueReceive>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f47f af2e 	bne.w	8006c14 <prvProcessReceivedCommands+0x8>
	}
}
 8006db8:	bf00      	nop
 8006dba:	3730      	adds	r7, #48	; 0x30
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	20000c2c 	.word	0x20000c2c

08006dc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dca:	e047      	b.n	8006e5c <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dcc:	4b2d      	ldr	r3, [pc, #180]	; (8006e84 <prvSwitchTimerLists+0xc0>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dd6:	4b2b      	ldr	r3, [pc, #172]	; (8006e84 <prvSwitchTimerLists+0xc0>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fd fb65 	bl	80044b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006df8:	f003 0304 	and.w	r3, r3, #4
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d02d      	beq.n	8006e5c <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	693a      	ldr	r2, [r7, #16]
 8006e06:	4413      	add	r3, r2
 8006e08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d90e      	bls.n	8006e30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	68ba      	ldr	r2, [r7, #8]
 8006e16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e1e:	4b19      	ldr	r3, [pc, #100]	; (8006e84 <prvSwitchTimerLists+0xc0>)
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	3304      	adds	r3, #4
 8006e26:	4619      	mov	r1, r3
 8006e28:	4610      	mov	r0, r2
 8006e2a:	f7fd fb0a 	bl	8004442 <vListInsert>
 8006e2e:	e015      	b.n	8006e5c <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e30:	2300      	movs	r3, #0
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	2300      	movs	r3, #0
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	2100      	movs	r1, #0
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f7ff fd68 	bl	8006910 <xTimerGenericCommand>
 8006e40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d109      	bne.n	8006e5c <prvSwitchTimerLists+0x98>
 8006e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e4c:	f383 8811 	msr	BASEPRI, r3
 8006e50:	f3bf 8f6f 	isb	sy
 8006e54:	f3bf 8f4f 	dsb	sy
 8006e58:	603b      	str	r3, [r7, #0]
 8006e5a:	e7fe      	b.n	8006e5a <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e5c:	4b09      	ldr	r3, [pc, #36]	; (8006e84 <prvSwitchTimerLists+0xc0>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1b2      	bne.n	8006dcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e66:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <prvSwitchTimerLists+0xc0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <prvSwitchTimerLists+0xc4>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a04      	ldr	r2, [pc, #16]	; (8006e84 <prvSwitchTimerLists+0xc0>)
 8006e72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e74:	4a04      	ldr	r2, [pc, #16]	; (8006e88 <prvSwitchTimerLists+0xc4>)
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	6013      	str	r3, [r2, #0]
}
 8006e7a:	bf00      	nop
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	20000c24 	.word	0x20000c24
 8006e88:	20000c28 	.word	0x20000c28

08006e8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b082      	sub	sp, #8
 8006e90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e92:	f000 f963 	bl	800715c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e96:	4b15      	ldr	r3, [pc, #84]	; (8006eec <prvCheckForValidListAndQueue+0x60>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d120      	bne.n	8006ee0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e9e:	4814      	ldr	r0, [pc, #80]	; (8006ef0 <prvCheckForValidListAndQueue+0x64>)
 8006ea0:	f7fd fa7e 	bl	80043a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006ea4:	4813      	ldr	r0, [pc, #76]	; (8006ef4 <prvCheckForValidListAndQueue+0x68>)
 8006ea6:	f7fd fa7b 	bl	80043a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006eaa:	4b13      	ldr	r3, [pc, #76]	; (8006ef8 <prvCheckForValidListAndQueue+0x6c>)
 8006eac:	4a10      	ldr	r2, [pc, #64]	; (8006ef0 <prvCheckForValidListAndQueue+0x64>)
 8006eae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006eb0:	4b12      	ldr	r3, [pc, #72]	; (8006efc <prvCheckForValidListAndQueue+0x70>)
 8006eb2:	4a10      	ldr	r2, [pc, #64]	; (8006ef4 <prvCheckForValidListAndQueue+0x68>)
 8006eb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	4b11      	ldr	r3, [pc, #68]	; (8006f00 <prvCheckForValidListAndQueue+0x74>)
 8006ebc:	4a11      	ldr	r2, [pc, #68]	; (8006f04 <prvCheckForValidListAndQueue+0x78>)
 8006ebe:	2110      	movs	r1, #16
 8006ec0:	200a      	movs	r0, #10
 8006ec2:	f7fd fb89 	bl	80045d8 <xQueueGenericCreateStatic>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	4b08      	ldr	r3, [pc, #32]	; (8006eec <prvCheckForValidListAndQueue+0x60>)
 8006eca:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ecc:	4b07      	ldr	r3, [pc, #28]	; (8006eec <prvCheckForValidListAndQueue+0x60>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d005      	beq.n	8006ee0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <prvCheckForValidListAndQueue+0x60>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	490b      	ldr	r1, [pc, #44]	; (8006f08 <prvCheckForValidListAndQueue+0x7c>)
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fb66 	bl	80055ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ee0:	f000 f96a 	bl	80071b8 <vPortExitCritical>
}
 8006ee4:	bf00      	nop
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	20000c2c 	.word	0x20000c2c
 8006ef0:	20000bfc 	.word	0x20000bfc
 8006ef4:	20000c10 	.word	0x20000c10
 8006ef8:	20000c24 	.word	0x20000c24
 8006efc:	20000c28 	.word	0x20000c28
 8006f00:	20000cd8 	.word	0x20000cd8
 8006f04:	20000c38 	.word	0x20000c38
 8006f08:	0800924c 	.word	0x0800924c

08006f0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3b04      	subs	r3, #4
 8006f1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	3b04      	subs	r3, #4
 8006f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	f023 0201 	bic.w	r2, r3, #1
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3b04      	subs	r3, #4
 8006f3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f3c:	4a0c      	ldr	r2, [pc, #48]	; (8006f70 <pxPortInitialiseStack+0x64>)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3b14      	subs	r3, #20
 8006f46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	3b04      	subs	r3, #4
 8006f52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f06f 0202 	mvn.w	r2, #2
 8006f5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3b20      	subs	r3, #32
 8006f60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f62:	68fb      	ldr	r3, [r7, #12]
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	3714      	adds	r7, #20
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr
 8006f70:	08006f75 	.word	0x08006f75

08006f74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f7e:	4b11      	ldr	r3, [pc, #68]	; (8006fc4 <prvTaskExitError+0x50>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f86:	d009      	beq.n	8006f9c <prvTaskExitError+0x28>
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	60fb      	str	r3, [r7, #12]
 8006f9a:	e7fe      	b.n	8006f9a <prvTaskExitError+0x26>
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006fae:	bf00      	nop
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d0fc      	beq.n	8006fb0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006fb6:	bf00      	nop
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	2000000c 	.word	0x2000000c
	...

08006fd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006fd0:	4b07      	ldr	r3, [pc, #28]	; (8006ff0 <pxCurrentTCBConst2>)
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	6808      	ldr	r0, [r1, #0]
 8006fd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fda:	f380 8809 	msr	PSP, r0
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f04f 0000 	mov.w	r0, #0
 8006fe6:	f380 8811 	msr	BASEPRI, r0
 8006fea:	4770      	bx	lr
 8006fec:	f3af 8000 	nop.w

08006ff0 <pxCurrentTCBConst2>:
 8006ff0:	200006f4 	.word	0x200006f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006ff8:	4808      	ldr	r0, [pc, #32]	; (800701c <prvPortStartFirstTask+0x24>)
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	6800      	ldr	r0, [r0, #0]
 8006ffe:	f380 8808 	msr	MSP, r0
 8007002:	f04f 0000 	mov.w	r0, #0
 8007006:	f380 8814 	msr	CONTROL, r0
 800700a:	b662      	cpsie	i
 800700c:	b661      	cpsie	f
 800700e:	f3bf 8f4f 	dsb	sy
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	df00      	svc	0
 8007018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800701a:	bf00      	nop
 800701c:	e000ed08 	.word	0xe000ed08

08007020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b086      	sub	sp, #24
 8007024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007026:	4b44      	ldr	r3, [pc, #272]	; (8007138 <xPortStartScheduler+0x118>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a44      	ldr	r2, [pc, #272]	; (800713c <xPortStartScheduler+0x11c>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d109      	bne.n	8007044 <xPortStartScheduler+0x24>
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	613b      	str	r3, [r7, #16]
 8007042:	e7fe      	b.n	8007042 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007044:	4b3c      	ldr	r3, [pc, #240]	; (8007138 <xPortStartScheduler+0x118>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a3d      	ldr	r2, [pc, #244]	; (8007140 <xPortStartScheduler+0x120>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d109      	bne.n	8007062 <xPortStartScheduler+0x42>
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	60fb      	str	r3, [r7, #12]
 8007060:	e7fe      	b.n	8007060 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007062:	4b38      	ldr	r3, [pc, #224]	; (8007144 <xPortStartScheduler+0x124>)
 8007064:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007066:	697b      	ldr	r3, [r7, #20]
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	b2db      	uxtb	r3, r3
 800706c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	22ff      	movs	r2, #255	; 0xff
 8007072:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800707c:	78fb      	ldrb	r3, [r7, #3]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007084:	b2da      	uxtb	r2, r3
 8007086:	4b30      	ldr	r3, [pc, #192]	; (8007148 <xPortStartScheduler+0x128>)
 8007088:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800708a:	4b30      	ldr	r3, [pc, #192]	; (800714c <xPortStartScheduler+0x12c>)
 800708c:	2207      	movs	r2, #7
 800708e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007090:	e009      	b.n	80070a6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8007092:	4b2e      	ldr	r3, [pc, #184]	; (800714c <xPortStartScheduler+0x12c>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3b01      	subs	r3, #1
 8007098:	4a2c      	ldr	r2, [pc, #176]	; (800714c <xPortStartScheduler+0x12c>)
 800709a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ae:	2b80      	cmp	r3, #128	; 0x80
 80070b0:	d0ef      	beq.n	8007092 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80070b2:	4b26      	ldr	r3, [pc, #152]	; (800714c <xPortStartScheduler+0x12c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f1c3 0307 	rsb	r3, r3, #7
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	d009      	beq.n	80070d2 <xPortStartScheduler+0xb2>
 80070be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	60bb      	str	r3, [r7, #8]
 80070d0:	e7fe      	b.n	80070d0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80070d2:	4b1e      	ldr	r3, [pc, #120]	; (800714c <xPortStartScheduler+0x12c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	021b      	lsls	r3, r3, #8
 80070d8:	4a1c      	ldr	r2, [pc, #112]	; (800714c <xPortStartScheduler+0x12c>)
 80070da:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80070dc:	4b1b      	ldr	r3, [pc, #108]	; (800714c <xPortStartScheduler+0x12c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070e4:	4a19      	ldr	r2, [pc, #100]	; (800714c <xPortStartScheduler+0x12c>)
 80070e6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070f0:	4b17      	ldr	r3, [pc, #92]	; (8007150 <xPortStartScheduler+0x130>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a16      	ldr	r2, [pc, #88]	; (8007150 <xPortStartScheduler+0x130>)
 80070f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070fa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070fc:	4b14      	ldr	r3, [pc, #80]	; (8007150 <xPortStartScheduler+0x130>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a13      	ldr	r2, [pc, #76]	; (8007150 <xPortStartScheduler+0x130>)
 8007102:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007106:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007108:	f000 f8d6 	bl	80072b8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800710c:	4b11      	ldr	r3, [pc, #68]	; (8007154 <xPortStartScheduler+0x134>)
 800710e:	2200      	movs	r2, #0
 8007110:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007112:	f000 f8f5 	bl	8007300 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007116:	4b10      	ldr	r3, [pc, #64]	; (8007158 <xPortStartScheduler+0x138>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a0f      	ldr	r2, [pc, #60]	; (8007158 <xPortStartScheduler+0x138>)
 800711c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007120:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007122:	f7ff ff69 	bl	8006ff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007126:	f7fe fed1 	bl	8005ecc <vTaskSwitchContext>
	prvTaskExitError();
 800712a:	f7ff ff23 	bl	8006f74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800712e:	2300      	movs	r3, #0
}
 8007130:	4618      	mov	r0, r3
 8007132:	3718      	adds	r7, #24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	e000ed00 	.word	0xe000ed00
 800713c:	410fc271 	.word	0x410fc271
 8007140:	410fc270 	.word	0x410fc270
 8007144:	e000e400 	.word	0xe000e400
 8007148:	20000d28 	.word	0x20000d28
 800714c:	20000d2c 	.word	0x20000d2c
 8007150:	e000ed20 	.word	0xe000ed20
 8007154:	2000000c 	.word	0x2000000c
 8007158:	e000ef34 	.word	0xe000ef34

0800715c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007174:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <vPortEnterCritical+0x54>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3301      	adds	r3, #1
 800717a:	4a0d      	ldr	r2, [pc, #52]	; (80071b0 <vPortEnterCritical+0x54>)
 800717c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800717e:	4b0c      	ldr	r3, [pc, #48]	; (80071b0 <vPortEnterCritical+0x54>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d10e      	bne.n	80071a4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007186:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <vPortEnterCritical+0x58>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d009      	beq.n	80071a4 <vPortEnterCritical+0x48>
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	603b      	str	r3, [r7, #0]
 80071a2:	e7fe      	b.n	80071a2 <vPortEnterCritical+0x46>
	}
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	2000000c 	.word	0x2000000c
 80071b4:	e000ed04 	.word	0xe000ed04

080071b8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80071be:	4b11      	ldr	r3, [pc, #68]	; (8007204 <vPortExitCritical+0x4c>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d109      	bne.n	80071da <vPortExitCritical+0x22>
 80071c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	607b      	str	r3, [r7, #4]
 80071d8:	e7fe      	b.n	80071d8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80071da:	4b0a      	ldr	r3, [pc, #40]	; (8007204 <vPortExitCritical+0x4c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3b01      	subs	r3, #1
 80071e0:	4a08      	ldr	r2, [pc, #32]	; (8007204 <vPortExitCritical+0x4c>)
 80071e2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071e4:	4b07      	ldr	r3, [pc, #28]	; (8007204 <vPortExitCritical+0x4c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d104      	bne.n	80071f6 <vPortExitCritical+0x3e>
 80071ec:	2300      	movs	r3, #0
 80071ee:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop
 8007204:	2000000c 	.word	0x2000000c
	...

08007210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007210:	f3ef 8009 	mrs	r0, PSP
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4b15      	ldr	r3, [pc, #84]	; (8007270 <pxCurrentTCBConst>)
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	f01e 0f10 	tst.w	lr, #16
 8007220:	bf08      	it	eq
 8007222:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007226:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007230:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007234:	f380 8811 	msr	BASEPRI, r0
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f7fe fe44 	bl	8005ecc <vTaskSwitchContext>
 8007244:	f04f 0000 	mov.w	r0, #0
 8007248:	f380 8811 	msr	BASEPRI, r0
 800724c:	bc09      	pop	{r0, r3}
 800724e:	6819      	ldr	r1, [r3, #0]
 8007250:	6808      	ldr	r0, [r1, #0]
 8007252:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007256:	f01e 0f10 	tst.w	lr, #16
 800725a:	bf08      	it	eq
 800725c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007260:	f380 8809 	msr	PSP, r0
 8007264:	f3bf 8f6f 	isb	sy
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w

08007270 <pxCurrentTCBConst>:
 8007270:	200006f4 	.word	0x200006f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop

08007278 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007290:	f7fe fd60 	bl	8005d54 <xTaskIncrementTick>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d003      	beq.n	80072a2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800729a:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <SysTick_Handler+0x3c>)
 800729c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	2300      	movs	r3, #0
 80072a4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80072bc:	4b0b      	ldr	r3, [pc, #44]	; (80072ec <vPortSetupTimerInterrupt+0x34>)
 80072be:	2200      	movs	r2, #0
 80072c0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80072c2:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <vPortSetupTimerInterrupt+0x38>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80072c8:	4b0a      	ldr	r3, [pc, #40]	; (80072f4 <vPortSetupTimerInterrupt+0x3c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a0a      	ldr	r2, [pc, #40]	; (80072f8 <vPortSetupTimerInterrupt+0x40>)
 80072ce:	fba2 2303 	umull	r2, r3, r2, r3
 80072d2:	099b      	lsrs	r3, r3, #6
 80072d4:	4a09      	ldr	r2, [pc, #36]	; (80072fc <vPortSetupTimerInterrupt+0x44>)
 80072d6:	3b01      	subs	r3, #1
 80072d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80072da:	4b04      	ldr	r3, [pc, #16]	; (80072ec <vPortSetupTimerInterrupt+0x34>)
 80072dc:	2207      	movs	r2, #7
 80072de:	601a      	str	r2, [r3, #0]
}
 80072e0:	bf00      	nop
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	e000e010 	.word	0xe000e010
 80072f0:	e000e018 	.word	0xe000e018
 80072f4:	20000000 	.word	0x20000000
 80072f8:	10624dd3 	.word	0x10624dd3
 80072fc:	e000e014 	.word	0xe000e014

08007300 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007300:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007310 <vPortEnableVFP+0x10>
 8007304:	6801      	ldr	r1, [r0, #0]
 8007306:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800730a:	6001      	str	r1, [r0, #0]
 800730c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800730e:	bf00      	nop
 8007310:	e000ed88 	.word	0xe000ed88

08007314 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800731a:	f3ef 8305 	mrs	r3, IPSR
 800731e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2b0f      	cmp	r3, #15
 8007324:	d913      	bls.n	800734e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007326:	4a16      	ldr	r2, [pc, #88]	; (8007380 <vPortValidateInterruptPriority+0x6c>)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	4413      	add	r3, r2
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007330:	4b14      	ldr	r3, [pc, #80]	; (8007384 <vPortValidateInterruptPriority+0x70>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	7afa      	ldrb	r2, [r7, #11]
 8007336:	429a      	cmp	r2, r3
 8007338:	d209      	bcs.n	800734e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800733a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733e:	f383 8811 	msr	BASEPRI, r3
 8007342:	f3bf 8f6f 	isb	sy
 8007346:	f3bf 8f4f 	dsb	sy
 800734a:	607b      	str	r3, [r7, #4]
 800734c:	e7fe      	b.n	800734c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800734e:	4b0e      	ldr	r3, [pc, #56]	; (8007388 <vPortValidateInterruptPriority+0x74>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007356:	4b0d      	ldr	r3, [pc, #52]	; (800738c <vPortValidateInterruptPriority+0x78>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d909      	bls.n	8007372 <vPortValidateInterruptPriority+0x5e>
 800735e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	e7fe      	b.n	8007370 <vPortValidateInterruptPriority+0x5c>
	}
 8007372:	bf00      	nop
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	e000e3f0 	.word	0xe000e3f0
 8007384:	20000d28 	.word	0x20000d28
 8007388:	e000ed0c 	.word	0xe000ed0c
 800738c:	20000d2c 	.word	0x20000d2c

08007390 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b08a      	sub	sp, #40	; 0x28
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800739c:	f7fe fc0a 	bl	8005bb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80073a0:	4b57      	ldr	r3, [pc, #348]	; (8007500 <pvPortMalloc+0x170>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d101      	bne.n	80073ac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80073a8:	f000 f90c 	bl	80075c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80073ac:	4b55      	ldr	r3, [pc, #340]	; (8007504 <pvPortMalloc+0x174>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	4013      	ands	r3, r2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f040 808c 	bne.w	80074d2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d01c      	beq.n	80073fa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80073c0:	2208      	movs	r2, #8
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4413      	add	r3, r2
 80073c6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f003 0307 	and.w	r3, r3, #7
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d013      	beq.n	80073fa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f023 0307 	bic.w	r3, r3, #7
 80073d8:	3308      	adds	r3, #8
 80073da:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f003 0307 	and.w	r3, r3, #7
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d009      	beq.n	80073fa <pvPortMalloc+0x6a>
 80073e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ea:	f383 8811 	msr	BASEPRI, r3
 80073ee:	f3bf 8f6f 	isb	sy
 80073f2:	f3bf 8f4f 	dsb	sy
 80073f6:	617b      	str	r3, [r7, #20]
 80073f8:	e7fe      	b.n	80073f8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d068      	beq.n	80074d2 <pvPortMalloc+0x142>
 8007400:	4b41      	ldr	r3, [pc, #260]	; (8007508 <pvPortMalloc+0x178>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	429a      	cmp	r2, r3
 8007408:	d863      	bhi.n	80074d2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800740a:	4b40      	ldr	r3, [pc, #256]	; (800750c <pvPortMalloc+0x17c>)
 800740c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800740e:	4b3f      	ldr	r3, [pc, #252]	; (800750c <pvPortMalloc+0x17c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007414:	e004      	b.n	8007420 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007418:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	429a      	cmp	r2, r3
 8007428:	d903      	bls.n	8007432 <pvPortMalloc+0xa2>
 800742a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d1f1      	bne.n	8007416 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007432:	4b33      	ldr	r3, [pc, #204]	; (8007500 <pvPortMalloc+0x170>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007438:	429a      	cmp	r2, r3
 800743a:	d04a      	beq.n	80074d2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800743c:	6a3b      	ldr	r3, [r7, #32]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2208      	movs	r2, #8
 8007442:	4413      	add	r3, r2
 8007444:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007450:	685a      	ldr	r2, [r3, #4]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	1ad2      	subs	r2, r2, r3
 8007456:	2308      	movs	r3, #8
 8007458:	005b      	lsls	r3, r3, #1
 800745a:	429a      	cmp	r2, r3
 800745c:	d91e      	bls.n	800749c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800745e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4413      	add	r3, r2
 8007464:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007466:	69bb      	ldr	r3, [r7, #24]
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	2b00      	cmp	r3, #0
 800746e:	d009      	beq.n	8007484 <pvPortMalloc+0xf4>
 8007470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	e7fe      	b.n	8007482 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	1ad2      	subs	r2, r2, r3
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007496:	69b8      	ldr	r0, [r7, #24]
 8007498:	f000 f8f6 	bl	8007688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800749c:	4b1a      	ldr	r3, [pc, #104]	; (8007508 <pvPortMalloc+0x178>)
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	1ad3      	subs	r3, r2, r3
 80074a6:	4a18      	ldr	r2, [pc, #96]	; (8007508 <pvPortMalloc+0x178>)
 80074a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80074aa:	4b17      	ldr	r3, [pc, #92]	; (8007508 <pvPortMalloc+0x178>)
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	4b18      	ldr	r3, [pc, #96]	; (8007510 <pvPortMalloc+0x180>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d203      	bcs.n	80074be <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80074b6:	4b14      	ldr	r3, [pc, #80]	; (8007508 <pvPortMalloc+0x178>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a15      	ldr	r2, [pc, #84]	; (8007510 <pvPortMalloc+0x180>)
 80074bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80074be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	4b10      	ldr	r3, [pc, #64]	; (8007504 <pvPortMalloc+0x174>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	431a      	orrs	r2, r3
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80074cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074d2:	f7fe fb7d 	bl	8005bd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d009      	beq.n	80074f4 <pvPortMalloc+0x164>
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	e7fe      	b.n	80074f2 <pvPortMalloc+0x162>
	return pvReturn;
 80074f4:	69fb      	ldr	r3, [r7, #28]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3728      	adds	r7, #40	; 0x28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20004938 	.word	0x20004938
 8007504:	20004944 	.word	0x20004944
 8007508:	2000493c 	.word	0x2000493c
 800750c:	20004930 	.word	0x20004930
 8007510:	20004940 	.word	0x20004940

08007514 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d046      	beq.n	80075b4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007526:	2308      	movs	r3, #8
 8007528:	425b      	negs	r3, r3
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	4413      	add	r3, r2
 800752e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	4b20      	ldr	r3, [pc, #128]	; (80075bc <vPortFree+0xa8>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4013      	ands	r3, r2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d109      	bne.n	8007556 <vPortFree+0x42>
 8007542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	60fb      	str	r3, [r7, #12]
 8007554:	e7fe      	b.n	8007554 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d009      	beq.n	8007572 <vPortFree+0x5e>
 800755e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	60bb      	str	r3, [r7, #8]
 8007570:	e7fe      	b.n	8007570 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	4b11      	ldr	r3, [pc, #68]	; (80075bc <vPortFree+0xa8>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d019      	beq.n	80075b4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d115      	bne.n	80075b4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <vPortFree+0xa8>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	43db      	mvns	r3, r3
 8007592:	401a      	ands	r2, r3
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007598:	f7fe fb0c 	bl	8005bb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	685a      	ldr	r2, [r3, #4]
 80075a0:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <vPortFree+0xac>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4413      	add	r3, r2
 80075a6:	4a06      	ldr	r2, [pc, #24]	; (80075c0 <vPortFree+0xac>)
 80075a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80075aa:	6938      	ldr	r0, [r7, #16]
 80075ac:	f000 f86c 	bl	8007688 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80075b0:	f7fe fb0e 	bl	8005bd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80075b4:	bf00      	nop
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20004944 	.word	0x20004944
 80075c0:	2000493c 	.word	0x2000493c

080075c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80075ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075d0:	4b27      	ldr	r3, [pc, #156]	; (8007670 <prvHeapInit+0xac>)
 80075d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d00c      	beq.n	80075f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3307      	adds	r3, #7
 80075e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0307 	bic.w	r3, r3, #7
 80075ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	1ad3      	subs	r3, r2, r3
 80075f2:	4a1f      	ldr	r2, [pc, #124]	; (8007670 <prvHeapInit+0xac>)
 80075f4:	4413      	add	r3, r2
 80075f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075fc:	4a1d      	ldr	r2, [pc, #116]	; (8007674 <prvHeapInit+0xb0>)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007602:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <prvHeapInit+0xb0>)
 8007604:	2200      	movs	r2, #0
 8007606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	4413      	add	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007610:	2208      	movs	r2, #8
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1a9b      	subs	r3, r3, r2
 8007616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f023 0307 	bic.w	r3, r3, #7
 800761e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	4a15      	ldr	r2, [pc, #84]	; (8007678 <prvHeapInit+0xb4>)
 8007624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007626:	4b14      	ldr	r3, [pc, #80]	; (8007678 <prvHeapInit+0xb4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800762e:	4b12      	ldr	r3, [pc, #72]	; (8007678 <prvHeapInit+0xb4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007644:	4b0c      	ldr	r3, [pc, #48]	; (8007678 <prvHeapInit+0xb4>)
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	4a0a      	ldr	r2, [pc, #40]	; (800767c <prvHeapInit+0xb8>)
 8007652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	4a09      	ldr	r2, [pc, #36]	; (8007680 <prvHeapInit+0xbc>)
 800765a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800765c:	4b09      	ldr	r3, [pc, #36]	; (8007684 <prvHeapInit+0xc0>)
 800765e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007662:	601a      	str	r2, [r3, #0]
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr
 8007670:	20000d30 	.word	0x20000d30
 8007674:	20004930 	.word	0x20004930
 8007678:	20004938 	.word	0x20004938
 800767c:	20004940 	.word	0x20004940
 8007680:	2000493c 	.word	0x2000493c
 8007684:	20004944 	.word	0x20004944

08007688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007690:	4b28      	ldr	r3, [pc, #160]	; (8007734 <prvInsertBlockIntoFreeList+0xac>)
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e002      	b.n	800769c <prvInsertBlockIntoFreeList+0x14>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d8f7      	bhi.n	8007696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	4413      	add	r3, r2
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d108      	bne.n	80076ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	441a      	add	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	441a      	add	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d118      	bne.n	8007710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681a      	ldr	r2, [r3, #0]
 80076e2:	4b15      	ldr	r3, [pc, #84]	; (8007738 <prvInsertBlockIntoFreeList+0xb0>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d00d      	beq.n	8007706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	441a      	add	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	e008      	b.n	8007718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007706:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <prvInsertBlockIntoFreeList+0xb0>)
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	e003      	b.n	8007718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d002      	beq.n	8007726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007726:	bf00      	nop
 8007728:	3714      	adds	r7, #20
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	20004930 	.word	0x20004930
 8007738:	20004938 	.word	0x20004938

0800773c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8007742:	4b24      	ldr	r3, [pc, #144]	; (80077d4 <_DoInit+0x98>)
 8007744:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2203      	movs	r2, #3
 800774a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2203      	movs	r2, #3
 8007750:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a20      	ldr	r2, [pc, #128]	; (80077d8 <_DoInit+0x9c>)
 8007756:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a20      	ldr	r2, [pc, #128]	; (80077dc <_DoInit+0xa0>)
 800775c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007764:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2200      	movs	r2, #0
 800776a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <_DoInit+0x9c>)
 800777c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	4a17      	ldr	r2, [pc, #92]	; (80077e0 <_DoInit+0xa4>)
 8007782:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2210      	movs	r2, #16
 8007788:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2200      	movs	r2, #0
 800779a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	3307      	adds	r3, #7
 80077a0:	4a10      	ldr	r2, [pc, #64]	; (80077e4 <_DoInit+0xa8>)
 80077a2:	6810      	ldr	r0, [r2, #0]
 80077a4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80077a6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4a0e      	ldr	r2, [pc, #56]	; (80077e8 <_DoInit+0xac>)
 80077ae:	6810      	ldr	r0, [r2, #0]
 80077b0:	6018      	str	r0, [r3, #0]
 80077b2:	8891      	ldrh	r1, [r2, #4]
 80077b4:	7992      	ldrb	r2, [r2, #6]
 80077b6:	8099      	strh	r1, [r3, #4]
 80077b8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80077ba:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2220      	movs	r2, #32
 80077c2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80077c4:	f3bf 8f5f 	dmb	sy
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	20005530 	.word	0x20005530
 80077d8:	08009254 	.word	0x08009254
 80077dc:	20004948 	.word	0x20004948
 80077e0:	20004d48 	.word	0x20004d48
 80077e4:	08009260 	.word	0x08009260
 80077e8:	08009264 	.word	0x08009264

080077ec <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08c      	sub	sp, #48	; 0x30
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80077f8:	4b3e      	ldr	r3, [pc, #248]	; (80078f4 <SEGGER_RTT_ReadNoLock+0x108>)
 80077fa:	623b      	str	r3, [r7, #32]
 80077fc:	6a3b      	ldr	r3, [r7, #32]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b00      	cmp	r3, #0
 8007804:	d101      	bne.n	800780a <SEGGER_RTT_ReadNoLock+0x1e>
 8007806:	f7ff ff99 	bl	800773c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4613      	mov	r3, r2
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	3360      	adds	r3, #96	; 0x60
 8007816:	4a37      	ldr	r2, [pc, #220]	; (80078f4 <SEGGER_RTT_ReadNoLock+0x108>)
 8007818:	4413      	add	r3, r2
 800781a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8007820:	69fb      	ldr	r3, [r7, #28]
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8007826:	69fb      	ldr	r3, [r7, #28]
 8007828:	68db      	ldr	r3, [r3, #12]
 800782a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800782c:	2300      	movs	r3, #0
 800782e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8007830:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	429a      	cmp	r2, r3
 8007836:	d92b      	bls.n	8007890 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783e:	1ad3      	subs	r3, r2, r3
 8007840:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007842:	697a      	ldr	r2, [r7, #20]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4293      	cmp	r3, r2
 8007848:	bf28      	it	cs
 800784a:	4613      	movcs	r3, r2
 800784c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007854:	4413      	add	r3, r2
 8007856:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	6939      	ldr	r1, [r7, #16]
 800785c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800785e:	f001 fc90 	bl	8009182 <memcpy>
    NumBytesRead += NumBytesRem;
 8007862:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800786a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	4413      	add	r3, r2
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	1ad3      	subs	r3, r2, r3
 8007878:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800787a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	4413      	add	r3, r2
 8007880:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8007882:	69fb      	ldr	r3, [r7, #28]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007888:	429a      	cmp	r2, r3
 800788a:	d101      	bne.n	8007890 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800788c:	2300      	movs	r3, #0
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8007890:	69ba      	ldr	r2, [r7, #24]
 8007892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8007898:	697a      	ldr	r2, [r7, #20]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4293      	cmp	r3, r2
 800789e:	bf28      	it	cs
 80078a0:	4613      	movcs	r3, r2
 80078a2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d019      	beq.n	80078de <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	685a      	ldr	r2, [r3, #4]
 80078ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b0:	4413      	add	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80078b4:	697a      	ldr	r2, [r7, #20]
 80078b6:	6939      	ldr	r1, [r7, #16]
 80078b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078ba:	f001 fc62 	bl	8009182 <memcpy>
    NumBytesRead += NumBytesRem;
 80078be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	4413      	add	r3, r2
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80078c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	4413      	add	r3, r2
 80078cc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80078d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	4413      	add	r3, r2
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80078de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078e8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80078ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3730      	adds	r7, #48	; 0x30
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20005530 	.word	0x20005530

080078f8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b088      	sub	sp, #32
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
 8007904:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007906:	4b3d      	ldr	r3, [pc, #244]	; (80079fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007908:	61bb      	str	r3, [r7, #24]
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d101      	bne.n	8007918 <SEGGER_RTT_AllocUpBuffer+0x20>
 8007914:	f7ff ff12 	bl	800773c <_DoInit>
  SEGGER_RTT_LOCK();
 8007918:	f3ef 8311 	mrs	r3, BASEPRI
 800791c:	f04f 0120 	mov.w	r1, #32
 8007920:	f381 8811 	msr	BASEPRI, r1
 8007924:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007926:	4b35      	ldr	r3, [pc, #212]	; (80079fc <SEGGER_RTT_AllocUpBuffer+0x104>)
 8007928:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800792e:	6939      	ldr	r1, [r7, #16]
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	1c5a      	adds	r2, r3, #1
 8007934:	4613      	mov	r3, r2
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	4413      	add	r3, r2
 800793a:	00db      	lsls	r3, r3, #3
 800793c:	440b      	add	r3, r1
 800793e:	3304      	adds	r3, #4
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d008      	beq.n	8007958 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	3301      	adds	r3, #1
 800794a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	691b      	ldr	r3, [r3, #16]
 8007950:	69fa      	ldr	r2, [r7, #28]
 8007952:	429a      	cmp	r2, r3
 8007954:	dbeb      	blt.n	800792e <SEGGER_RTT_AllocUpBuffer+0x36>
 8007956:	e000      	b.n	800795a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8007958:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	691b      	ldr	r3, [r3, #16]
 800795e:	69fa      	ldr	r2, [r7, #28]
 8007960:	429a      	cmp	r2, r3
 8007962:	da3f      	bge.n	80079e4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8007964:	6939      	ldr	r1, [r7, #16]
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	4613      	mov	r3, r2
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	4413      	add	r3, r2
 8007970:	00db      	lsls	r3, r3, #3
 8007972:	440b      	add	r3, r1
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8007978:	6939      	ldr	r1, [r7, #16]
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	1c5a      	adds	r2, r3, #1
 800797e:	4613      	mov	r3, r2
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	4413      	add	r3, r2
 8007984:	00db      	lsls	r3, r3, #3
 8007986:	440b      	add	r3, r1
 8007988:	3304      	adds	r3, #4
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800798e:	6939      	ldr	r1, [r7, #16]
 8007990:	69fa      	ldr	r2, [r7, #28]
 8007992:	4613      	mov	r3, r2
 8007994:	005b      	lsls	r3, r3, #1
 8007996:	4413      	add	r3, r2
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	440b      	add	r3, r1
 800799c:	3320      	adds	r3, #32
 800799e:	687a      	ldr	r2, [r7, #4]
 80079a0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80079a2:	6939      	ldr	r1, [r7, #16]
 80079a4:	69fa      	ldr	r2, [r7, #28]
 80079a6:	4613      	mov	r3, r2
 80079a8:	005b      	lsls	r3, r3, #1
 80079aa:	4413      	add	r3, r2
 80079ac:	00db      	lsls	r3, r3, #3
 80079ae:	440b      	add	r3, r1
 80079b0:	3328      	adds	r3, #40	; 0x28
 80079b2:	2200      	movs	r2, #0
 80079b4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80079b6:	6939      	ldr	r1, [r7, #16]
 80079b8:	69fa      	ldr	r2, [r7, #28]
 80079ba:	4613      	mov	r3, r2
 80079bc:	005b      	lsls	r3, r3, #1
 80079be:	4413      	add	r3, r2
 80079c0:	00db      	lsls	r3, r3, #3
 80079c2:	440b      	add	r3, r1
 80079c4:	3324      	adds	r3, #36	; 0x24
 80079c6:	2200      	movs	r2, #0
 80079c8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80079ca:	6939      	ldr	r1, [r7, #16]
 80079cc:	69fa      	ldr	r2, [r7, #28]
 80079ce:	4613      	mov	r3, r2
 80079d0:	005b      	lsls	r3, r3, #1
 80079d2:	4413      	add	r3, r2
 80079d4:	00db      	lsls	r3, r3, #3
 80079d6:	440b      	add	r3, r1
 80079d8:	332c      	adds	r3, #44	; 0x2c
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80079de:	f3bf 8f5f 	dmb	sy
 80079e2:	e002      	b.n	80079ea <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80079e4:	f04f 33ff 	mov.w	r3, #4294967295
 80079e8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80079f0:	69fb      	ldr	r3, [r7, #28]
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3720      	adds	r7, #32
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	20005530 	.word	0x20005530

08007a00 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b088      	sub	sp, #32
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	60f8      	str	r0, [r7, #12]
 8007a08:	60b9      	str	r1, [r7, #8]
 8007a0a:	607a      	str	r2, [r7, #4]
 8007a0c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8007a0e:	4b33      	ldr	r3, [pc, #204]	; (8007adc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8007a10:	61bb      	str	r3, [r7, #24]
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	781b      	ldrb	r3, [r3, #0]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d101      	bne.n	8007a20 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8007a1c:	f7ff fe8e 	bl	800773c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8007a20:	4b2e      	ldr	r3, [pc, #184]	; (8007adc <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8007a22:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	461a      	mov	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d24d      	bcs.n	8007acc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8007a30:	f3ef 8311 	mrs	r3, BASEPRI
 8007a34:	f04f 0120 	mov.w	r1, #32
 8007a38:	f381 8811 	msr	BASEPRI, r1
 8007a3c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d031      	beq.n	8007aa8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8007a44:	6979      	ldr	r1, [r7, #20]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	005b      	lsls	r3, r3, #1
 8007a4c:	4413      	add	r3, r2
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	440b      	add	r3, r1
 8007a52:	3360      	adds	r3, #96	; 0x60
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8007a58:	6979      	ldr	r1, [r7, #20]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	005b      	lsls	r3, r3, #1
 8007a60:	4413      	add	r3, r2
 8007a62:	00db      	lsls	r3, r3, #3
 8007a64:	440b      	add	r3, r1
 8007a66:	3364      	adds	r3, #100	; 0x64
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8007a6c:	6979      	ldr	r1, [r7, #20]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	4613      	mov	r3, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	4413      	add	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	440b      	add	r3, r1
 8007a7a:	3368      	adds	r3, #104	; 0x68
 8007a7c:	683a      	ldr	r2, [r7, #0]
 8007a7e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8007a80:	6979      	ldr	r1, [r7, #20]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	4613      	mov	r3, r2
 8007a86:	005b      	lsls	r3, r3, #1
 8007a88:	4413      	add	r3, r2
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	440b      	add	r3, r1
 8007a8e:	3370      	adds	r3, #112	; 0x70
 8007a90:	2200      	movs	r2, #0
 8007a92:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8007a94:	6979      	ldr	r1, [r7, #20]
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	4413      	add	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	440b      	add	r3, r1
 8007aa2:	336c      	adds	r3, #108	; 0x6c
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8007aa8:	6979      	ldr	r1, [r7, #20]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	4613      	mov	r3, r2
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	4413      	add	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	440b      	add	r3, r1
 8007ab6:	3374      	adds	r3, #116	; 0x74
 8007ab8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007aba:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8007abc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61fb      	str	r3, [r7, #28]
 8007aca:	e002      	b.n	8007ad2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8007acc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8007ad2:	69fb      	ldr	r3, [r7, #28]
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3720      	adds	r7, #32
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	20005530 	.word	0x20005530

08007ae0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8007aec:	2300      	movs	r3, #0
 8007aee:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007af0:	e002      	b.n	8007af8 <_EncodeStr+0x18>
    Len++;
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	3301      	adds	r3, #1
 8007af6:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	4413      	add	r3, r2
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1f6      	bne.n	8007af2 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d901      	bls.n	8007b10 <_EncodeStr+0x30>
    Len = Limit;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	2bfe      	cmp	r3, #254	; 0xfe
 8007b14:	d806      	bhi.n	8007b24 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	1c5a      	adds	r2, r3, #1
 8007b1a:	60fa      	str	r2, [r7, #12]
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	b2d2      	uxtb	r2, r2
 8007b20:	701a      	strb	r2, [r3, #0]
 8007b22:	e011      	b.n	8007b48 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	60fa      	str	r2, [r7, #12]
 8007b2a:	22ff      	movs	r2, #255	; 0xff
 8007b2c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	60fa      	str	r2, [r7, #12]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	b2d2      	uxtb	r2, r2
 8007b38:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	0a19      	lsrs	r1, r3, #8
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	60fa      	str	r2, [r7, #12]
 8007b44:	b2ca      	uxtb	r2, r1
 8007b46:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8007b48:	2300      	movs	r3, #0
 8007b4a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007b4c:	e00a      	b.n	8007b64 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8007b4e:	68ba      	ldr	r2, [r7, #8]
 8007b50:	1c53      	adds	r3, r2, #1
 8007b52:	60bb      	str	r3, [r7, #8]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	1c59      	adds	r1, r3, #1
 8007b58:	60f9      	str	r1, [r7, #12]
 8007b5a:	7812      	ldrb	r2, [r2, #0]
 8007b5c:	701a      	strb	r2, [r3, #0]
    n++;
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	3301      	adds	r3, #1
 8007b62:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d3f0      	bcc.n	8007b4e <_EncodeStr+0x6e>
  }
  return pPayload;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	371c      	adds	r7, #28
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr

08007b7a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8007b7a:	b480      	push	{r7}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3304      	adds	r3, #4
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
	...

08007b94 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007b9a:	4b33      	ldr	r3, [pc, #204]	; (8007c68 <_HandleIncomingPacket+0xd4>)
 8007b9c:	7e1b      	ldrb	r3, [r3, #24]
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	1cfb      	adds	r3, r7, #3
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	f7ff fe21 	bl	80077ec <SEGGER_RTT_ReadNoLock>
 8007baa:	4603      	mov	r3, r0
 8007bac:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	dd4d      	ble.n	8007c50 <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8007bb4:	78fb      	ldrb	r3, [r7, #3]
 8007bb6:	2b05      	cmp	r3, #5
 8007bb8:	d022      	beq.n	8007c00 <_HandleIncomingPacket+0x6c>
 8007bba:	2b05      	cmp	r3, #5
 8007bbc:	dc0b      	bgt.n	8007bd6 <_HandleIncomingPacket+0x42>
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d015      	beq.n	8007bee <_HandleIncomingPacket+0x5a>
 8007bc2:	2b02      	cmp	r3, #2
 8007bc4:	dc02      	bgt.n	8007bcc <_HandleIncomingPacket+0x38>
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d00e      	beq.n	8007be8 <_HandleIncomingPacket+0x54>
 8007bca:	e034      	b.n	8007c36 <_HandleIncomingPacket+0xa2>
 8007bcc:	2b03      	cmp	r3, #3
 8007bce:	d011      	beq.n	8007bf4 <_HandleIncomingPacket+0x60>
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d012      	beq.n	8007bfa <_HandleIncomingPacket+0x66>
 8007bd4:	e02f      	b.n	8007c36 <_HandleIncomingPacket+0xa2>
 8007bd6:	2b07      	cmp	r3, #7
 8007bd8:	d018      	beq.n	8007c0c <_HandleIncomingPacket+0x78>
 8007bda:	2b07      	cmp	r3, #7
 8007bdc:	db13      	blt.n	8007c06 <_HandleIncomingPacket+0x72>
 8007bde:	2b7f      	cmp	r3, #127	; 0x7f
 8007be0:	d038      	beq.n	8007c54 <_HandleIncomingPacket+0xc0>
 8007be2:	2b80      	cmp	r3, #128	; 0x80
 8007be4:	d015      	beq.n	8007c12 <_HandleIncomingPacket+0x7e>
 8007be6:	e026      	b.n	8007c36 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8007be8:	f000 fba8 	bl	800833c <SEGGER_SYSVIEW_Start>
      break;
 8007bec:	e037      	b.n	8007c5e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8007bee:	f000 fc5f 	bl	80084b0 <SEGGER_SYSVIEW_Stop>
      break;
 8007bf2:	e034      	b.n	8007c5e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8007bf4:	f000 fe38 	bl	8008868 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8007bf8:	e031      	b.n	8007c5e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8007bfa:	f000 fdfd 	bl	80087f8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8007bfe:	e02e      	b.n	8007c5e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8007c00:	f000 fc7c 	bl	80084fc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8007c04:	e02b      	b.n	8007c5e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8007c06:	f001 f84d 	bl	8008ca4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8007c0a:	e028      	b.n	8007c5e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8007c0c:	f001 f82c 	bl	8008c68 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8007c10:	e025      	b.n	8007c5e <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007c12:	4b15      	ldr	r3, [pc, #84]	; (8007c68 <_HandleIncomingPacket+0xd4>)
 8007c14:	7e1b      	ldrb	r3, [r3, #24]
 8007c16:	4618      	mov	r0, r3
 8007c18:	1cfb      	adds	r3, r7, #3
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	f7ff fde5 	bl	80077ec <SEGGER_RTT_ReadNoLock>
 8007c22:	4603      	mov	r3, r0
 8007c24:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	dd15      	ble.n	8007c58 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8007c2c:	78fb      	ldrb	r3, [r7, #3]
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 ff9a 	bl	8008b68 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8007c34:	e010      	b.n	8007c58 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8007c36:	78fb      	ldrb	r3, [r7, #3]
 8007c38:	b25b      	sxtb	r3, r3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	da0e      	bge.n	8007c5c <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8007c3e:	4b0a      	ldr	r3, [pc, #40]	; (8007c68 <_HandleIncomingPacket+0xd4>)
 8007c40:	7e1b      	ldrb	r3, [r3, #24]
 8007c42:	4618      	mov	r0, r3
 8007c44:	1cfb      	adds	r3, r7, #3
 8007c46:	2201      	movs	r2, #1
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f7ff fdcf 	bl	80077ec <SEGGER_RTT_ReadNoLock>
      }
      break;
 8007c4e:	e005      	b.n	8007c5c <_HandleIncomingPacket+0xc8>
    }
  }
 8007c50:	bf00      	nop
 8007c52:	e004      	b.n	8007c5e <_HandleIncomingPacket+0xca>
      break;
 8007c54:	bf00      	nop
 8007c56:	e002      	b.n	8007c5e <_HandleIncomingPacket+0xca>
      break;
 8007c58:	bf00      	nop
 8007c5a:	e000      	b.n	8007c5e <_HandleIncomingPacket+0xca>
      break;
 8007c5c:	bf00      	nop
}
 8007c5e:	bf00      	nop
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	20005160 	.word	0x20005160

08007c6c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b08c      	sub	sp, #48	; 0x30
 8007c70:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8007c72:	2301      	movs	r3, #1
 8007c74:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8007c76:	1d3b      	adds	r3, r7, #4
 8007c78:	3301      	adds	r3, #1
 8007c7a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c80:	4b31      	ldr	r3, [pc, #196]	; (8007d48 <_TrySendOverflowPacket+0xdc>)
 8007c82:	695b      	ldr	r3, [r3, #20]
 8007c84:	62bb      	str	r3, [r7, #40]	; 0x28
 8007c86:	e00b      	b.n	8007ca0 <_TrySendOverflowPacket+0x34>
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c8e:	1c59      	adds	r1, r3, #1
 8007c90:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007c92:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007c96:	b2d2      	uxtb	r2, r2
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c9c:	09db      	lsrs	r3, r3, #7
 8007c9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ca4:	d8f0      	bhi.n	8007c88 <_TrySendOverflowPacket+0x1c>
 8007ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ca8:	1c5a      	adds	r2, r3, #1
 8007caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cae:	b2d2      	uxtb	r2, r2
 8007cb0:	701a      	strb	r2, [r3, #0]
 8007cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007cb6:	4b25      	ldr	r3, [pc, #148]	; (8007d4c <_TrySendOverflowPacket+0xe0>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007cbc:	4b22      	ldr	r3, [pc, #136]	; (8007d48 <_TrySendOverflowPacket+0xdc>)
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8007cc6:	69fb      	ldr	r3, [r7, #28]
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007cca:	697b      	ldr	r3, [r7, #20]
 8007ccc:	623b      	str	r3, [r7, #32]
 8007cce:	e00b      	b.n	8007ce8 <_TrySendOverflowPacket+0x7c>
 8007cd0:	6a3b      	ldr	r3, [r7, #32]
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	1c59      	adds	r1, r3, #1
 8007cd8:	6279      	str	r1, [r7, #36]	; 0x24
 8007cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007cde:	b2d2      	uxtb	r2, r2
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	09db      	lsrs	r3, r3, #7
 8007ce6:	623b      	str	r3, [r7, #32]
 8007ce8:	6a3b      	ldr	r3, [r7, #32]
 8007cea:	2b7f      	cmp	r3, #127	; 0x7f
 8007cec:	d8f0      	bhi.n	8007cd0 <_TrySendOverflowPacket+0x64>
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	1c5a      	adds	r2, r3, #1
 8007cf2:	627a      	str	r2, [r7, #36]	; 0x24
 8007cf4:	6a3a      	ldr	r2, [r7, #32]
 8007cf6:	b2d2      	uxtb	r2, r2
 8007cf8:	701a      	strb	r2, [r3, #0]
 8007cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8007cfe:	4b12      	ldr	r3, [pc, #72]	; (8007d48 <_TrySendOverflowPacket+0xdc>)
 8007d00:	785b      	ldrb	r3, [r3, #1]
 8007d02:	4618      	mov	r0, r3
 8007d04:	69fa      	ldr	r2, [r7, #28]
 8007d06:	1d3b      	adds	r3, r7, #4
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	1d3b      	adds	r3, r7, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	f7f8 fa5e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007d14:	4603      	mov	r3, r0
 8007d16:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d009      	beq.n	8007d32 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007d1e:	4a0a      	ldr	r2, [pc, #40]	; (8007d48 <_TrySendOverflowPacket+0xdc>)
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8007d24:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <_TrySendOverflowPacket+0xdc>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	b2da      	uxtb	r2, r3
 8007d2c:	4b06      	ldr	r3, [pc, #24]	; (8007d48 <_TrySendOverflowPacket+0xdc>)
 8007d2e:	701a      	strb	r2, [r3, #0]
 8007d30:	e004      	b.n	8007d3c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8007d32:	4b05      	ldr	r3, [pc, #20]	; (8007d48 <_TrySendOverflowPacket+0xdc>)
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	3301      	adds	r3, #1
 8007d38:	4a03      	ldr	r2, [pc, #12]	; (8007d48 <_TrySendOverflowPacket+0xdc>)
 8007d3a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8007d3c:	693b      	ldr	r3, [r7, #16]
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3730      	adds	r7, #48	; 0x30
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	20005160 	.word	0x20005160
 8007d4c:	e0001004 	.word	0xe0001004

08007d50 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	; 0x28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8007d5c:	4b6c      	ldr	r3, [pc, #432]	; (8007f10 <_SendPacket+0x1c0>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d010      	beq.n	8007d86 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8007d64:	4b6a      	ldr	r3, [pc, #424]	; (8007f10 <_SendPacket+0x1c0>)
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 80a3 	beq.w	8007eb4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8007d6e:	4b68      	ldr	r3, [pc, #416]	; (8007f10 <_SendPacket+0x1c0>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d109      	bne.n	8007d8a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8007d76:	f7ff ff79 	bl	8007c6c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8007d7a:	4b65      	ldr	r3, [pc, #404]	; (8007f10 <_SendPacket+0x1c0>)
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	f040 809a 	bne.w	8007eb8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8007d84:	e001      	b.n	8007d8a <_SendPacket+0x3a>
    goto Send;
 8007d86:	bf00      	nop
 8007d88:	e000      	b.n	8007d8c <_SendPacket+0x3c>
Send:
 8007d8a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2b1f      	cmp	r3, #31
 8007d90:	d809      	bhi.n	8007da6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8007d92:	4b5f      	ldr	r3, [pc, #380]	; (8007f10 <_SendPacket+0x1c0>)
 8007d94:	69da      	ldr	r2, [r3, #28]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	fa22 f303 	lsr.w	r3, r2, r3
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	f040 808b 	bne.w	8007ebc <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b17      	cmp	r3, #23
 8007daa:	d807      	bhi.n	8007dbc <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	60fb      	str	r3, [r7, #12]
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	701a      	strb	r2, [r3, #0]
 8007dba:	e03d      	b.n	8007e38 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8007dbc:	68ba      	ldr	r2, [r7, #8]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	2b7f      	cmp	r3, #127	; 0x7f
 8007dc8:	d912      	bls.n	8007df0 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	09da      	lsrs	r2, r3, #7
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	b2d2      	uxtb	r2, r2
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	68fa      	ldr	r2, [r7, #12]
 8007de0:	3a01      	subs	r2, #1
 8007de2:	60fa      	str	r2, [r7, #12]
 8007de4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007de8:	b2da      	uxtb	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	701a      	strb	r2, [r3, #0]
 8007dee:	e006      	b.n	8007dfe <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	3b01      	subs	r3, #1
 8007df4:	60fb      	str	r3, [r7, #12]
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b7f      	cmp	r3, #127	; 0x7f
 8007e02:	d912      	bls.n	8007e2a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	09da      	lsrs	r2, r3, #7
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	60fb      	str	r3, [r7, #12]
 8007e0e:	b2d2      	uxtb	r2, r2
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	68fa      	ldr	r2, [r7, #12]
 8007e1a:	3a01      	subs	r2, #1
 8007e1c:	60fa      	str	r2, [r7, #12]
 8007e1e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	701a      	strb	r2, [r3, #0]
 8007e28:	e006      	b.n	8007e38 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	60fb      	str	r3, [r7, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007e38:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <_SendPacket+0x1c4>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8007e3e:	4b34      	ldr	r3, [pc, #208]	; (8007f10 <_SendPacket+0x1c0>)
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	623b      	str	r3, [r7, #32]
 8007e50:	e00b      	b.n	8007e6a <_SendPacket+0x11a>
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	1c59      	adds	r1, r3, #1
 8007e5a:	6279      	str	r1, [r7, #36]	; 0x24
 8007e5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007e60:	b2d2      	uxtb	r2, r2
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	6a3b      	ldr	r3, [r7, #32]
 8007e66:	09db      	lsrs	r3, r3, #7
 8007e68:	623b      	str	r3, [r7, #32]
 8007e6a:	6a3b      	ldr	r3, [r7, #32]
 8007e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8007e6e:	d8f0      	bhi.n	8007e52 <_SendPacket+0x102>
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	1c5a      	adds	r2, r3, #1
 8007e74:	627a      	str	r2, [r7, #36]	; 0x24
 8007e76:	6a3a      	ldr	r2, [r7, #32]
 8007e78:	b2d2      	uxtb	r2, r2
 8007e7a:	701a      	strb	r2, [r3, #0]
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8007e80:	4b23      	ldr	r3, [pc, #140]	; (8007f10 <_SendPacket+0x1c0>)
 8007e82:	785b      	ldrb	r3, [r3, #1]
 8007e84:	4618      	mov	r0, r3
 8007e86:	68ba      	ldr	r2, [r7, #8]
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	1ad3      	subs	r3, r2, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	68f9      	ldr	r1, [r7, #12]
 8007e90:	f7f8 f99e 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8007e94:	4603      	mov	r3, r0
 8007e96:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8007e9e:	4a1c      	ldr	r2, [pc, #112]	; (8007f10 <_SendPacket+0x1c0>)
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	60d3      	str	r3, [r2, #12]
 8007ea4:	e00b      	b.n	8007ebe <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8007ea6:	4b1a      	ldr	r3, [pc, #104]	; (8007f10 <_SendPacket+0x1c0>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	4b18      	ldr	r3, [pc, #96]	; (8007f10 <_SendPacket+0x1c0>)
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	e004      	b.n	8007ebe <_SendPacket+0x16e>
    goto SendDone;
 8007eb4:	bf00      	nop
 8007eb6:	e002      	b.n	8007ebe <_SendPacket+0x16e>
      goto SendDone;
 8007eb8:	bf00      	nop
 8007eba:	e000      	b.n	8007ebe <_SendPacket+0x16e>
      goto SendDone;
 8007ebc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007ebe:	4b14      	ldr	r3, [pc, #80]	; (8007f10 <_SendPacket+0x1c0>)
 8007ec0:	7e1b      	ldrb	r3, [r3, #24]
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	4a14      	ldr	r2, [pc, #80]	; (8007f18 <_SendPacket+0x1c8>)
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	440b      	add	r3, r1
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	4413      	add	r3, r2
 8007ed0:	336c      	adds	r3, #108	; 0x6c
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	4b0e      	ldr	r3, [pc, #56]	; (8007f10 <_SendPacket+0x1c0>)
 8007ed6:	7e1b      	ldrb	r3, [r3, #24]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	490f      	ldr	r1, [pc, #60]	; (8007f18 <_SendPacket+0x1c8>)
 8007edc:	4603      	mov	r3, r0
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	4403      	add	r3, r0
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	440b      	add	r3, r1
 8007ee6:	3370      	adds	r3, #112	; 0x70
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d00b      	beq.n	8007f06 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007eee:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <_SendPacket+0x1c0>)
 8007ef0:	789b      	ldrb	r3, [r3, #2]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007ef6:	4b06      	ldr	r3, [pc, #24]	; (8007f10 <_SendPacket+0x1c0>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007efc:	f7ff fe4a 	bl	8007b94 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007f00:	4b03      	ldr	r3, [pc, #12]	; (8007f10 <_SendPacket+0x1c0>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8007f06:	bf00      	nop
 8007f08:	3728      	adds	r7, #40	; 0x28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	20005160 	.word	0x20005160
 8007f14:	e0001004 	.word	0xe0001004
 8007f18:	20005530 	.word	0x20005530

08007f1c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b086      	sub	sp, #24
 8007f20:	af02      	add	r7, sp, #8
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
 8007f28:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f30:	4917      	ldr	r1, [pc, #92]	; (8007f90 <SEGGER_SYSVIEW_Init+0x74>)
 8007f32:	4818      	ldr	r0, [pc, #96]	; (8007f94 <SEGGER_SYSVIEW_Init+0x78>)
 8007f34:	f7ff fce0 	bl	80078f8 <SEGGER_RTT_AllocUpBuffer>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	4b16      	ldr	r3, [pc, #88]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f3e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8007f40:	4b15      	ldr	r3, [pc, #84]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f42:	785a      	ldrb	r2, [r3, #1]
 8007f44:	4b14      	ldr	r3, [pc, #80]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f46:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8007f48:	4b13      	ldr	r3, [pc, #76]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f4a:	7e1b      	ldrb	r3, [r3, #24]
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	2300      	movs	r3, #0
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	2308      	movs	r3, #8
 8007f54:	4a11      	ldr	r2, [pc, #68]	; (8007f9c <SEGGER_SYSVIEW_Init+0x80>)
 8007f56:	490f      	ldr	r1, [pc, #60]	; (8007f94 <SEGGER_SYSVIEW_Init+0x78>)
 8007f58:	f7ff fd52 	bl	8007a00 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8007f5c:	4b0e      	ldr	r3, [pc, #56]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8007f62:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <SEGGER_SYSVIEW_Init+0x84>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a0c      	ldr	r2, [pc, #48]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f68:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8007f6a:	4a0b      	ldr	r2, [pc, #44]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8007f70:	4a09      	ldr	r2, [pc, #36]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8007f76:	4a08      	ldr	r2, [pc, #32]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8007f7c:	4a06      	ldr	r2, [pc, #24]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8007f82:	4b05      	ldr	r3, [pc, #20]	; (8007f98 <SEGGER_SYSVIEW_Init+0x7c>)
 8007f84:	2200      	movs	r2, #0
 8007f86:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8007f88:	bf00      	nop
 8007f8a:	3710      	adds	r7, #16
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	20004d58 	.word	0x20004d58
 8007f94:	0800926c 	.word	0x0800926c
 8007f98:	20005160 	.word	0x20005160
 8007f9c:	20005158 	.word	0x20005158
 8007fa0:	e0001004 	.word	0xe0001004

08007fa4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8007fac:	4a04      	ldr	r2, [pc, #16]	; (8007fc0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6113      	str	r3, [r2, #16]
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	20005160 	.word	0x20005160

08007fc4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8007fd0:	f04f 0120 	mov.w	r1, #32
 8007fd4:	f381 8811 	msr	BASEPRI, r1
 8007fd8:	60fb      	str	r3, [r7, #12]
 8007fda:	4808      	ldr	r0, [pc, #32]	; (8007ffc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8007fdc:	f7ff fdcd 	bl	8007b7a <_PreparePacket>
 8007fe0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	68b9      	ldr	r1, [r7, #8]
 8007fe6:	68b8      	ldr	r0, [r7, #8]
 8007fe8:	f7ff feb2 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f383 8811 	msr	BASEPRI, r3
}
 8007ff2:	bf00      	nop
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	20005190 	.word	0x20005190

08008000 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8008000:	b580      	push	{r7, lr}
 8008002:	b088      	sub	sp, #32
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800800a:	f3ef 8311 	mrs	r3, BASEPRI
 800800e:	f04f 0120 	mov.w	r1, #32
 8008012:	f381 8811 	msr	BASEPRI, r1
 8008016:	617b      	str	r3, [r7, #20]
 8008018:	4816      	ldr	r0, [pc, #88]	; (8008074 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800801a:	f7ff fdae 	bl	8007b7a <_PreparePacket>
 800801e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	61fb      	str	r3, [r7, #28]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	61bb      	str	r3, [r7, #24]
 800802c:	e00b      	b.n	8008046 <SEGGER_SYSVIEW_RecordU32+0x46>
 800802e:	69bb      	ldr	r3, [r7, #24]
 8008030:	b2da      	uxtb	r2, r3
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	1c59      	adds	r1, r3, #1
 8008036:	61f9      	str	r1, [r7, #28]
 8008038:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800803c:	b2d2      	uxtb	r2, r2
 800803e:	701a      	strb	r2, [r3, #0]
 8008040:	69bb      	ldr	r3, [r7, #24]
 8008042:	09db      	lsrs	r3, r3, #7
 8008044:	61bb      	str	r3, [r7, #24]
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	2b7f      	cmp	r3, #127	; 0x7f
 800804a:	d8f0      	bhi.n	800802e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	1c5a      	adds	r2, r3, #1
 8008050:	61fa      	str	r2, [r7, #28]
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	b2d2      	uxtb	r2, r2
 8008056:	701a      	strb	r2, [r3, #0]
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	68f9      	ldr	r1, [r7, #12]
 8008060:	6938      	ldr	r0, [r7, #16]
 8008062:	f7ff fe75 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f383 8811 	msr	BASEPRI, r3
}
 800806c:	bf00      	nop
 800806e:	3720      	adds	r7, #32
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	20005190 	.word	0x20005190

08008078 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8008078:	b580      	push	{r7, lr}
 800807a:	b08c      	sub	sp, #48	; 0x30
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8008084:	f3ef 8311 	mrs	r3, BASEPRI
 8008088:	f04f 0120 	mov.w	r1, #32
 800808c:	f381 8811 	msr	BASEPRI, r1
 8008090:	61fb      	str	r3, [r7, #28]
 8008092:	4825      	ldr	r0, [pc, #148]	; (8008128 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8008094:	f7ff fd71 	bl	8007b7a <_PreparePacket>
 8008098:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080a6:	e00b      	b.n	80080c0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ae:	1c59      	adds	r1, r3, #1
 80080b0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80080b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080b6:	b2d2      	uxtb	r2, r2
 80080b8:	701a      	strb	r2, [r3, #0]
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	09db      	lsrs	r3, r3, #7
 80080be:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	2b7f      	cmp	r3, #127	; 0x7f
 80080c4:	d8f0      	bhi.n	80080a8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80080c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080c8:	1c5a      	adds	r2, r3, #1
 80080ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ce:	b2d2      	uxtb	r2, r2
 80080d0:	701a      	strb	r2, [r3, #0]
 80080d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	627b      	str	r3, [r7, #36]	; 0x24
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	623b      	str	r3, [r7, #32]
 80080de:	e00b      	b.n	80080f8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	b2da      	uxtb	r2, r3
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	1c59      	adds	r1, r3, #1
 80080e8:	6279      	str	r1, [r7, #36]	; 0x24
 80080ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	701a      	strb	r2, [r3, #0]
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	09db      	lsrs	r3, r3, #7
 80080f6:	623b      	str	r3, [r7, #32]
 80080f8:	6a3b      	ldr	r3, [r7, #32]
 80080fa:	2b7f      	cmp	r3, #127	; 0x7f
 80080fc:	d8f0      	bhi.n	80080e0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80080fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	627a      	str	r2, [r7, #36]	; 0x24
 8008104:	6a3a      	ldr	r2, [r7, #32]
 8008106:	b2d2      	uxtb	r2, r2
 8008108:	701a      	strb	r2, [r3, #0]
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	6979      	ldr	r1, [r7, #20]
 8008112:	69b8      	ldr	r0, [r7, #24]
 8008114:	f7ff fe1c 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	f383 8811 	msr	BASEPRI, r3
}
 800811e:	bf00      	nop
 8008120:	3730      	adds	r7, #48	; 0x30
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20005190 	.word	0x20005190

0800812c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800812c:	b580      	push	{r7, lr}
 800812e:	b08e      	sub	sp, #56	; 0x38
 8008130:	af00      	add	r7, sp, #0
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	607a      	str	r2, [r7, #4]
 8008138:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800813a:	f3ef 8311 	mrs	r3, BASEPRI
 800813e:	f04f 0120 	mov.w	r1, #32
 8008142:	f381 8811 	msr	BASEPRI, r1
 8008146:	61fb      	str	r3, [r7, #28]
 8008148:	4832      	ldr	r0, [pc, #200]	; (8008214 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800814a:	f7ff fd16 	bl	8007b7a <_PreparePacket>
 800814e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	637b      	str	r3, [r7, #52]	; 0x34
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	633b      	str	r3, [r7, #48]	; 0x30
 800815c:	e00b      	b.n	8008176 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800815e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008160:	b2da      	uxtb	r2, r3
 8008162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008164:	1c59      	adds	r1, r3, #1
 8008166:	6379      	str	r1, [r7, #52]	; 0x34
 8008168:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800816c:	b2d2      	uxtb	r2, r2
 800816e:	701a      	strb	r2, [r3, #0]
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	09db      	lsrs	r3, r3, #7
 8008174:	633b      	str	r3, [r7, #48]	; 0x30
 8008176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008178:	2b7f      	cmp	r3, #127	; 0x7f
 800817a:	d8f0      	bhi.n	800815e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800817c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	637a      	str	r2, [r7, #52]	; 0x34
 8008182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008184:	b2d2      	uxtb	r2, r2
 8008186:	701a      	strb	r2, [r3, #0]
 8008188:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800818a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	62bb      	str	r3, [r7, #40]	; 0x28
 8008194:	e00b      	b.n	80081ae <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8008196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008198:	b2da      	uxtb	r2, r3
 800819a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800819c:	1c59      	adds	r1, r3, #1
 800819e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80081a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081a4:	b2d2      	uxtb	r2, r2
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	09db      	lsrs	r3, r3, #7
 80081ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80081ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b0:	2b7f      	cmp	r3, #127	; 0x7f
 80081b2:	d8f0      	bhi.n	8008196 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80081b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081b6:	1c5a      	adds	r2, r3, #1
 80081b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80081bc:	b2d2      	uxtb	r2, r2
 80081be:	701a      	strb	r2, [r3, #0]
 80081c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	627b      	str	r3, [r7, #36]	; 0x24
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	623b      	str	r3, [r7, #32]
 80081cc:	e00b      	b.n	80081e6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	1c59      	adds	r1, r3, #1
 80081d6:	6279      	str	r1, [r7, #36]	; 0x24
 80081d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80081dc:	b2d2      	uxtb	r2, r2
 80081de:	701a      	strb	r2, [r3, #0]
 80081e0:	6a3b      	ldr	r3, [r7, #32]
 80081e2:	09db      	lsrs	r3, r3, #7
 80081e4:	623b      	str	r3, [r7, #32]
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	2b7f      	cmp	r3, #127	; 0x7f
 80081ea:	d8f0      	bhi.n	80081ce <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	627a      	str	r2, [r7, #36]	; 0x24
 80081f2:	6a3a      	ldr	r2, [r7, #32]
 80081f4:	b2d2      	uxtb	r2, r2
 80081f6:	701a      	strb	r2, [r3, #0]
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	6979      	ldr	r1, [r7, #20]
 8008200:	69b8      	ldr	r0, [r7, #24]
 8008202:	f7ff fda5 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008206:	69fb      	ldr	r3, [r7, #28]
 8008208:	f383 8811 	msr	BASEPRI, r3
}
 800820c:	bf00      	nop
 800820e:	3738      	adds	r7, #56	; 0x38
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	20005190 	.word	0x20005190

08008218 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8008218:	b580      	push	{r7, lr}
 800821a:	b090      	sub	sp, #64	; 0x40
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
 8008224:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008226:	f3ef 8311 	mrs	r3, BASEPRI
 800822a:	f04f 0120 	mov.w	r1, #32
 800822e:	f381 8811 	msr	BASEPRI, r1
 8008232:	61fb      	str	r3, [r7, #28]
 8008234:	4840      	ldr	r0, [pc, #256]	; (8008338 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8008236:	f7ff fca0 	bl	8007b7a <_PreparePacket>
 800823a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800823c:	69bb      	ldr	r3, [r7, #24]
 800823e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	63bb      	str	r3, [r7, #56]	; 0x38
 8008248:	e00b      	b.n	8008262 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800824a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824c:	b2da      	uxtb	r2, r3
 800824e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008250:	1c59      	adds	r1, r3, #1
 8008252:	63f9      	str	r1, [r7, #60]	; 0x3c
 8008254:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008258:	b2d2      	uxtb	r2, r2
 800825a:	701a      	strb	r2, [r3, #0]
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	09db      	lsrs	r3, r3, #7
 8008260:	63bb      	str	r3, [r7, #56]	; 0x38
 8008262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008264:	2b7f      	cmp	r3, #127	; 0x7f
 8008266:	d8f0      	bhi.n	800824a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8008268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800826a:	1c5a      	adds	r2, r3, #1
 800826c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800826e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008270:	b2d2      	uxtb	r2, r2
 8008272:	701a      	strb	r2, [r3, #0]
 8008274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008276:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	637b      	str	r3, [r7, #52]	; 0x34
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	633b      	str	r3, [r7, #48]	; 0x30
 8008280:	e00b      	b.n	800829a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8008282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008284:	b2da      	uxtb	r2, r3
 8008286:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008288:	1c59      	adds	r1, r3, #1
 800828a:	6379      	str	r1, [r7, #52]	; 0x34
 800828c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008290:	b2d2      	uxtb	r2, r2
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	09db      	lsrs	r3, r3, #7
 8008298:	633b      	str	r3, [r7, #48]	; 0x30
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	2b7f      	cmp	r3, #127	; 0x7f
 800829e:	d8f0      	bhi.n	8008282 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80082a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	637a      	str	r2, [r7, #52]	; 0x34
 80082a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	701a      	strb	r2, [r3, #0]
 80082ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80082b8:	e00b      	b.n	80082d2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80082ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c0:	1c59      	adds	r1, r3, #1
 80082c2:	62f9      	str	r1, [r7, #44]	; 0x2c
 80082c4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80082c8:	b2d2      	uxtb	r2, r2
 80082ca:	701a      	strb	r2, [r3, #0]
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	09db      	lsrs	r3, r3, #7
 80082d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80082d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d4:	2b7f      	cmp	r3, #127	; 0x7f
 80082d6:	d8f0      	bhi.n	80082ba <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80082d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082da:	1c5a      	adds	r2, r3, #1
 80082dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082e0:	b2d2      	uxtb	r2, r2
 80082e2:	701a      	strb	r2, [r3, #0]
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	627b      	str	r3, [r7, #36]	; 0x24
 80082ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082ee:	623b      	str	r3, [r7, #32]
 80082f0:	e00b      	b.n	800830a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	b2da      	uxtb	r2, r3
 80082f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f8:	1c59      	adds	r1, r3, #1
 80082fa:	6279      	str	r1, [r7, #36]	; 0x24
 80082fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008300:	b2d2      	uxtb	r2, r2
 8008302:	701a      	strb	r2, [r3, #0]
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	09db      	lsrs	r3, r3, #7
 8008308:	623b      	str	r3, [r7, #32]
 800830a:	6a3b      	ldr	r3, [r7, #32]
 800830c:	2b7f      	cmp	r3, #127	; 0x7f
 800830e:	d8f0      	bhi.n	80082f2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8008310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	627a      	str	r2, [r7, #36]	; 0x24
 8008316:	6a3a      	ldr	r2, [r7, #32]
 8008318:	b2d2      	uxtb	r2, r2
 800831a:	701a      	strb	r2, [r3, #0]
 800831c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	6979      	ldr	r1, [r7, #20]
 8008324:	69b8      	ldr	r0, [r7, #24]
 8008326:	f7ff fd13 	bl	8007d50 <_SendPacket>
  RECORD_END();
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	f383 8811 	msr	BASEPRI, r3
}
 8008330:	bf00      	nop
 8008332:	3740      	adds	r7, #64	; 0x40
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	20005190 	.word	0x20005190

0800833c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800833c:	b580      	push	{r7, lr}
 800833e:	b08c      	sub	sp, #48	; 0x30
 8008340:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8008342:	4b58      	ldr	r3, [pc, #352]	; (80084a4 <SEGGER_SYSVIEW_Start+0x168>)
 8008344:	2201      	movs	r2, #1
 8008346:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8008348:	f3ef 8311 	mrs	r3, BASEPRI
 800834c:	f04f 0120 	mov.w	r1, #32
 8008350:	f381 8811 	msr	BASEPRI, r1
 8008354:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8008356:	4b53      	ldr	r3, [pc, #332]	; (80084a4 <SEGGER_SYSVIEW_Start+0x168>)
 8008358:	785b      	ldrb	r3, [r3, #1]
 800835a:	220a      	movs	r2, #10
 800835c:	4952      	ldr	r1, [pc, #328]	; (80084a8 <SEGGER_SYSVIEW_Start+0x16c>)
 800835e:	4618      	mov	r0, r3
 8008360:	f7f7 ff36 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800836a:	200a      	movs	r0, #10
 800836c:	f7ff fe2a 	bl	8007fc4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008370:	f3ef 8311 	mrs	r3, BASEPRI
 8008374:	f04f 0120 	mov.w	r1, #32
 8008378:	f381 8811 	msr	BASEPRI, r1
 800837c:	60bb      	str	r3, [r7, #8]
 800837e:	484b      	ldr	r0, [pc, #300]	; (80084ac <SEGGER_SYSVIEW_Start+0x170>)
 8008380:	f7ff fbfb 	bl	8007b7a <_PreparePacket>
 8008384:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800838e:	4b45      	ldr	r3, [pc, #276]	; (80084a4 <SEGGER_SYSVIEW_Start+0x168>)
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	62bb      	str	r3, [r7, #40]	; 0x28
 8008394:	e00b      	b.n	80083ae <SEGGER_SYSVIEW_Start+0x72>
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	b2da      	uxtb	r2, r3
 800839a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800839c:	1c59      	adds	r1, r3, #1
 800839e:	62f9      	str	r1, [r7, #44]	; 0x2c
 80083a0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083a4:	b2d2      	uxtb	r2, r2
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083aa:	09db      	lsrs	r3, r3, #7
 80083ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	2b7f      	cmp	r3, #127	; 0x7f
 80083b2:	d8f0      	bhi.n	8008396 <SEGGER_SYSVIEW_Start+0x5a>
 80083b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083bc:	b2d2      	uxtb	r2, r2
 80083be:	701a      	strb	r2, [r3, #0]
 80083c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	627b      	str	r3, [r7, #36]	; 0x24
 80083c8:	4b36      	ldr	r3, [pc, #216]	; (80084a4 <SEGGER_SYSVIEW_Start+0x168>)
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	623b      	str	r3, [r7, #32]
 80083ce:	e00b      	b.n	80083e8 <SEGGER_SYSVIEW_Start+0xac>
 80083d0:	6a3b      	ldr	r3, [r7, #32]
 80083d2:	b2da      	uxtb	r2, r3
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	1c59      	adds	r1, r3, #1
 80083d8:	6279      	str	r1, [r7, #36]	; 0x24
 80083da:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80083de:	b2d2      	uxtb	r2, r2
 80083e0:	701a      	strb	r2, [r3, #0]
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	09db      	lsrs	r3, r3, #7
 80083e6:	623b      	str	r3, [r7, #32]
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	2b7f      	cmp	r3, #127	; 0x7f
 80083ec:	d8f0      	bhi.n	80083d0 <SEGGER_SYSVIEW_Start+0x94>
 80083ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f0:	1c5a      	adds	r2, r3, #1
 80083f2:	627a      	str	r2, [r7, #36]	; 0x24
 80083f4:	6a3a      	ldr	r2, [r7, #32]
 80083f6:	b2d2      	uxtb	r2, r2
 80083f8:	701a      	strb	r2, [r3, #0]
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	61fb      	str	r3, [r7, #28]
 8008402:	4b28      	ldr	r3, [pc, #160]	; (80084a4 <SEGGER_SYSVIEW_Start+0x168>)
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	61bb      	str	r3, [r7, #24]
 8008408:	e00b      	b.n	8008422 <SEGGER_SYSVIEW_Start+0xe6>
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	b2da      	uxtb	r2, r3
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	1c59      	adds	r1, r3, #1
 8008412:	61f9      	str	r1, [r7, #28]
 8008414:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008418:	b2d2      	uxtb	r2, r2
 800841a:	701a      	strb	r2, [r3, #0]
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	09db      	lsrs	r3, r3, #7
 8008420:	61bb      	str	r3, [r7, #24]
 8008422:	69bb      	ldr	r3, [r7, #24]
 8008424:	2b7f      	cmp	r3, #127	; 0x7f
 8008426:	d8f0      	bhi.n	800840a <SEGGER_SYSVIEW_Start+0xce>
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	1c5a      	adds	r2, r3, #1
 800842c:	61fa      	str	r2, [r7, #28]
 800842e:	69ba      	ldr	r2, [r7, #24]
 8008430:	b2d2      	uxtb	r2, r2
 8008432:	701a      	strb	r2, [r3, #0]
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	617b      	str	r3, [r7, #20]
 800843c:	2300      	movs	r3, #0
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	e00b      	b.n	800845a <SEGGER_SYSVIEW_Start+0x11e>
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	b2da      	uxtb	r2, r3
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	1c59      	adds	r1, r3, #1
 800844a:	6179      	str	r1, [r7, #20]
 800844c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008450:	b2d2      	uxtb	r2, r2
 8008452:	701a      	strb	r2, [r3, #0]
 8008454:	693b      	ldr	r3, [r7, #16]
 8008456:	09db      	lsrs	r3, r3, #7
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b7f      	cmp	r3, #127	; 0x7f
 800845e:	d8f0      	bhi.n	8008442 <SEGGER_SYSVIEW_Start+0x106>
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	1c5a      	adds	r2, r3, #1
 8008464:	617a      	str	r2, [r7, #20]
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	b2d2      	uxtb	r2, r2
 800846a:	701a      	strb	r2, [r3, #0]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008470:	2218      	movs	r2, #24
 8008472:	6839      	ldr	r1, [r7, #0]
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f7ff fc6b 	bl	8007d50 <_SendPacket>
      RECORD_END();
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008480:	4b08      	ldr	r3, [pc, #32]	; (80084a4 <SEGGER_SYSVIEW_Start+0x168>)
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	2b00      	cmp	r3, #0
 8008486:	d002      	beq.n	800848e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8008488:	4b06      	ldr	r3, [pc, #24]	; (80084a4 <SEGGER_SYSVIEW_Start+0x168>)
 800848a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800848e:	f000 f9eb 	bl	8008868 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8008492:	f000 f9b1 	bl	80087f8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8008496:	f000 fc05 	bl	8008ca4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800849a:	bf00      	nop
 800849c:	3730      	adds	r7, #48	; 0x30
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	bf00      	nop
 80084a4:	20005160 	.word	0x20005160
 80084a8:	08009388 	.word	0x08009388
 80084ac:	20005190 	.word	0x20005190

080084b0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80084b6:	f3ef 8311 	mrs	r3, BASEPRI
 80084ba:	f04f 0120 	mov.w	r1, #32
 80084be:	f381 8811 	msr	BASEPRI, r1
 80084c2:	607b      	str	r3, [r7, #4]
 80084c4:	480b      	ldr	r0, [pc, #44]	; (80084f4 <SEGGER_SYSVIEW_Stop+0x44>)
 80084c6:	f7ff fb58 	bl	8007b7a <_PreparePacket>
 80084ca:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80084cc:	4b0a      	ldr	r3, [pc, #40]	; (80084f8 <SEGGER_SYSVIEW_Stop+0x48>)
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d007      	beq.n	80084e4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80084d4:	220b      	movs	r2, #11
 80084d6:	6839      	ldr	r1, [r7, #0]
 80084d8:	6838      	ldr	r0, [r7, #0]
 80084da:	f7ff fc39 	bl	8007d50 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80084de:	4b06      	ldr	r3, [pc, #24]	; (80084f8 <SEGGER_SYSVIEW_Stop+0x48>)
 80084e0:	2200      	movs	r2, #0
 80084e2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f383 8811 	msr	BASEPRI, r3
}
 80084ea:	bf00      	nop
 80084ec:	3708      	adds	r7, #8
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}
 80084f2:	bf00      	nop
 80084f4:	20005190 	.word	0x20005190
 80084f8:	20005160 	.word	0x20005160

080084fc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08c      	sub	sp, #48	; 0x30
 8008500:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8008502:	f3ef 8311 	mrs	r3, BASEPRI
 8008506:	f04f 0120 	mov.w	r1, #32
 800850a:	f381 8811 	msr	BASEPRI, r1
 800850e:	60fb      	str	r3, [r7, #12]
 8008510:	4845      	ldr	r0, [pc, #276]	; (8008628 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8008512:	f7ff fb32 	bl	8007b7a <_PreparePacket>
 8008516:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008520:	4b42      	ldr	r3, [pc, #264]	; (800862c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	62bb      	str	r3, [r7, #40]	; 0x28
 8008526:	e00b      	b.n	8008540 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8008528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852a:	b2da      	uxtb	r2, r3
 800852c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800852e:	1c59      	adds	r1, r3, #1
 8008530:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008532:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008536:	b2d2      	uxtb	r2, r2
 8008538:	701a      	strb	r2, [r3, #0]
 800853a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853c:	09db      	lsrs	r3, r3, #7
 800853e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008542:	2b7f      	cmp	r3, #127	; 0x7f
 8008544:	d8f0      	bhi.n	8008528 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8008546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800854c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800854e:	b2d2      	uxtb	r2, r2
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
 800855a:	4b34      	ldr	r3, [pc, #208]	; (800862c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	623b      	str	r3, [r7, #32]
 8008560:	e00b      	b.n	800857a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	b2da      	uxtb	r2, r3
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	1c59      	adds	r1, r3, #1
 800856a:	6279      	str	r1, [r7, #36]	; 0x24
 800856c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008570:	b2d2      	uxtb	r2, r2
 8008572:	701a      	strb	r2, [r3, #0]
 8008574:	6a3b      	ldr	r3, [r7, #32]
 8008576:	09db      	lsrs	r3, r3, #7
 8008578:	623b      	str	r3, [r7, #32]
 800857a:	6a3b      	ldr	r3, [r7, #32]
 800857c:	2b7f      	cmp	r3, #127	; 0x7f
 800857e:	d8f0      	bhi.n	8008562 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	1c5a      	adds	r2, r3, #1
 8008584:	627a      	str	r2, [r7, #36]	; 0x24
 8008586:	6a3a      	ldr	r2, [r7, #32]
 8008588:	b2d2      	uxtb	r2, r2
 800858a:	701a      	strb	r2, [r3, #0]
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	61fb      	str	r3, [r7, #28]
 8008594:	4b25      	ldr	r3, [pc, #148]	; (800862c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	61bb      	str	r3, [r7, #24]
 800859a:	e00b      	b.n	80085b4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	b2da      	uxtb	r2, r3
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	1c59      	adds	r1, r3, #1
 80085a4:	61f9      	str	r1, [r7, #28]
 80085a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085aa:	b2d2      	uxtb	r2, r2
 80085ac:	701a      	strb	r2, [r3, #0]
 80085ae:	69bb      	ldr	r3, [r7, #24]
 80085b0:	09db      	lsrs	r3, r3, #7
 80085b2:	61bb      	str	r3, [r7, #24]
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	2b7f      	cmp	r3, #127	; 0x7f
 80085b8:	d8f0      	bhi.n	800859c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	1c5a      	adds	r2, r3, #1
 80085be:	61fa      	str	r2, [r7, #28]
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	701a      	strb	r2, [r3, #0]
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	2300      	movs	r3, #0
 80085d0:	613b      	str	r3, [r7, #16]
 80085d2:	e00b      	b.n	80085ec <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	b2da      	uxtb	r2, r3
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	1c59      	adds	r1, r3, #1
 80085dc:	6179      	str	r1, [r7, #20]
 80085de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80085e2:	b2d2      	uxtb	r2, r2
 80085e4:	701a      	strb	r2, [r3, #0]
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	09db      	lsrs	r3, r3, #7
 80085ea:	613b      	str	r3, [r7, #16]
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2b7f      	cmp	r3, #127	; 0x7f
 80085f0:	d8f0      	bhi.n	80085d4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	1c5a      	adds	r2, r3, #1
 80085f6:	617a      	str	r2, [r7, #20]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	b2d2      	uxtb	r2, r2
 80085fc:	701a      	strb	r2, [r3, #0]
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8008602:	2218      	movs	r2, #24
 8008604:	6879      	ldr	r1, [r7, #4]
 8008606:	68b8      	ldr	r0, [r7, #8]
 8008608:	f7ff fba2 	bl	8007d50 <_SendPacket>
  RECORD_END();
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8008612:	4b06      	ldr	r3, [pc, #24]	; (800862c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8008614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008616:	2b00      	cmp	r3, #0
 8008618:	d002      	beq.n	8008620 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800861a:	4b04      	ldr	r3, [pc, #16]	; (800862c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800861c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861e:	4798      	blx	r3
  }
}
 8008620:	bf00      	nop
 8008622:	3730      	adds	r7, #48	; 0x30
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}
 8008628:	20005190 	.word	0x20005190
 800862c:	20005160 	.word	0x20005160

08008630 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8008630:	b580      	push	{r7, lr}
 8008632:	b092      	sub	sp, #72	; 0x48
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8008638:	f3ef 8311 	mrs	r3, BASEPRI
 800863c:	f04f 0120 	mov.w	r1, #32
 8008640:	f381 8811 	msr	BASEPRI, r1
 8008644:	617b      	str	r3, [r7, #20]
 8008646:	486a      	ldr	r0, [pc, #424]	; (80087f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8008648:	f7ff fa97 	bl	8007b7a <_PreparePacket>
 800864c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	647b      	str	r3, [r7, #68]	; 0x44
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	4b66      	ldr	r3, [pc, #408]	; (80087f4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800865c:	691b      	ldr	r3, [r3, #16]
 800865e:	1ad3      	subs	r3, r2, r3
 8008660:	643b      	str	r3, [r7, #64]	; 0x40
 8008662:	e00b      	b.n	800867c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8008664:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008666:	b2da      	uxtb	r2, r3
 8008668:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800866a:	1c59      	adds	r1, r3, #1
 800866c:	6479      	str	r1, [r7, #68]	; 0x44
 800866e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008672:	b2d2      	uxtb	r2, r2
 8008674:	701a      	strb	r2, [r3, #0]
 8008676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008678:	09db      	lsrs	r3, r3, #7
 800867a:	643b      	str	r3, [r7, #64]	; 0x40
 800867c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867e:	2b7f      	cmp	r3, #127	; 0x7f
 8008680:	d8f0      	bhi.n	8008664 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8008682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008684:	1c5a      	adds	r2, r3, #1
 8008686:	647a      	str	r2, [r7, #68]	; 0x44
 8008688:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]
 800868e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008690:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	63bb      	str	r3, [r7, #56]	; 0x38
 800869c:	e00b      	b.n	80086b6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086a4:	1c59      	adds	r1, r3, #1
 80086a6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80086a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80086ac:	b2d2      	uxtb	r2, r2
 80086ae:	701a      	strb	r2, [r3, #0]
 80086b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b2:	09db      	lsrs	r3, r3, #7
 80086b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80086b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b8:	2b7f      	cmp	r3, #127	; 0x7f
 80086ba:	d8f0      	bhi.n	800869e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80086bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80086c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80086c4:	b2d2      	uxtb	r2, r2
 80086c6:	701a      	strb	r2, [r3, #0]
 80086c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ca:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	4619      	mov	r1, r3
 80086d4:	68f8      	ldr	r0, [r7, #12]
 80086d6:	f7ff fa03 	bl	8007ae0 <_EncodeStr>
 80086da:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80086dc:	2209      	movs	r2, #9
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	6938      	ldr	r0, [r7, #16]
 80086e2:	f7ff fb35 	bl	8007d50 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	637b      	str	r3, [r7, #52]	; 0x34
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	4b40      	ldr	r3, [pc, #256]	; (80087f4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	633b      	str	r3, [r7, #48]	; 0x30
 80086fa:	e00b      	b.n	8008714 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008702:	1c59      	adds	r1, r3, #1
 8008704:	6379      	str	r1, [r7, #52]	; 0x34
 8008706:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]
 800870e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008710:	09db      	lsrs	r3, r3, #7
 8008712:	633b      	str	r3, [r7, #48]	; 0x30
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	2b7f      	cmp	r3, #127	; 0x7f
 8008718:	d8f0      	bhi.n	80086fc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	637a      	str	r2, [r7, #52]	; 0x34
 8008720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008722:	b2d2      	uxtb	r2, r2
 8008724:	701a      	strb	r2, [r3, #0]
 8008726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008728:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	62bb      	str	r3, [r7, #40]	; 0x28
 8008734:	e00b      	b.n	800874e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	b2da      	uxtb	r2, r3
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	1c59      	adds	r1, r3, #1
 800873e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008740:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	701a      	strb	r2, [r3, #0]
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	09db      	lsrs	r3, r3, #7
 800874c:	62bb      	str	r3, [r7, #40]	; 0x28
 800874e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008750:	2b7f      	cmp	r3, #127	; 0x7f
 8008752:	d8f0      	bhi.n	8008736 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8008754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008756:	1c5a      	adds	r2, r3, #1
 8008758:	62fa      	str	r2, [r7, #44]	; 0x2c
 800875a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800875c:	b2d2      	uxtb	r2, r2
 800875e:	701a      	strb	r2, [r3, #0]
 8008760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008762:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	623b      	str	r3, [r7, #32]
 800876e:	e00b      	b.n	8008788 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	b2da      	uxtb	r2, r3
 8008774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008776:	1c59      	adds	r1, r3, #1
 8008778:	6279      	str	r1, [r7, #36]	; 0x24
 800877a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800877e:	b2d2      	uxtb	r2, r2
 8008780:	701a      	strb	r2, [r3, #0]
 8008782:	6a3b      	ldr	r3, [r7, #32]
 8008784:	09db      	lsrs	r3, r3, #7
 8008786:	623b      	str	r3, [r7, #32]
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	2b7f      	cmp	r3, #127	; 0x7f
 800878c:	d8f0      	bhi.n	8008770 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800878e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008790:	1c5a      	adds	r2, r3, #1
 8008792:	627a      	str	r2, [r7, #36]	; 0x24
 8008794:	6a3a      	ldr	r2, [r7, #32]
 8008796:	b2d2      	uxtb	r2, r2
 8008798:	701a      	strb	r2, [r3, #0]
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	61fb      	str	r3, [r7, #28]
 80087a2:	2300      	movs	r3, #0
 80087a4:	61bb      	str	r3, [r7, #24]
 80087a6:	e00b      	b.n	80087c0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	b2da      	uxtb	r2, r3
 80087ac:	69fb      	ldr	r3, [r7, #28]
 80087ae:	1c59      	adds	r1, r3, #1
 80087b0:	61f9      	str	r1, [r7, #28]
 80087b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80087b6:	b2d2      	uxtb	r2, r2
 80087b8:	701a      	strb	r2, [r3, #0]
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	09db      	lsrs	r3, r3, #7
 80087be:	61bb      	str	r3, [r7, #24]
 80087c0:	69bb      	ldr	r3, [r7, #24]
 80087c2:	2b7f      	cmp	r3, #127	; 0x7f
 80087c4:	d8f0      	bhi.n	80087a8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	1c5a      	adds	r2, r3, #1
 80087ca:	61fa      	str	r2, [r7, #28]
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	b2d2      	uxtb	r2, r2
 80087d0:	701a      	strb	r2, [r3, #0]
 80087d2:	69fb      	ldr	r3, [r7, #28]
 80087d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80087d6:	2215      	movs	r2, #21
 80087d8:	68f9      	ldr	r1, [r7, #12]
 80087da:	6938      	ldr	r0, [r7, #16]
 80087dc:	f7ff fab8 	bl	8007d50 <_SendPacket>
  RECORD_END();
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f383 8811 	msr	BASEPRI, r3
}
 80087e6:	bf00      	nop
 80087e8:	3748      	adds	r7, #72	; 0x48
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20005190 	.word	0x20005190
 80087f4:	20005160 	.word	0x20005160

080087f8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80087f8:	b580      	push	{r7, lr}
 80087fa:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80087fc:	4b07      	ldr	r3, [pc, #28]	; (800881c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80087fe:	6a1b      	ldr	r3, [r3, #32]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d008      	beq.n	8008816 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8008804:	4b05      	ldr	r3, [pc, #20]	; (800881c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008806:	6a1b      	ldr	r3, [r3, #32]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800880e:	4b03      	ldr	r3, [pc, #12]	; (800881c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8008810:	6a1b      	ldr	r3, [r3, #32]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	4798      	blx	r3
  }
}
 8008816:	bf00      	nop
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20005160 	.word	0x20005160

08008820 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8008820:	b580      	push	{r7, lr}
 8008822:	b086      	sub	sp, #24
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008828:	f3ef 8311 	mrs	r3, BASEPRI
 800882c:	f04f 0120 	mov.w	r1, #32
 8008830:	f381 8811 	msr	BASEPRI, r1
 8008834:	617b      	str	r3, [r7, #20]
 8008836:	480b      	ldr	r0, [pc, #44]	; (8008864 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8008838:	f7ff f99f 	bl	8007b7a <_PreparePacket>
 800883c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800883e:	2280      	movs	r2, #128	; 0x80
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	6938      	ldr	r0, [r7, #16]
 8008844:	f7ff f94c 	bl	8007ae0 <_EncodeStr>
 8008848:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800884a:	220e      	movs	r2, #14
 800884c:	68f9      	ldr	r1, [r7, #12]
 800884e:	6938      	ldr	r0, [r7, #16]
 8008850:	f7ff fa7e 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f383 8811 	msr	BASEPRI, r3
}
 800885a:	bf00      	nop
 800885c:	3718      	adds	r7, #24
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20005190 	.word	0x20005190

08008868 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8008868:	b590      	push	{r4, r7, lr}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800886e:	4b14      	ldr	r3, [pc, #80]	; (80088c0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8008870:	6a1b      	ldr	r3, [r3, #32]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d019      	beq.n	80088aa <SEGGER_SYSVIEW_RecordSystime+0x42>
 8008876:	4b12      	ldr	r3, [pc, #72]	; (80088c0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8008878:	6a1b      	ldr	r3, [r3, #32]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d014      	beq.n	80088aa <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8008880:	4b0f      	ldr	r3, [pc, #60]	; (80088c0 <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8008882:	6a1b      	ldr	r3, [r3, #32]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4798      	blx	r3
 8008888:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800888c:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800888e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	f04f 0400 	mov.w	r4, #0
 800889a:	0013      	movs	r3, r2
 800889c:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800889e:	461a      	mov	r2, r3
 80088a0:	4601      	mov	r1, r0
 80088a2:	200d      	movs	r0, #13
 80088a4:	f7ff fbe8 	bl	8008078 <SEGGER_SYSVIEW_RecordU32x2>
 80088a8:	e005      	b.n	80088b6 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80088aa:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4619      	mov	r1, r3
 80088b0:	200c      	movs	r0, #12
 80088b2:	f7ff fba5 	bl	8008000 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80088b6:	bf00      	nop
 80088b8:	370c      	adds	r7, #12
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd90      	pop	{r4, r7, pc}
 80088be:	bf00      	nop
 80088c0:	20005160 	.word	0x20005160
 80088c4:	e0001004 	.word	0xe0001004

080088c8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80088ce:	f3ef 8311 	mrs	r3, BASEPRI
 80088d2:	f04f 0120 	mov.w	r1, #32
 80088d6:	f381 8811 	msr	BASEPRI, r1
 80088da:	60fb      	str	r3, [r7, #12]
 80088dc:	4819      	ldr	r0, [pc, #100]	; (8008944 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80088de:	f7ff f94c 	bl	8007b7a <_PreparePacket>
 80088e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80088e8:	4b17      	ldr	r3, [pc, #92]	; (8008948 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088f0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	617b      	str	r3, [r7, #20]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	613b      	str	r3, [r7, #16]
 80088fa:	e00b      	b.n	8008914 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	1c59      	adds	r1, r3, #1
 8008904:	6179      	str	r1, [r7, #20]
 8008906:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800890a:	b2d2      	uxtb	r2, r2
 800890c:	701a      	strb	r2, [r3, #0]
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	09db      	lsrs	r3, r3, #7
 8008912:	613b      	str	r3, [r7, #16]
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	2b7f      	cmp	r3, #127	; 0x7f
 8008918:	d8f0      	bhi.n	80088fc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	1c5a      	adds	r2, r3, #1
 800891e:	617a      	str	r2, [r7, #20]
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	b2d2      	uxtb	r2, r2
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800892a:	2202      	movs	r2, #2
 800892c:	6879      	ldr	r1, [r7, #4]
 800892e:	68b8      	ldr	r0, [r7, #8]
 8008930:	f7ff fa0e 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f383 8811 	msr	BASEPRI, r3
}
 800893a:	bf00      	nop
 800893c:	3718      	adds	r7, #24
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}
 8008942:	bf00      	nop
 8008944:	20005190 	.word	0x20005190
 8008948:	e000ed04 	.word	0xe000ed04

0800894c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8008952:	f3ef 8311 	mrs	r3, BASEPRI
 8008956:	f04f 0120 	mov.w	r1, #32
 800895a:	f381 8811 	msr	BASEPRI, r1
 800895e:	607b      	str	r3, [r7, #4]
 8008960:	4807      	ldr	r0, [pc, #28]	; (8008980 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8008962:	f7ff f90a 	bl	8007b7a <_PreparePacket>
 8008966:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8008968:	2203      	movs	r2, #3
 800896a:	6839      	ldr	r1, [r7, #0]
 800896c:	6838      	ldr	r0, [r7, #0]
 800896e:	f7ff f9ef 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f383 8811 	msr	BASEPRI, r3
}
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	20005190 	.word	0x20005190

08008984 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800898a:	f3ef 8311 	mrs	r3, BASEPRI
 800898e:	f04f 0120 	mov.w	r1, #32
 8008992:	f381 8811 	msr	BASEPRI, r1
 8008996:	607b      	str	r3, [r7, #4]
 8008998:	4807      	ldr	r0, [pc, #28]	; (80089b8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800899a:	f7ff f8ee 	bl	8007b7a <_PreparePacket>
 800899e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80089a0:	2211      	movs	r2, #17
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6838      	ldr	r0, [r7, #0]
 80089a6:	f7ff f9d3 	bl	8007d50 <_SendPacket>
  RECORD_END();
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f383 8811 	msr	BASEPRI, r3
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	20005190 	.word	0x20005190

080089bc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80089bc:	b580      	push	{r7, lr}
 80089be:	b088      	sub	sp, #32
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80089c4:	f3ef 8311 	mrs	r3, BASEPRI
 80089c8:	f04f 0120 	mov.w	r1, #32
 80089cc:	f381 8811 	msr	BASEPRI, r1
 80089d0:	617b      	str	r3, [r7, #20]
 80089d2:	4819      	ldr	r0, [pc, #100]	; (8008a38 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80089d4:	f7ff f8d1 	bl	8007b7a <_PreparePacket>
 80089d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80089de:	4b17      	ldr	r3, [pc, #92]	; (8008a3c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	61fb      	str	r3, [r7, #28]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	61bb      	str	r3, [r7, #24]
 80089f0:	e00b      	b.n	8008a0a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80089f2:	69bb      	ldr	r3, [r7, #24]
 80089f4:	b2da      	uxtb	r2, r3
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	1c59      	adds	r1, r3, #1
 80089fa:	61f9      	str	r1, [r7, #28]
 80089fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a00:	b2d2      	uxtb	r2, r2
 8008a02:	701a      	strb	r2, [r3, #0]
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	09db      	lsrs	r3, r3, #7
 8008a08:	61bb      	str	r3, [r7, #24]
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8008a0e:	d8f0      	bhi.n	80089f2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8008a10:	69fb      	ldr	r3, [r7, #28]
 8008a12:	1c5a      	adds	r2, r3, #1
 8008a14:	61fa      	str	r2, [r7, #28]
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	b2d2      	uxtb	r2, r2
 8008a1a:	701a      	strb	r2, [r3, #0]
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8008a20:	2208      	movs	r2, #8
 8008a22:	68f9      	ldr	r1, [r7, #12]
 8008a24:	6938      	ldr	r0, [r7, #16]
 8008a26:	f7ff f993 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f383 8811 	msr	BASEPRI, r3
}
 8008a30:	bf00      	nop
 8008a32:	3720      	adds	r7, #32
 8008a34:	46bd      	mov	sp, r7
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	20005190 	.word	0x20005190
 8008a3c:	20005160 	.word	0x20005160

08008a40 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008a48:	f3ef 8311 	mrs	r3, BASEPRI
 8008a4c:	f04f 0120 	mov.w	r1, #32
 8008a50:	f381 8811 	msr	BASEPRI, r1
 8008a54:	617b      	str	r3, [r7, #20]
 8008a56:	4819      	ldr	r0, [pc, #100]	; (8008abc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8008a58:	f7ff f88f 	bl	8007b7a <_PreparePacket>
 8008a5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008a62:	4b17      	ldr	r3, [pc, #92]	; (8008ac0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	61fb      	str	r3, [r7, #28]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	61bb      	str	r3, [r7, #24]
 8008a74:	e00b      	b.n	8008a8e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	b2da      	uxtb	r2, r3
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	1c59      	adds	r1, r3, #1
 8008a7e:	61f9      	str	r1, [r7, #28]
 8008a80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008a84:	b2d2      	uxtb	r2, r2
 8008a86:	701a      	strb	r2, [r3, #0]
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	09db      	lsrs	r3, r3, #7
 8008a8c:	61bb      	str	r3, [r7, #24]
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	2b7f      	cmp	r3, #127	; 0x7f
 8008a92:	d8f0      	bhi.n	8008a76 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	1c5a      	adds	r2, r3, #1
 8008a98:	61fa      	str	r2, [r7, #28]
 8008a9a:	69ba      	ldr	r2, [r7, #24]
 8008a9c:	b2d2      	uxtb	r2, r2
 8008a9e:	701a      	strb	r2, [r3, #0]
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8008aa4:	2204      	movs	r2, #4
 8008aa6:	68f9      	ldr	r1, [r7, #12]
 8008aa8:	6938      	ldr	r0, [r7, #16]
 8008aaa:	f7ff f951 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	f383 8811 	msr	BASEPRI, r3
}
 8008ab4:	bf00      	nop
 8008ab6:	3720      	adds	r7, #32
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	20005190 	.word	0x20005190
 8008ac0:	20005160 	.word	0x20005160

08008ac4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8008acc:	f3ef 8311 	mrs	r3, BASEPRI
 8008ad0:	f04f 0120 	mov.w	r1, #32
 8008ad4:	f381 8811 	msr	BASEPRI, r1
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	4819      	ldr	r0, [pc, #100]	; (8008b40 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8008adc:	f7ff f84d 	bl	8007b7a <_PreparePacket>
 8008ae0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8008ae6:	4b17      	ldr	r3, [pc, #92]	; (8008b44 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	1ad3      	subs	r3, r2, r3
 8008aee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	61bb      	str	r3, [r7, #24]
 8008af8:	e00b      	b.n	8008b12 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	1c59      	adds	r1, r3, #1
 8008b02:	61f9      	str	r1, [r7, #28]
 8008b04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008b08:	b2d2      	uxtb	r2, r2
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	69bb      	ldr	r3, [r7, #24]
 8008b0e:	09db      	lsrs	r3, r3, #7
 8008b10:	61bb      	str	r3, [r7, #24]
 8008b12:	69bb      	ldr	r3, [r7, #24]
 8008b14:	2b7f      	cmp	r3, #127	; 0x7f
 8008b16:	d8f0      	bhi.n	8008afa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	61fa      	str	r2, [r7, #28]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	b2d2      	uxtb	r2, r2
 8008b22:	701a      	strb	r2, [r3, #0]
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8008b28:	2206      	movs	r2, #6
 8008b2a:	68f9      	ldr	r1, [r7, #12]
 8008b2c:	6938      	ldr	r0, [r7, #16]
 8008b2e:	f7ff f90f 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f383 8811 	msr	BASEPRI, r3
}
 8008b38:	bf00      	nop
 8008b3a:	3720      	adds	r7, #32
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20005190 	.word	0x20005190
 8008b44:	20005160 	.word	0x20005160

08008b48 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8008b50:	4b04      	ldr	r3, [pc, #16]	; (8008b64 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	1ad3      	subs	r3, r2, r3
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	20005160 	.word	0x20005160

08008b68 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b08c      	sub	sp, #48	; 0x30
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	4603      	mov	r3, r0
 8008b70:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8008b72:	4b3b      	ldr	r3, [pc, #236]	; (8008c60 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d06d      	beq.n	8008c56 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8008b7a:	4b39      	ldr	r3, [pc, #228]	; (8008c60 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8008b80:	2300      	movs	r3, #0
 8008b82:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b84:	e008      	b.n	8008b98 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8008b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b88:	691b      	ldr	r3, [r3, #16]
 8008b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8008b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d007      	beq.n	8008ba2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8008b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b94:	3301      	adds	r3, #1
 8008b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d3f2      	bcc.n	8008b86 <SEGGER_SYSVIEW_SendModule+0x1e>
 8008ba0:	e000      	b.n	8008ba4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8008ba2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8008ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d055      	beq.n	8008c56 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008baa:	f3ef 8311 	mrs	r3, BASEPRI
 8008bae:	f04f 0120 	mov.w	r1, #32
 8008bb2:	f381 8811 	msr	BASEPRI, r1
 8008bb6:	617b      	str	r3, [r7, #20]
 8008bb8:	482a      	ldr	r0, [pc, #168]	; (8008c64 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8008bba:	f7fe ffde 	bl	8007b7a <_PreparePacket>
 8008bbe:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8008bc8:	79fb      	ldrb	r3, [r7, #7]
 8008bca:	623b      	str	r3, [r7, #32]
 8008bcc:	e00b      	b.n	8008be6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8008bce:	6a3b      	ldr	r3, [r7, #32]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	1c59      	adds	r1, r3, #1
 8008bd6:	6279      	str	r1, [r7, #36]	; 0x24
 8008bd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008bdc:	b2d2      	uxtb	r2, r2
 8008bde:	701a      	strb	r2, [r3, #0]
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	09db      	lsrs	r3, r3, #7
 8008be4:	623b      	str	r3, [r7, #32]
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	2b7f      	cmp	r3, #127	; 0x7f
 8008bea:	d8f0      	bhi.n	8008bce <SEGGER_SYSVIEW_SendModule+0x66>
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bee:	1c5a      	adds	r2, r3, #1
 8008bf0:	627a      	str	r2, [r7, #36]	; 0x24
 8008bf2:	6a3a      	ldr	r2, [r7, #32]
 8008bf4:	b2d2      	uxtb	r2, r2
 8008bf6:	701a      	strb	r2, [r3, #0]
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	61bb      	str	r3, [r7, #24]
 8008c06:	e00b      	b.n	8008c20 <SEGGER_SYSVIEW_SendModule+0xb8>
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	1c59      	adds	r1, r3, #1
 8008c10:	61f9      	str	r1, [r7, #28]
 8008c12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008c16:	b2d2      	uxtb	r2, r2
 8008c18:	701a      	strb	r2, [r3, #0]
 8008c1a:	69bb      	ldr	r3, [r7, #24]
 8008c1c:	09db      	lsrs	r3, r3, #7
 8008c1e:	61bb      	str	r3, [r7, #24]
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	2b7f      	cmp	r3, #127	; 0x7f
 8008c24:	d8f0      	bhi.n	8008c08 <SEGGER_SYSVIEW_SendModule+0xa0>
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	1c5a      	adds	r2, r3, #1
 8008c2a:	61fa      	str	r2, [r7, #28]
 8008c2c:	69ba      	ldr	r2, [r7, #24]
 8008c2e:	b2d2      	uxtb	r2, r2
 8008c30:	701a      	strb	r2, [r3, #0]
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2280      	movs	r2, #128	; 0x80
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	68f8      	ldr	r0, [r7, #12]
 8008c40:	f7fe ff4e 	bl	8007ae0 <_EncodeStr>
 8008c44:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8008c46:	2216      	movs	r2, #22
 8008c48:	68f9      	ldr	r1, [r7, #12]
 8008c4a:	6938      	ldr	r0, [r7, #16]
 8008c4c:	f7ff f880 	bl	8007d50 <_SendPacket>
      RECORD_END();
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8008c56:	bf00      	nop
 8008c58:	3730      	adds	r7, #48	; 0x30
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20005188 	.word	0x20005188
 8008c64:	20005190 	.word	0x20005190

08008c68 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8008c6e:	4b0c      	ldr	r3, [pc, #48]	; (8008ca0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d00f      	beq.n	8008c96 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8008c76:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	68db      	ldr	r3, [r3, #12]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	68db      	ldr	r3, [r3, #12]
 8008c88:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1f2      	bne.n	8008c7c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20005188 	.word	0x20005188

08008ca4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b086      	sub	sp, #24
 8008ca8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8008caa:	f3ef 8311 	mrs	r3, BASEPRI
 8008cae:	f04f 0120 	mov.w	r1, #32
 8008cb2:	f381 8811 	msr	BASEPRI, r1
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	4817      	ldr	r0, [pc, #92]	; (8008d18 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8008cba:	f7fe ff5e 	bl	8007b7a <_PreparePacket>
 8008cbe:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	617b      	str	r3, [r7, #20]
 8008cc8:	4b14      	ldr	r3, [pc, #80]	; (8008d1c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	613b      	str	r3, [r7, #16]
 8008cce:	e00b      	b.n	8008ce8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	1c59      	adds	r1, r3, #1
 8008cd8:	6179      	str	r1, [r7, #20]
 8008cda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008cde:	b2d2      	uxtb	r2, r2
 8008ce0:	701a      	strb	r2, [r3, #0]
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	09db      	lsrs	r3, r3, #7
 8008ce6:	613b      	str	r3, [r7, #16]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	2b7f      	cmp	r3, #127	; 0x7f
 8008cec:	d8f0      	bhi.n	8008cd0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	617a      	str	r2, [r7, #20]
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	b2d2      	uxtb	r2, r2
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8008cfe:	221b      	movs	r2, #27
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	68b8      	ldr	r0, [r7, #8]
 8008d04:	f7ff f824 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f383 8811 	msr	BASEPRI, r3
}
 8008d0e:	bf00      	nop
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20005190 	.word	0x20005190
 8008d1c:	2000518c 	.word	0x2000518c

08008d20 <SEGGER_SYSVIEW_Print>:
*    Print a string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Print(const char* s) {
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08a      	sub	sp, #40	; 0x28
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008d28:	f3ef 8311 	mrs	r3, BASEPRI
 8008d2c:	f04f 0120 	mov.w	r1, #32
 8008d30:	f381 8811 	msr	BASEPRI, r1
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	4827      	ldr	r0, [pc, #156]	; (8008dd4 <SEGGER_SYSVIEW_Print+0xb4>)
 8008d38:	f7fe ff1f 	bl	8007b7a <_PreparePacket>
 8008d3c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008d3e:	2280      	movs	r2, #128	; 0x80
 8008d40:	6879      	ldr	r1, [r7, #4]
 8008d42:	6938      	ldr	r0, [r7, #16]
 8008d44:	f7fe fecc 	bl	8007ae0 <_EncodeStr>
 8008d48:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_LOG);
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008d4e:	2300      	movs	r3, #0
 8008d50:	623b      	str	r3, [r7, #32]
 8008d52:	e00b      	b.n	8008d6c <SEGGER_SYSVIEW_Print+0x4c>
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	b2da      	uxtb	r2, r3
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	1c59      	adds	r1, r3, #1
 8008d5c:	6279      	str	r1, [r7, #36]	; 0x24
 8008d5e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d62:	b2d2      	uxtb	r2, r2
 8008d64:	701a      	strb	r2, [r3, #0]
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	09db      	lsrs	r3, r3, #7
 8008d6a:	623b      	str	r3, [r7, #32]
 8008d6c:	6a3b      	ldr	r3, [r7, #32]
 8008d6e:	2b7f      	cmp	r3, #127	; 0x7f
 8008d70:	d8f0      	bhi.n	8008d54 <SEGGER_SYSVIEW_Print+0x34>
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	627a      	str	r2, [r7, #36]	; 0x24
 8008d78:	6a3a      	ldr	r2, [r7, #32]
 8008d7a:	b2d2      	uxtb	r2, r2
 8008d7c:	701a      	strb	r2, [r3, #0]
 8008d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	2300      	movs	r3, #0
 8008d88:	61bb      	str	r3, [r7, #24]
 8008d8a:	e00b      	b.n	8008da4 <SEGGER_SYSVIEW_Print+0x84>
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	b2da      	uxtb	r2, r3
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	1c59      	adds	r1, r3, #1
 8008d94:	61f9      	str	r1, [r7, #28]
 8008d96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008d9a:	b2d2      	uxtb	r2, r2
 8008d9c:	701a      	strb	r2, [r3, #0]
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	09db      	lsrs	r3, r3, #7
 8008da2:	61bb      	str	r3, [r7, #24]
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	2b7f      	cmp	r3, #127	; 0x7f
 8008da8:	d8f0      	bhi.n	8008d8c <SEGGER_SYSVIEW_Print+0x6c>
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	61fa      	str	r2, [r7, #28]
 8008db0:	69ba      	ldr	r2, [r7, #24]
 8008db2:	b2d2      	uxtb	r2, r2
 8008db4:	701a      	strb	r2, [r3, #0]
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008dba:	221a      	movs	r2, #26
 8008dbc:	68f9      	ldr	r1, [r7, #12]
 8008dbe:	6938      	ldr	r0, [r7, #16]
 8008dc0:	f7fe ffc6 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f383 8811 	msr	BASEPRI, r3
}
 8008dca:	bf00      	nop
 8008dcc:	3728      	adds	r7, #40	; 0x28
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20005190 	.word	0x20005190

08008dd8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b08a      	sub	sp, #40	; 0x28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008de0:	f3ef 8311 	mrs	r3, BASEPRI
 8008de4:	f04f 0120 	mov.w	r1, #32
 8008de8:	f381 8811 	msr	BASEPRI, r1
 8008dec:	617b      	str	r3, [r7, #20]
 8008dee:	4827      	ldr	r0, [pc, #156]	; (8008e8c <SEGGER_SYSVIEW_Warn+0xb4>)
 8008df0:	f7fe fec3 	bl	8007b7a <_PreparePacket>
 8008df4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8008df6:	2280      	movs	r2, #128	; 0x80
 8008df8:	6879      	ldr	r1, [r7, #4]
 8008dfa:	6938      	ldr	r0, [r7, #16]
 8008dfc:	f7fe fe70 	bl	8007ae0 <_EncodeStr>
 8008e00:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24
 8008e06:	2301      	movs	r3, #1
 8008e08:	623b      	str	r3, [r7, #32]
 8008e0a:	e00b      	b.n	8008e24 <SEGGER_SYSVIEW_Warn+0x4c>
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e12:	1c59      	adds	r1, r3, #1
 8008e14:	6279      	str	r1, [r7, #36]	; 0x24
 8008e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e1a:	b2d2      	uxtb	r2, r2
 8008e1c:	701a      	strb	r2, [r3, #0]
 8008e1e:	6a3b      	ldr	r3, [r7, #32]
 8008e20:	09db      	lsrs	r3, r3, #7
 8008e22:	623b      	str	r3, [r7, #32]
 8008e24:	6a3b      	ldr	r3, [r7, #32]
 8008e26:	2b7f      	cmp	r3, #127	; 0x7f
 8008e28:	d8f0      	bhi.n	8008e0c <SEGGER_SYSVIEW_Warn+0x34>
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	627a      	str	r2, [r7, #36]	; 0x24
 8008e30:	6a3a      	ldr	r2, [r7, #32]
 8008e32:	b2d2      	uxtb	r2, r2
 8008e34:	701a      	strb	r2, [r3, #0]
 8008e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	61fb      	str	r3, [r7, #28]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	61bb      	str	r3, [r7, #24]
 8008e42:	e00b      	b.n	8008e5c <SEGGER_SYSVIEW_Warn+0x84>
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	1c59      	adds	r1, r3, #1
 8008e4c:	61f9      	str	r1, [r7, #28]
 8008e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008e52:	b2d2      	uxtb	r2, r2
 8008e54:	701a      	strb	r2, [r3, #0]
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	09db      	lsrs	r3, r3, #7
 8008e5a:	61bb      	str	r3, [r7, #24]
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e60:	d8f0      	bhi.n	8008e44 <SEGGER_SYSVIEW_Warn+0x6c>
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	1c5a      	adds	r2, r3, #1
 8008e66:	61fa      	str	r2, [r7, #28]
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	b2d2      	uxtb	r2, r2
 8008e6c:	701a      	strb	r2, [r3, #0]
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8008e72:	221a      	movs	r2, #26
 8008e74:	68f9      	ldr	r1, [r7, #12]
 8008e76:	6938      	ldr	r0, [r7, #16]
 8008e78:	f7fe ff6a 	bl	8007d50 <_SendPacket>
  RECORD_END();
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f383 8811 	msr	BASEPRI, r3
}
 8008e82:	bf00      	nop
 8008e84:	3728      	adds	r7, #40	; 0x28
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20005190 	.word	0x20005190

08008e90 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8008e90:	b580      	push	{r7, lr}
 8008e92:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8008e94:	4803      	ldr	r0, [pc, #12]	; (8008ea4 <_cbSendSystemDesc+0x14>)
 8008e96:	f7ff fcc3 	bl	8008820 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8008e9a:	4803      	ldr	r0, [pc, #12]	; (8008ea8 <_cbSendSystemDesc+0x18>)
 8008e9c:	f7ff fcc0 	bl	8008820 <SEGGER_SYSVIEW_SendSysDesc>
}
 8008ea0:	bf00      	nop
 8008ea2:	bd80      	pop	{r7, pc}
 8008ea4:	08009274 	.word	0x08009274
 8008ea8:	080092a8 	.word	0x080092a8

08008eac <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8008eb0:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <SEGGER_SYSVIEW_Conf+0x20>)
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <SEGGER_SYSVIEW_Conf+0x20>)
 8008eb6:	6819      	ldr	r1, [r3, #0]
 8008eb8:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <SEGGER_SYSVIEW_Conf+0x24>)
 8008eba:	4a06      	ldr	r2, [pc, #24]	; (8008ed4 <SEGGER_SYSVIEW_Conf+0x28>)
 8008ebc:	f7ff f82e 	bl	8007f1c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8008ec0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8008ec4:	f7ff f86e 	bl	8007fa4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8008ec8:	bf00      	nop
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	20000000 	.word	0x20000000
 8008ed0:	08008e91 	.word	0x08008e91
 8008ed4:	08009394 	.word	0x08009394

08008ed8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008ede:	2300      	movs	r3, #0
 8008ee0:	607b      	str	r3, [r7, #4]
 8008ee2:	e048      	b.n	8008f76 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8008ee4:	4928      	ldr	r1, [pc, #160]	; (8008f88 <_cbSendTaskList+0xb0>)
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	4613      	mov	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	4413      	add	r3, r2
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	440b      	add	r3, r1
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f7fd fa5f 	bl	80063b8 <uxTaskGetStackHighWaterMark>
 8008efa:	4923      	ldr	r1, [pc, #140]	; (8008f88 <_cbSendTaskList+0xb0>)
 8008efc:	687a      	ldr	r2, [r7, #4]
 8008efe:	4613      	mov	r3, r2
 8008f00:	009b      	lsls	r3, r3, #2
 8008f02:	4413      	add	r3, r2
 8008f04:	009b      	lsls	r3, r3, #2
 8008f06:	440b      	add	r3, r1
 8008f08:	3310      	adds	r3, #16
 8008f0a:	6018      	str	r0, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008f0c:	491e      	ldr	r1, [pc, #120]	; (8008f88 <_cbSendTaskList+0xb0>)
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	4613      	mov	r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	4413      	add	r3, r2
 8008f16:	009b      	lsls	r3, r3, #2
 8008f18:	440b      	add	r3, r1
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	491a      	ldr	r1, [pc, #104]	; (8008f88 <_cbSendTaskList+0xb0>)
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	4613      	mov	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	4413      	add	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	440b      	add	r3, r1
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	681c      	ldr	r4, [r3, #0]
 8008f2e:	4916      	ldr	r1, [pc, #88]	; (8008f88 <_cbSendTaskList+0xb0>)
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	4613      	mov	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	4413      	add	r3, r2
 8008f38:	009b      	lsls	r3, r3, #2
 8008f3a:	440b      	add	r3, r1
 8008f3c:	3308      	adds	r3, #8
 8008f3e:	681d      	ldr	r5, [r3, #0]
 8008f40:	4911      	ldr	r1, [pc, #68]	; (8008f88 <_cbSendTaskList+0xb0>)
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	4613      	mov	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	4413      	add	r3, r2
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	330c      	adds	r3, #12
 8008f50:	681e      	ldr	r6, [r3, #0]
 8008f52:	490d      	ldr	r1, [pc, #52]	; (8008f88 <_cbSendTaskList+0xb0>)
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	4613      	mov	r3, r2
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	440b      	add	r3, r1
 8008f60:	3310      	adds	r3, #16
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	4633      	mov	r3, r6
 8008f68:	462a      	mov	r2, r5
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	f000 f8b4 	bl	80090d8 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3301      	adds	r3, #1
 8008f74:	607b      	str	r3, [r7, #4]
 8008f76:	4b05      	ldr	r3, [pc, #20]	; (8008f8c <_cbSendTaskList+0xb4>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d3b1      	bcc.n	8008ee4 <_cbSendTaskList+0xc>
  }
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f88:	20005274 	.word	0x20005274
 8008f8c:	20005314 	.word	0x20005314

08008f90 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008f96:	f7fc fecb 	bl	8005d30 <xTaskGetTickCountFromISR>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	f04f 0400 	mov.w	r4, #0
 8008fa0:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008fa4:	e9d7 5600 	ldrd	r5, r6, [r7]
 8008fa8:	462b      	mov	r3, r5
 8008faa:	4634      	mov	r4, r6
 8008fac:	f04f 0100 	mov.w	r1, #0
 8008fb0:	f04f 0200 	mov.w	r2, #0
 8008fb4:	0162      	lsls	r2, r4, #5
 8008fb6:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8008fba:	0159      	lsls	r1, r3, #5
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	4614      	mov	r4, r2
 8008fc0:	1b5b      	subs	r3, r3, r5
 8008fc2:	eb64 0406 	sbc.w	r4, r4, r6
 8008fc6:	f04f 0100 	mov.w	r1, #0
 8008fca:	f04f 0200 	mov.w	r2, #0
 8008fce:	00a2      	lsls	r2, r4, #2
 8008fd0:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8008fd4:	0099      	lsls	r1, r3, #2
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4614      	mov	r4, r2
 8008fda:	195b      	adds	r3, r3, r5
 8008fdc:	eb44 0406 	adc.w	r4, r4, r6
 8008fe0:	f04f 0100 	mov.w	r1, #0
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	00e2      	lsls	r2, r4, #3
 8008fea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008fee:	00d9      	lsls	r1, r3, #3
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4614      	mov	r4, r2
 8008ff4:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8008ff8:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	4621      	mov	r1, r4
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08009008 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8009008:	b580      	push	{r7, lr}
 800900a:	b086      	sub	sp, #24
 800900c:	af02      	add	r7, sp, #8
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8009016:	2205      	movs	r2, #5
 8009018:	492b      	ldr	r1, [pc, #172]	; (80090c8 <SYSVIEW_AddTask+0xc0>)
 800901a:	68b8      	ldr	r0, [r7, #8]
 800901c:	f000 f8a2 	bl	8009164 <memcmp>
 8009020:	4603      	mov	r3, r0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d04b      	beq.n	80090be <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8009026:	4b29      	ldr	r3, [pc, #164]	; (80090cc <SYSVIEW_AddTask+0xc4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b07      	cmp	r3, #7
 800902c:	d903      	bls.n	8009036 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800902e:	4828      	ldr	r0, [pc, #160]	; (80090d0 <SYSVIEW_AddTask+0xc8>)
 8009030:	f7ff fed2 	bl	8008dd8 <SEGGER_SYSVIEW_Warn>
    return;
 8009034:	e044      	b.n	80090c0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8009036:	4b25      	ldr	r3, [pc, #148]	; (80090cc <SYSVIEW_AddTask+0xc4>)
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	4926      	ldr	r1, [pc, #152]	; (80090d4 <SYSVIEW_AddTask+0xcc>)
 800903c:	4613      	mov	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	009b      	lsls	r3, r3, #2
 8009044:	440b      	add	r3, r1
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800904a:	4b20      	ldr	r3, [pc, #128]	; (80090cc <SYSVIEW_AddTask+0xc4>)
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	4921      	ldr	r1, [pc, #132]	; (80090d4 <SYSVIEW_AddTask+0xcc>)
 8009050:	4613      	mov	r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	4413      	add	r3, r2
 8009056:	009b      	lsls	r3, r3, #2
 8009058:	440b      	add	r3, r1
 800905a:	3304      	adds	r3, #4
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8009060:	4b1a      	ldr	r3, [pc, #104]	; (80090cc <SYSVIEW_AddTask+0xc4>)
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	491b      	ldr	r1, [pc, #108]	; (80090d4 <SYSVIEW_AddTask+0xcc>)
 8009066:	4613      	mov	r3, r2
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	009b      	lsls	r3, r3, #2
 800906e:	440b      	add	r3, r1
 8009070:	3308      	adds	r3, #8
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8009076:	4b15      	ldr	r3, [pc, #84]	; (80090cc <SYSVIEW_AddTask+0xc4>)
 8009078:	681a      	ldr	r2, [r3, #0]
 800907a:	4916      	ldr	r1, [pc, #88]	; (80090d4 <SYSVIEW_AddTask+0xcc>)
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	440b      	add	r3, r1
 8009086:	330c      	adds	r3, #12
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800908c:	4b0f      	ldr	r3, [pc, #60]	; (80090cc <SYSVIEW_AddTask+0xc4>)
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	4910      	ldr	r1, [pc, #64]	; (80090d4 <SYSVIEW_AddTask+0xcc>)
 8009092:	4613      	mov	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	4413      	add	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	440b      	add	r3, r1
 800909c:	3310      	adds	r3, #16
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80090a2:	4b0a      	ldr	r3, [pc, #40]	; (80090cc <SYSVIEW_AddTask+0xc4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	3301      	adds	r3, #1
 80090a8:	4a08      	ldr	r2, [pc, #32]	; (80090cc <SYSVIEW_AddTask+0xc4>)
 80090aa:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80090ac:	69bb      	ldr	r3, [r7, #24]
 80090ae:	9300      	str	r3, [sp, #0]
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	68b9      	ldr	r1, [r7, #8]
 80090b6:	68f8      	ldr	r0, [r7, #12]
 80090b8:	f000 f80e 	bl	80090d8 <SYSVIEW_SendTaskInfo>
 80090bc:	e000      	b.n	80090c0 <SYSVIEW_AddTask+0xb8>
    return;
 80090be:	bf00      	nop

}
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	080092b8 	.word	0x080092b8
 80090cc:	20005314 	.word	0x20005314
 80090d0:	080092c0 	.word	0x080092c0
 80090d4:	20005274 	.word	0x20005274

080090d8 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80090d8:	b580      	push	{r7, lr}
 80090da:	b08a      	sub	sp, #40	; 0x28
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	607a      	str	r2, [r7, #4]
 80090e4:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80090e6:	f107 0314 	add.w	r3, r7, #20
 80090ea:	2214      	movs	r2, #20
 80090ec:	2100      	movs	r1, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 f852 	bl	8009198 <memset>
  TaskInfo.TaskID     = TaskID;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8009108:	f107 0314 	add.w	r3, r7, #20
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff fa8f 	bl	8008630 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8009112:	bf00      	nop
 8009114:	3728      	adds	r7, #40	; 0x28
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
	...

0800911c <__libc_init_array>:
 800911c:	b570      	push	{r4, r5, r6, lr}
 800911e:	4e0d      	ldr	r6, [pc, #52]	; (8009154 <__libc_init_array+0x38>)
 8009120:	4c0d      	ldr	r4, [pc, #52]	; (8009158 <__libc_init_array+0x3c>)
 8009122:	1ba4      	subs	r4, r4, r6
 8009124:	10a4      	asrs	r4, r4, #2
 8009126:	2500      	movs	r5, #0
 8009128:	42a5      	cmp	r5, r4
 800912a:	d109      	bne.n	8009140 <__libc_init_array+0x24>
 800912c:	4e0b      	ldr	r6, [pc, #44]	; (800915c <__libc_init_array+0x40>)
 800912e:	4c0c      	ldr	r4, [pc, #48]	; (8009160 <__libc_init_array+0x44>)
 8009130:	f000 f83a 	bl	80091a8 <_init>
 8009134:	1ba4      	subs	r4, r4, r6
 8009136:	10a4      	asrs	r4, r4, #2
 8009138:	2500      	movs	r5, #0
 800913a:	42a5      	cmp	r5, r4
 800913c:	d105      	bne.n	800914a <__libc_init_array+0x2e>
 800913e:	bd70      	pop	{r4, r5, r6, pc}
 8009140:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009144:	4798      	blx	r3
 8009146:	3501      	adds	r5, #1
 8009148:	e7ee      	b.n	8009128 <__libc_init_array+0xc>
 800914a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800914e:	4798      	blx	r3
 8009150:	3501      	adds	r5, #1
 8009152:	e7f2      	b.n	800913a <__libc_init_array+0x1e>
 8009154:	080093a4 	.word	0x080093a4
 8009158:	080093a4 	.word	0x080093a4
 800915c:	080093a4 	.word	0x080093a4
 8009160:	080093a8 	.word	0x080093a8

08009164 <memcmp>:
 8009164:	b530      	push	{r4, r5, lr}
 8009166:	2400      	movs	r4, #0
 8009168:	42a2      	cmp	r2, r4
 800916a:	d101      	bne.n	8009170 <memcmp+0xc>
 800916c:	2000      	movs	r0, #0
 800916e:	e007      	b.n	8009180 <memcmp+0x1c>
 8009170:	5d03      	ldrb	r3, [r0, r4]
 8009172:	3401      	adds	r4, #1
 8009174:	190d      	adds	r5, r1, r4
 8009176:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800917a:	42ab      	cmp	r3, r5
 800917c:	d0f4      	beq.n	8009168 <memcmp+0x4>
 800917e:	1b58      	subs	r0, r3, r5
 8009180:	bd30      	pop	{r4, r5, pc}

08009182 <memcpy>:
 8009182:	b510      	push	{r4, lr}
 8009184:	1e43      	subs	r3, r0, #1
 8009186:	440a      	add	r2, r1
 8009188:	4291      	cmp	r1, r2
 800918a:	d100      	bne.n	800918e <memcpy+0xc>
 800918c:	bd10      	pop	{r4, pc}
 800918e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009192:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009196:	e7f7      	b.n	8009188 <memcpy+0x6>

08009198 <memset>:
 8009198:	4402      	add	r2, r0
 800919a:	4603      	mov	r3, r0
 800919c:	4293      	cmp	r3, r2
 800919e:	d100      	bne.n	80091a2 <memset+0xa>
 80091a0:	4770      	bx	lr
 80091a2:	f803 1b01 	strb.w	r1, [r3], #1
 80091a6:	e7f9      	b.n	800919c <memset+0x4>

080091a8 <_init>:
 80091a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091aa:	bf00      	nop
 80091ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ae:	bc08      	pop	{r3}
 80091b0:	469e      	mov	lr, r3
 80091b2:	4770      	bx	lr

080091b4 <_fini>:
 80091b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091b6:	bf00      	nop
 80091b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ba:	bc08      	pop	{r3}
 80091bc:	469e      	mov	lr, r3
 80091be:	4770      	bx	lr
