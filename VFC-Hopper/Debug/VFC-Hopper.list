
VFC-Hopper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071d4  080071d4  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080071d4  080071d4  000171d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071dc  080071dc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071dc  080071dc  000171dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071e0  080071e0  000171e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080071e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005484  20000020  08007204  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200054a4  08007204  000254a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c711  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003412  00000000  00000000  0003c761  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001578  00000000  00000000  0003fb78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d0  00000000  00000000  000410f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000235c5  00000000  00000000  000424c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011b5c  00000000  00000000  00065a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d78e3  00000000  00000000  000775e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014eec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059a8  00000000  00000000  0014ef40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000020 	.word	0x20000020
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fe0 	.word	0x08006fe0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000024 	.word	0x20000024
 80001cc:	08006fe0 	.word	0x08006fe0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200053fc 	.word	0x200053fc

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b972 	b.w	8000560 <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	4604      	mov	r4, r0
 800029c:	4688      	mov	r8, r1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d14b      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a2:	428a      	cmp	r2, r1
 80002a4:	4615      	mov	r5, r2
 80002a6:	d967      	bls.n	8000378 <__udivmoddi4+0xe4>
 80002a8:	fab2 f282 	clz	r2, r2
 80002ac:	b14a      	cbz	r2, 80002c2 <__udivmoddi4+0x2e>
 80002ae:	f1c2 0720 	rsb	r7, r2, #32
 80002b2:	fa01 f302 	lsl.w	r3, r1, r2
 80002b6:	fa20 f707 	lsr.w	r7, r0, r7
 80002ba:	4095      	lsls	r5, r2
 80002bc:	ea47 0803 	orr.w	r8, r7, r3
 80002c0:	4094      	lsls	r4, r2
 80002c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002c6:	0c23      	lsrs	r3, r4, #16
 80002c8:	fbb8 f7fe 	udiv	r7, r8, lr
 80002cc:	fa1f fc85 	uxth.w	ip, r5
 80002d0:	fb0e 8817 	mls	r8, lr, r7, r8
 80002d4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002d8:	fb07 f10c 	mul.w	r1, r7, ip
 80002dc:	4299      	cmp	r1, r3
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x60>
 80002e0:	18eb      	adds	r3, r5, r3
 80002e2:	f107 30ff 	add.w	r0, r7, #4294967295
 80002e6:	f080 811b 	bcs.w	8000520 <__udivmoddi4+0x28c>
 80002ea:	4299      	cmp	r1, r3
 80002ec:	f240 8118 	bls.w	8000520 <__udivmoddi4+0x28c>
 80002f0:	3f02      	subs	r7, #2
 80002f2:	442b      	add	r3, r5
 80002f4:	1a5b      	subs	r3, r3, r1
 80002f6:	b2a4      	uxth	r4, r4
 80002f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000300:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000304:	fb00 fc0c 	mul.w	ip, r0, ip
 8000308:	45a4      	cmp	ip, r4
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x8c>
 800030c:	192c      	adds	r4, r5, r4
 800030e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000312:	f080 8107 	bcs.w	8000524 <__udivmoddi4+0x290>
 8000316:	45a4      	cmp	ip, r4
 8000318:	f240 8104 	bls.w	8000524 <__udivmoddi4+0x290>
 800031c:	3802      	subs	r0, #2
 800031e:	442c      	add	r4, r5
 8000320:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000324:	eba4 040c 	sub.w	r4, r4, ip
 8000328:	2700      	movs	r7, #0
 800032a:	b11e      	cbz	r6, 8000334 <__udivmoddi4+0xa0>
 800032c:	40d4      	lsrs	r4, r2
 800032e:	2300      	movs	r3, #0
 8000330:	e9c6 4300 	strd	r4, r3, [r6]
 8000334:	4639      	mov	r1, r7
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0xbe>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80eb 	beq.w	800051a <__udivmoddi4+0x286>
 8000344:	2700      	movs	r7, #0
 8000346:	e9c6 0100 	strd	r0, r1, [r6]
 800034a:	4638      	mov	r0, r7
 800034c:	4639      	mov	r1, r7
 800034e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000352:	fab3 f783 	clz	r7, r3
 8000356:	2f00      	cmp	r7, #0
 8000358:	d147      	bne.n	80003ea <__udivmoddi4+0x156>
 800035a:	428b      	cmp	r3, r1
 800035c:	d302      	bcc.n	8000364 <__udivmoddi4+0xd0>
 800035e:	4282      	cmp	r2, r0
 8000360:	f200 80fa 	bhi.w	8000558 <__udivmoddi4+0x2c4>
 8000364:	1a84      	subs	r4, r0, r2
 8000366:	eb61 0303 	sbc.w	r3, r1, r3
 800036a:	2001      	movs	r0, #1
 800036c:	4698      	mov	r8, r3
 800036e:	2e00      	cmp	r6, #0
 8000370:	d0e0      	beq.n	8000334 <__udivmoddi4+0xa0>
 8000372:	e9c6 4800 	strd	r4, r8, [r6]
 8000376:	e7dd      	b.n	8000334 <__udivmoddi4+0xa0>
 8000378:	b902      	cbnz	r2, 800037c <__udivmoddi4+0xe8>
 800037a:	deff      	udf	#255	; 0xff
 800037c:	fab2 f282 	clz	r2, r2
 8000380:	2a00      	cmp	r2, #0
 8000382:	f040 808f 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000386:	1b49      	subs	r1, r1, r5
 8000388:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800038c:	fa1f f885 	uxth.w	r8, r5
 8000390:	2701      	movs	r7, #1
 8000392:	fbb1 fcfe 	udiv	ip, r1, lr
 8000396:	0c23      	lsrs	r3, r4, #16
 8000398:	fb0e 111c 	mls	r1, lr, ip, r1
 800039c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a0:	fb08 f10c 	mul.w	r1, r8, ip
 80003a4:	4299      	cmp	r1, r3
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a8:	18eb      	adds	r3, r5, r3
 80003aa:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4299      	cmp	r1, r3
 80003b2:	f200 80cd 	bhi.w	8000550 <__udivmoddi4+0x2bc>
 80003b6:	4684      	mov	ip, r0
 80003b8:	1a59      	subs	r1, r3, r1
 80003ba:	b2a3      	uxth	r3, r4
 80003bc:	fbb1 f0fe 	udiv	r0, r1, lr
 80003c0:	fb0e 1410 	mls	r4, lr, r0, r1
 80003c4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003c8:	fb08 f800 	mul.w	r8, r8, r0
 80003cc:	45a0      	cmp	r8, r4
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x14c>
 80003d0:	192c      	adds	r4, r5, r4
 80003d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d6:	d202      	bcs.n	80003de <__udivmoddi4+0x14a>
 80003d8:	45a0      	cmp	r8, r4
 80003da:	f200 80b6 	bhi.w	800054a <__udivmoddi4+0x2b6>
 80003de:	4618      	mov	r0, r3
 80003e0:	eba4 0408 	sub.w	r4, r4, r8
 80003e4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e8:	e79f      	b.n	800032a <__udivmoddi4+0x96>
 80003ea:	f1c7 0c20 	rsb	ip, r7, #32
 80003ee:	40bb      	lsls	r3, r7
 80003f0:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003f4:	ea4e 0e03 	orr.w	lr, lr, r3
 80003f8:	fa01 f407 	lsl.w	r4, r1, r7
 80003fc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000400:	fa21 f30c 	lsr.w	r3, r1, ip
 8000404:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000408:	4325      	orrs	r5, r4
 800040a:	fbb3 f9f8 	udiv	r9, r3, r8
 800040e:	0c2c      	lsrs	r4, r5, #16
 8000410:	fb08 3319 	mls	r3, r8, r9, r3
 8000414:	fa1f fa8e 	uxth.w	sl, lr
 8000418:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800041c:	fb09 f40a 	mul.w	r4, r9, sl
 8000420:	429c      	cmp	r4, r3
 8000422:	fa02 f207 	lsl.w	r2, r2, r7
 8000426:	fa00 f107 	lsl.w	r1, r0, r7
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1e 0303 	adds.w	r3, lr, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	f080 8087 	bcs.w	8000546 <__udivmoddi4+0x2b2>
 8000438:	429c      	cmp	r4, r3
 800043a:	f240 8084 	bls.w	8000546 <__udivmoddi4+0x2b2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	4473      	add	r3, lr
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	b2ad      	uxth	r5, r5
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000454:	fb00 fa0a 	mul.w	sl, r0, sl
 8000458:	45a2      	cmp	sl, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1e 0404 	adds.w	r4, lr, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	d26b      	bcs.n	800053e <__udivmoddi4+0x2aa>
 8000466:	45a2      	cmp	sl, r4
 8000468:	d969      	bls.n	800053e <__udivmoddi4+0x2aa>
 800046a:	3802      	subs	r0, #2
 800046c:	4474      	add	r4, lr
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	eba4 040a 	sub.w	r4, r4, sl
 800047a:	454c      	cmp	r4, r9
 800047c:	46c2      	mov	sl, r8
 800047e:	464b      	mov	r3, r9
 8000480:	d354      	bcc.n	800052c <__udivmoddi4+0x298>
 8000482:	d051      	beq.n	8000528 <__udivmoddi4+0x294>
 8000484:	2e00      	cmp	r6, #0
 8000486:	d069      	beq.n	800055c <__udivmoddi4+0x2c8>
 8000488:	ebb1 050a 	subs.w	r5, r1, sl
 800048c:	eb64 0403 	sbc.w	r4, r4, r3
 8000490:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000494:	40fd      	lsrs	r5, r7
 8000496:	40fc      	lsrs	r4, r7
 8000498:	ea4c 0505 	orr.w	r5, ip, r5
 800049c:	e9c6 5400 	strd	r5, r4, [r6]
 80004a0:	2700      	movs	r7, #0
 80004a2:	e747      	b.n	8000334 <__udivmoddi4+0xa0>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f703 	lsr.w	r7, r0, r3
 80004ac:	4095      	lsls	r5, r2
 80004ae:	fa01 f002 	lsl.w	r0, r1, r2
 80004b2:	fa21 f303 	lsr.w	r3, r1, r3
 80004b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004ba:	4338      	orrs	r0, r7
 80004bc:	0c01      	lsrs	r1, r0, #16
 80004be:	fbb3 f7fe 	udiv	r7, r3, lr
 80004c2:	fa1f f885 	uxth.w	r8, r5
 80004c6:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb07 f308 	mul.w	r3, r7, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	fa04 f402 	lsl.w	r4, r4, r2
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x256>
 80004da:	1869      	adds	r1, r5, r1
 80004dc:	f107 3cff 	add.w	ip, r7, #4294967295
 80004e0:	d22f      	bcs.n	8000542 <__udivmoddi4+0x2ae>
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d92d      	bls.n	8000542 <__udivmoddi4+0x2ae>
 80004e6:	3f02      	subs	r7, #2
 80004e8:	4429      	add	r1, r5
 80004ea:	1acb      	subs	r3, r1, r3
 80004ec:	b281      	uxth	r1, r0
 80004ee:	fbb3 f0fe 	udiv	r0, r3, lr
 80004f2:	fb0e 3310 	mls	r3, lr, r0, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb00 f308 	mul.w	r3, r0, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x27e>
 8000502:	1869      	adds	r1, r5, r1
 8000504:	f100 3cff 	add.w	ip, r0, #4294967295
 8000508:	d217      	bcs.n	800053a <__udivmoddi4+0x2a6>
 800050a:	428b      	cmp	r3, r1
 800050c:	d915      	bls.n	800053a <__udivmoddi4+0x2a6>
 800050e:	3802      	subs	r0, #2
 8000510:	4429      	add	r1, r5
 8000512:	1ac9      	subs	r1, r1, r3
 8000514:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000518:	e73b      	b.n	8000392 <__udivmoddi4+0xfe>
 800051a:	4637      	mov	r7, r6
 800051c:	4630      	mov	r0, r6
 800051e:	e709      	b.n	8000334 <__udivmoddi4+0xa0>
 8000520:	4607      	mov	r7, r0
 8000522:	e6e7      	b.n	80002f4 <__udivmoddi4+0x60>
 8000524:	4618      	mov	r0, r3
 8000526:	e6fb      	b.n	8000320 <__udivmoddi4+0x8c>
 8000528:	4541      	cmp	r1, r8
 800052a:	d2ab      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 800052c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000530:	eb69 020e 	sbc.w	r2, r9, lr
 8000534:	3801      	subs	r0, #1
 8000536:	4613      	mov	r3, r2
 8000538:	e7a4      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053a:	4660      	mov	r0, ip
 800053c:	e7e9      	b.n	8000512 <__udivmoddi4+0x27e>
 800053e:	4618      	mov	r0, r3
 8000540:	e795      	b.n	800046e <__udivmoddi4+0x1da>
 8000542:	4667      	mov	r7, ip
 8000544:	e7d1      	b.n	80004ea <__udivmoddi4+0x256>
 8000546:	4681      	mov	r9, r0
 8000548:	e77c      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054a:	3802      	subs	r0, #2
 800054c:	442c      	add	r4, r5
 800054e:	e747      	b.n	80003e0 <__udivmoddi4+0x14c>
 8000550:	f1ac 0c02 	sub.w	ip, ip, #2
 8000554:	442b      	add	r3, r5
 8000556:	e72f      	b.n	80003b8 <__udivmoddi4+0x124>
 8000558:	4638      	mov	r0, r7
 800055a:	e708      	b.n	800036e <__udivmoddi4+0xda>
 800055c:	4637      	mov	r7, r6
 800055e:	e6e9      	b.n	8000334 <__udivmoddi4+0xa0>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0

}
 8000568:	bf00      	nop
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000572:	b480      	push	{r7}
 8000574:	af00      	add	r7, sp, #0
return 0;
 8000576:	2300      	movs	r3, #0
}
 8000578:	4618      	mov	r0, r3
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000588:	f000 fb7c 	bl	8000c84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058c:	f000 f84a 	bl	8000624 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  SEGGER_SYSVIEW_Conf();
 8000590:	f006 fba8 	bl	8006ce4 <SEGGER_SYSVIEW_Conf>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000594:	f000 f956 	bl	8000844 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000598:	f000 f8ac 	bl	80006f4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800059c:	2100      	movs	r1, #0
 800059e:	4818      	ldr	r0, [pc, #96]	; (8000600 <main+0x7c>)
 80005a0:	f001 fb0c 	bl	8001bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80005a4:	2104      	movs	r1, #4
 80005a6:	4816      	ldr	r0, [pc, #88]	; (8000600 <main+0x7c>)
 80005a8:	f001 fb08 	bl	8001bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80005ac:	2108      	movs	r1, #8
 80005ae:	4814      	ldr	r0, [pc, #80]	; (8000600 <main+0x7c>)
 80005b0:	f001 fb04 	bl	8001bbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80005b4:	210c      	movs	r1, #12
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <main+0x7c>)
 80005b8:	f001 fb00 	bl	8001bbc <HAL_TIM_PWM_Start>

  MTR_Init(&htim1, &semPWMPendingHandle);
 80005bc:	4911      	ldr	r1, [pc, #68]	; (8000604 <main+0x80>)
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <main+0x7c>)
 80005c0:	f000 f9c0 	bl	8000944 <MTR_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c4:	f002 f88e 	bl	80026e4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semPWMPending */
  semPWMPendingHandle = osSemaphoreNew(1, 1, &semPWMPending_attributes);
 80005c8:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <main+0x84>)
 80005ca:	2101      	movs	r1, #1
 80005cc:	2001      	movs	r0, #1
 80005ce:	f002 f9c7 	bl	8002960 <osSemaphoreNew>
 80005d2:	4602      	mov	r2, r0
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <main+0x80>)
 80005d6:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d8:	4a0c      	ldr	r2, [pc, #48]	; (800060c <main+0x88>)
 80005da:	2100      	movs	r1, #0
 80005dc:	480c      	ldr	r0, [pc, #48]	; (8000610 <main+0x8c>)
 80005de:	f002 f8eb 	bl	80027b8 <osThreadNew>
 80005e2:	4602      	mov	r2, r0
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <main+0x90>)
 80005e6:	601a      	str	r2, [r3, #0]

  /* creation of task_UpdatePWM */
  task_UpdatePWMHandle = osThreadNew(MTR_TaskUpdate, NULL, &task_UpdatePWM_attributes);
 80005e8:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <main+0x94>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	480b      	ldr	r0, [pc, #44]	; (800061c <main+0x98>)
 80005ee:	f002 f8e3 	bl	80027b8 <osThreadNew>
 80005f2:	4602      	mov	r2, r0
 80005f4:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <main+0x9c>)
 80005f6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f002 f8a8 	bl	800274c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x78>
 80005fe:	bf00      	nop
 8000600:	20005334 	.word	0x20005334
 8000604:	20005330 	.word	0x20005330
 8000608:	08007198 	.word	0x08007198
 800060c:	08007150 	.word	0x08007150
 8000610:	08000879 	.word	0x08000879
 8000614:	20005324 	.word	0x20005324
 8000618:	08007174 	.word	0x08007174
 800061c:	080009bd 	.word	0x080009bd
 8000620:	20005328 	.word	0x20005328

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b094      	sub	sp, #80	; 0x50
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	2230      	movs	r2, #48	; 0x30
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f006 fccc 	bl	8006fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]
 8000646:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	4b27      	ldr	r3, [pc, #156]	; (80006ec <SystemClock_Config+0xc8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <SystemClock_Config+0xc8>)
 8000652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000656:	6413      	str	r3, [r2, #64]	; 0x40
 8000658:	4b24      	ldr	r3, [pc, #144]	; (80006ec <SystemClock_Config+0xc8>)
 800065a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000660:	60bb      	str	r3, [r7, #8]
 8000662:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000664:	2300      	movs	r3, #0
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	4b21      	ldr	r3, [pc, #132]	; (80006f0 <SystemClock_Config+0xcc>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <SystemClock_Config+0xcc>)
 800066e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000672:	6013      	str	r3, [r2, #0]
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <SystemClock_Config+0xcc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000680:	2302      	movs	r3, #2
 8000682:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000684:	2301      	movs	r3, #1
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000688:	2310      	movs	r3, #16
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068c:	2302      	movs	r3, #2
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000690:	2300      	movs	r3, #0
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000694:	2310      	movs	r3, #16
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000698:	23c0      	movs	r3, #192	; 0xc0
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a0:	2304      	movs	r3, #4
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 0320 	add.w	r3, r7, #32
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 fda9 	bl	8001200 <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b4:	f000 f941 	bl	800093a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b8:	230f      	movs	r3, #15
 80006ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006bc:	2302      	movs	r3, #2
 80006be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006c0:	2390      	movs	r3, #144	; 0x90
 80006c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f804 	bl	80016e0 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80006de:	f000 f92c 	bl	800093a <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b092      	sub	sp, #72	; 0x48
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]
 8000716:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	2220      	movs	r2, #32
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f006 fc56 	bl	8006fd0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000724:	4b45      	ldr	r3, [pc, #276]	; (800083c <MX_TIM1_Init+0x148>)
 8000726:	4a46      	ldr	r2, [pc, #280]	; (8000840 <MX_TIM1_Init+0x14c>)
 8000728:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24-1;
 800072a:	4b44      	ldr	r3, [pc, #272]	; (800083c <MX_TIM1_Init+0x148>)
 800072c:	2217      	movs	r2, #23
 800072e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000730:	4b42      	ldr	r3, [pc, #264]	; (800083c <MX_TIM1_Init+0x148>)
 8000732:	2220      	movs	r2, #32
 8000734:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 8000736:	4b41      	ldr	r3, [pc, #260]	; (800083c <MX_TIM1_Init+0x148>)
 8000738:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800073c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800073e:	4b3f      	ldr	r3, [pc, #252]	; (800083c <MX_TIM1_Init+0x148>)
 8000740:	2200      	movs	r2, #0
 8000742:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000744:	4b3d      	ldr	r3, [pc, #244]	; (800083c <MX_TIM1_Init+0x148>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800074a:	4b3c      	ldr	r3, [pc, #240]	; (800083c <MX_TIM1_Init+0x148>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000750:	483a      	ldr	r0, [pc, #232]	; (800083c <MX_TIM1_Init+0x148>)
 8000752:	f001 fa08 	bl	8001b66 <HAL_TIM_PWM_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800075c:	f000 f8ed 	bl	800093a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000764:	2300      	movs	r3, #0
 8000766:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800076c:	4619      	mov	r1, r3
 800076e:	4833      	ldr	r0, [pc, #204]	; (800083c <MX_TIM1_Init+0x148>)
 8000770:	f001 fece 	bl	8002510 <HAL_TIMEx_MasterConfigSynchronization>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800077a:	f000 f8de 	bl	800093a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800077e:	2360      	movs	r3, #96	; 0x60
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1005;
 8000782:	f240 33ed 	movw	r3, #1005	; 0x3ed
 8000786:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000788:	2300      	movs	r3, #0
 800078a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800078c:	2300      	movs	r3, #0
 800078e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000794:	2300      	movs	r3, #0
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a0:	2200      	movs	r2, #0
 80007a2:	4619      	mov	r1, r3
 80007a4:	4825      	ldr	r0, [pc, #148]	; (800083c <MX_TIM1_Init+0x148>)
 80007a6:	f001 fb4f 	bl	8001e48 <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80007b0:	f000 f8c3 	bl	800093a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	2204      	movs	r2, #4
 80007ba:	4619      	mov	r1, r3
 80007bc:	481f      	ldr	r0, [pc, #124]	; (800083c <MX_TIM1_Init+0x148>)
 80007be:	f001 fb43 	bl	8001e48 <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80007c8:	f000 f8b7 	bl	800093a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d0:	2208      	movs	r2, #8
 80007d2:	4619      	mov	r1, r3
 80007d4:	4819      	ldr	r0, [pc, #100]	; (800083c <MX_TIM1_Init+0x148>)
 80007d6:	f001 fb37 	bl	8001e48 <HAL_TIM_PWM_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80007e0:	f000 f8ab 	bl	800093a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e8:	220c      	movs	r2, #12
 80007ea:	4619      	mov	r1, r3
 80007ec:	4813      	ldr	r0, [pc, #76]	; (800083c <MX_TIM1_Init+0x148>)
 80007ee:	f001 fb2b 	bl	8001e48 <HAL_TIM_PWM_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80007f8:	f000 f89f 	bl	800093a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000816:	2300      	movs	r3, #0
 8000818:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	4619      	mov	r1, r3
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_TIM1_Init+0x148>)
 8000820:	f001 fef2 	bl	8002608 <HAL_TIMEx_ConfigBreakDeadTime>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800082a:	f000 f886 	bl	800093a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <MX_TIM1_Init+0x148>)
 8000830:	f000 f936 	bl	8000aa0 <HAL_TIM_MspPostInit>

}
 8000834:	bf00      	nop
 8000836:	3748      	adds	r7, #72	; 0x48
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20005334 	.word	0x20005334
 8000840:	40010000 	.word	0x40010000

08000844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <MX_GPIO_Init+0x30>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <MX_GPIO_Init+0x30>)
 8000854:	f043 0310 	orr.w	r3, r3, #16
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <MX_GPIO_Init+0x30>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]

}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800

08000878 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b091      	sub	sp, #68	; 0x44
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	size_t min[4] = {1005,1005,1005,1005};
 8000880:	4b24      	ldr	r3, [pc, #144]	; (8000914 <StartDefaultTask+0x9c>)
 8000882:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8000886:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000888:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	size_t max[4] = {1970,1970,1970,1970};
 800088c:	4b22      	ldr	r3, [pc, #136]	; (8000918 <StartDefaultTask+0xa0>)
 800088e:	f107 041c 	add.w	r4, r7, #28
 8000892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MTR_UpdateState(min);
 8000898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800089c:	4618      	mov	r0, r3
 800089e:	f000 f871 	bl	8000984 <MTR_UpdateState>
	osDelay(3000);
 80008a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008a6:	f002 f82d 	bl	8002904 <osDelay>
	MTR_UpdateState(max);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f868 	bl	8000984 <MTR_UpdateState>
	osDelay(3000);
 80008b4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008b8:	f002 f824 	bl	8002904 <osDelay>
	MTR_UpdateState(min);
 80008bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008c0:	4618      	mov	r0, r3
 80008c2:	f000 f85f 	bl	8000984 <MTR_UpdateState>
	osDelay(3000);
 80008c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008ca:	f002 f81b 	bl	8002904 <osDelay>

	size_t testVal = 1005;
 80008ce:	f240 33ed 	movw	r3, #1005	; 0x3ed
 80008d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  for(;;)
  {
	  size_t initValues[4] = {testVal,1005,1005,1005};
 80008d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	f240 33ed 	movw	r3, #1005	; 0x3ed
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	f240 33ed 	movw	r3, #1005	; 0x3ed
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	f240 33ed 	movw	r3, #1005	; 0x3ed
 80008e8:	61bb      	str	r3, [r7, #24]
	  MTR_UpdateState(initValues);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f848 	bl	8000984 <MTR_UpdateState>
	  testVal += 1;
 80008f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008f6:	3301      	adds	r3, #1
 80008f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(testVal >= 1980){
 80008fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008fc:	f240 72bb 	movw	r2, #1979	; 0x7bb
 8000900:	4293      	cmp	r3, r2
 8000902:	d902      	bls.n	800090a <StartDefaultTask+0x92>
		  testVal = 1005;
 8000904:	f240 33ed 	movw	r3, #1005	; 0x3ed
 8000908:	63fb      	str	r3, [r7, #60]	; 0x3c
	  }
	  osDelay(10);
 800090a:	200a      	movs	r0, #10
 800090c:	f001 fffa 	bl	8002904 <osDelay>
  {
 8000910:	e7e0      	b.n	80008d4 <StartDefaultTask+0x5c>
 8000912:	bf00      	nop
 8000914:	08007024 	.word	0x08007024
 8000918:	08007034 	.word	0x08007034

0800091c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800092c:	d101      	bne.n	8000932 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800092e:	f000 f9cb 	bl	8000cc8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093a:	b480      	push	{r7}
 800093c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093e:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	e7fe      	b.n	8000940 <Error_Handler+0x6>
	...

08000944 <MTR_Init>:

#include "motor_driver.h"

size_t _mtrValues[4] = {1000,1000,1000,1000};

void MTR_Init(TIM_HandleTypeDef *timer, osSemaphoreId_t *semaphore){
 8000944:	b590      	push	{r4, r7, lr}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	6039      	str	r1, [r7, #0]


	_timer = timer;
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <MTR_Init+0x34>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6013      	str	r3, [r2, #0]
	size_t initValues[4] = {1005,1005,1005,1005};
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <MTR_Init+0x38>)
 8000956:	f107 0408 	add.w	r4, r7, #8
 800095a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800095c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	MTR_UpdateState(initValues);
 8000960:	f107 0308 	add.w	r3, r7, #8
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f80d 	bl	8000984 <MTR_UpdateState>

	_semaphore = semaphore;
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <MTR_Init+0x3c>)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	6013      	str	r3, [r2, #0]
}
 8000970:	bf00      	nop
 8000972:	371c      	adds	r7, #28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd90      	pop	{r4, r7, pc}
 8000978:	20005374 	.word	0x20005374
 800097c:	08007044 	.word	0x08007044
 8000980:	2000532c 	.word	0x2000532c

08000984 <MTR_UpdateState>:

void MTR_UpdateState(size_t values[4]){
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	_mtrValues[0] = values[0];
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <MTR_UpdateState+0x34>)
 8000992:	6013      	str	r3, [r2, #0]
	_mtrValues[1] = values[1];
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	4a07      	ldr	r2, [pc, #28]	; (80009b8 <MTR_UpdateState+0x34>)
 800099a:	6053      	str	r3, [r2, #4]
	_mtrValues[2] = values[2];
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <MTR_UpdateState+0x34>)
 80009a2:	6093      	str	r3, [r2, #8]
	_mtrValues[3] = values[3];
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	68db      	ldr	r3, [r3, #12]
 80009a8:	4a03      	ldr	r2, [pc, #12]	; (80009b8 <MTR_UpdateState+0x34>)
 80009aa:	60d3      	str	r3, [r2, #12]
	//osSemaphoreRelease(_semaphore);
	//osSemaphoreWait(semaphore_id, millisec)
}
 80009ac:	bf00      	nop
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	20000000 	.word	0x20000000

080009bc <MTR_TaskUpdate>:


void MTR_TaskUpdate(void *argument){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	//	return;
	//}

	for(;;){
		//SEGGER_SYSVIEW_Printf("Updating PWM Values to %f", _values[0]);
		_timer->Instance->CCR1 = _mtrValues[0];
 80009c4:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MTR_TaskUpdate+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a0d      	ldr	r2, [pc, #52]	; (8000a00 <MTR_TaskUpdate+0x44>)
 80009cc:	6812      	ldr	r2, [r2, #0]
 80009ce:	635a      	str	r2, [r3, #52]	; 0x34
		_timer->Instance->CCR2 = _mtrValues[1];
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MTR_TaskUpdate+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a0a      	ldr	r2, [pc, #40]	; (8000a00 <MTR_TaskUpdate+0x44>)
 80009d8:	6852      	ldr	r2, [r2, #4]
 80009da:	639a      	str	r2, [r3, #56]	; 0x38
		_timer->Instance->CCR3 = _mtrValues[2];
 80009dc:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MTR_TaskUpdate+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <MTR_TaskUpdate+0x44>)
 80009e4:	6892      	ldr	r2, [r2, #8]
 80009e6:	63da      	str	r2, [r3, #60]	; 0x3c
		_timer->Instance->CCR4 = _mtrValues[3];
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <MTR_TaskUpdate+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <MTR_TaskUpdate+0x44>)
 80009f0:	68d2      	ldr	r2, [r2, #12]
 80009f2:	641a      	str	r2, [r3, #64]	; 0x40
		osDelay(10);
 80009f4:	200a      	movs	r0, #10
 80009f6:	f001 ff85 	bl	8002904 <osDelay>
		_timer->Instance->CCR1 = _mtrValues[0];
 80009fa:	e7e3      	b.n	80009c4 <MTR_TaskUpdate+0x8>
 80009fc:	20005374 	.word	0x20005374
 8000a00:	20000000 	.word	0x20000000

08000a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	607b      	str	r3, [r7, #4]
 8000a0e:	4b12      	ldr	r3, [pc, #72]	; (8000a58 <HAL_MspInit+0x54>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	4a11      	ldr	r2, [pc, #68]	; (8000a58 <HAL_MspInit+0x54>)
 8000a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a18:	6453      	str	r3, [r2, #68]	; 0x44
 8000a1a:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <HAL_MspInit+0x54>)
 8000a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	603b      	str	r3, [r7, #0]
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <HAL_MspInit+0x54>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <HAL_MspInit+0x54>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6413      	str	r3, [r2, #64]	; 0x40
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <HAL_MspInit+0x54>)
 8000a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	603b      	str	r3, [r7, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a42:	2200      	movs	r2, #0
 8000a44:	210f      	movs	r1, #15
 8000a46:	f06f 0001 	mvn.w	r0, #1
 8000a4a:	f000 fa15 	bl	8000e78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0b      	ldr	r2, [pc, #44]	; (8000a98 <HAL_TIM_PWM_MspInit+0x3c>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d10d      	bne.n	8000a8a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_TIM_PWM_MspInit+0x40>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <HAL_TIM_PWM_MspInit+0x40>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b07      	ldr	r3, [pc, #28]	; (8000a9c <HAL_TIM_PWM_MspInit+0x40>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	40010000 	.word	0x40010000
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b088      	sub	sp, #32
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <HAL_TIM_MspPostInit+0x68>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d11e      	bne.n	8000b00 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_TIM_MspPostInit+0x6c>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <HAL_TIM_MspPostInit+0x6c>)
 8000acc:	f043 0310 	orr.w	r3, r3, #16
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_TIM_MspPostInit+0x6c>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13|GPIO_PIN_14;
 8000ade:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000ae2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4619      	mov	r1, r3
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_TIM_MspPostInit+0x70>)
 8000afc:	f000 f9e6 	bl	8000ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40010000 	.word	0x40010000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40021000 	.word	0x40021000

08000b14 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	201c      	movs	r0, #28
 8000b2a:	f000 f9a5 	bl	8000e78 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b2e:	201c      	movs	r0, #28
 8000b30:	f000 f9be 	bl	8000eb0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3c:	4a1e      	ldr	r2, [pc, #120]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6413      	str	r3, [r2, #64]	; 0x40
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <HAL_InitTick+0xa4>)
 8000b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
 8000b4e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b50:	f107 0210 	add.w	r2, r7, #16
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4611      	mov	r1, r2
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 ff78 	bl	8001a50 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b60:	f000 ff62 	bl	8001a28 <HAL_RCC_GetPCLK1Freq>
 8000b64:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_InitTick+0xa8>)
 8000b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b6e:	0c9b      	lsrs	r3, r3, #18
 8000b70:	3b01      	subs	r3, #1
 8000b72:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b7a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b7e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b82:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b88:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000b96:	480a      	ldr	r0, [pc, #40]	; (8000bc0 <HAL_InitTick+0xac>)
 8000b98:	f000 ff8c 	bl	8001ab4 <HAL_TIM_Base_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d104      	bne.n	8000bac <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000ba2:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <HAL_InitTick+0xac>)
 8000ba4:	f000 ffbb 	bl	8001b1e <HAL_TIM_Base_Start_IT>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	e000      	b.n	8000bae <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bac:	2301      	movs	r3, #1
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3730      	adds	r7, #48	; 0x30
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	431bde83 	.word	0x431bde83
 8000bc0:	20005378 	.word	0x20005378

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <TIM2_IRQHandler+0x10>)
 8000bf6:	f001 f81f 	bl	8001c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20005378 	.word	0x20005378

08000c04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <SystemInit+0x28>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <SystemInit+0x28>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <SystemInit+0x28>)
 8000c1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c34:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c36:	e003      	b.n	8000c40 <LoopCopyDataInit>

08000c38 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000c3a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000c3c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000c3e:	3104      	adds	r1, #4

08000c40 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000c44:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000c46:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000c48:	d3f6      	bcc.n	8000c38 <CopyDataInit>
  ldr  r2, =_sbss
 8000c4a:	4a0b      	ldr	r2, [pc, #44]	; (8000c78 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000c4c:	e002      	b.n	8000c54 <LoopFillZerobss>

08000c4e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000c4e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000c50:	f842 3b04 	str.w	r3, [r2], #4

08000c54 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000c54:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000c56:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000c58:	d3f9      	bcc.n	8000c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000c5a:	f7ff ffd3 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c5e:	f006 f979 	bl	8006f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c62:	f7ff fc8f 	bl	8000584 <main>
  bx  lr    
 8000c66:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c68:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000c6c:	080071e4 	.word	0x080071e4
  ldr  r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000c74:	20000020 	.word	0x20000020
  ldr  r2, =_sbss
 8000c78:	20000020 	.word	0x20000020
  ldr  r3, = _ebss
 8000c7c:	200054a4 	.word	0x200054a4

08000c80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c80:	e7fe      	b.n	8000c80 <ADC_IRQHandler>
	...

08000c84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_Init+0x40>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <HAL_Init+0x40>)
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c94:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <HAL_Init+0x40>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0a      	ldr	r2, [pc, #40]	; (8000cc4 <HAL_Init+0x40>)
 8000c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <HAL_Init+0x40>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a07      	ldr	r2, [pc, #28]	; (8000cc4 <HAL_Init+0x40>)
 8000ca6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000caa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cac:	2003      	movs	r0, #3
 8000cae:	f000 f8d8 	bl	8000e62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f7ff ff2e 	bl	8000b14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cb8:	f7ff fea4 	bl	8000a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40023c00 	.word	0x40023c00

08000cc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_IncTick+0x20>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_IncTick+0x24>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_IncTick+0x24>)
 8000cda:	6013      	str	r3, [r2, #0]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	20000018 	.word	0x20000018
 8000cec:	200053b8 	.word	0x200053b8

08000cf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_GetTick+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	200053b8 	.word	0x200053b8

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ff4c 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
 8000e84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8a:	f7ff ff61 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000e8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	68b9      	ldr	r1, [r7, #8]
 8000e94:	6978      	ldr	r0, [r7, #20]
 8000e96:	f7ff ffb1 	bl	8000dfc <NVIC_EncodePriority>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ff80 	bl	8000da8 <__NVIC_SetPriority>
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ff54 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
 8000ee6:	e16b      	b.n	80011c0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ee8:	2201      	movs	r2, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	f040 815a 	bne.w	80011ba <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d00b      	beq.n	8000f26 <HAL_GPIO_Init+0x5a>
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d007      	beq.n	8000f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1a:	2b11      	cmp	r3, #17
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b12      	cmp	r3, #18
 8000f24:	d130      	bne.n	8000f88 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	005b      	lsls	r3, r3, #1
 8000f30:	2203      	movs	r2, #3
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43db      	mvns	r3, r3
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	68da      	ldr	r2, [r3, #12]
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	091b      	lsrs	r3, r3, #4
 8000f72:	f003 0201 	and.w	r2, r3, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d003      	beq.n	8000fc8 <HAL_GPIO_Init+0xfc>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	2b12      	cmp	r3, #18
 8000fc6:	d123      	bne.n	8001010 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	08da      	lsrs	r2, r3, #3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3208      	adds	r2, #8
 8000fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0307 	and.w	r3, r3, #7
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	220f      	movs	r2, #15
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	691a      	ldr	r2, [r3, #16]
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	08da      	lsrs	r2, r3, #3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	69b9      	ldr	r1, [r7, #24]
 800100c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0203 	and.w	r2, r3, #3
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4313      	orrs	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 80b4 	beq.w	80011ba <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_GPIO_Init+0x308>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <HAL_GPIO_Init+0x308>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001060:	6453      	str	r3, [r2, #68]	; 0x44
 8001062:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <HAL_GPIO_Init+0x308>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106e:	4a5a      	ldr	r2, [pc, #360]	; (80011d8 <HAL_GPIO_Init+0x30c>)
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	4013      	ands	r3, r2
 8001090:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a51      	ldr	r2, [pc, #324]	; (80011dc <HAL_GPIO_Init+0x310>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d02b      	beq.n	80010f2 <HAL_GPIO_Init+0x226>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a50      	ldr	r2, [pc, #320]	; (80011e0 <HAL_GPIO_Init+0x314>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d025      	beq.n	80010ee <HAL_GPIO_Init+0x222>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4f      	ldr	r2, [pc, #316]	; (80011e4 <HAL_GPIO_Init+0x318>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d01f      	beq.n	80010ea <HAL_GPIO_Init+0x21e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <HAL_GPIO_Init+0x31c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d019      	beq.n	80010e6 <HAL_GPIO_Init+0x21a>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4d      	ldr	r2, [pc, #308]	; (80011ec <HAL_GPIO_Init+0x320>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d013      	beq.n	80010e2 <HAL_GPIO_Init+0x216>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4c      	ldr	r2, [pc, #304]	; (80011f0 <HAL_GPIO_Init+0x324>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d00d      	beq.n	80010de <HAL_GPIO_Init+0x212>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4b      	ldr	r2, [pc, #300]	; (80011f4 <HAL_GPIO_Init+0x328>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d007      	beq.n	80010da <HAL_GPIO_Init+0x20e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4a      	ldr	r2, [pc, #296]	; (80011f8 <HAL_GPIO_Init+0x32c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d101      	bne.n	80010d6 <HAL_GPIO_Init+0x20a>
 80010d2:	2307      	movs	r3, #7
 80010d4:	e00e      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010d6:	2308      	movs	r3, #8
 80010d8:	e00c      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010da:	2306      	movs	r3, #6
 80010dc:	e00a      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010de:	2305      	movs	r3, #5
 80010e0:	e008      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010e2:	2304      	movs	r3, #4
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010e6:	2303      	movs	r3, #3
 80010e8:	e004      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010ea:	2302      	movs	r3, #2
 80010ec:	e002      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <HAL_GPIO_Init+0x228>
 80010f2:	2300      	movs	r3, #0
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	f002 0203 	and.w	r2, r2, #3
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	4093      	lsls	r3, r2
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001104:	4934      	ldr	r1, [pc, #208]	; (80011d8 <HAL_GPIO_Init+0x30c>)
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001112:	4b3a      	ldr	r3, [pc, #232]	; (80011fc <HAL_GPIO_Init+0x330>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	43db      	mvns	r3, r3
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	4013      	ands	r3, r2
 8001120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	693b      	ldr	r3, [r7, #16]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001136:	4a31      	ldr	r2, [pc, #196]	; (80011fc <HAL_GPIO_Init+0x330>)
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HAL_GPIO_Init+0x330>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	43db      	mvns	r3, r3
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	4013      	ands	r3, r2
 800114a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001160:	4a26      	ldr	r2, [pc, #152]	; (80011fc <HAL_GPIO_Init+0x330>)
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001166:	4b25      	ldr	r3, [pc, #148]	; (80011fc <HAL_GPIO_Init+0x330>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800118a:	4a1c      	ldr	r2, [pc, #112]	; (80011fc <HAL_GPIO_Init+0x330>)
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_GPIO_Init+0x330>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d003      	beq.n	80011b4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <HAL_GPIO_Init+0x330>)
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3301      	adds	r3, #1
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	2b0f      	cmp	r3, #15
 80011c4:	f67f ae90 	bls.w	8000ee8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011c8:	bf00      	nop
 80011ca:	3724      	adds	r7, #36	; 0x24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40013800 	.word	0x40013800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	40020400 	.word	0x40020400
 80011e4:	40020800 	.word	0x40020800
 80011e8:	40020c00 	.word	0x40020c00
 80011ec:	40021000 	.word	0x40021000
 80011f0:	40021400 	.word	0x40021400
 80011f4:	40021800 	.word	0x40021800
 80011f8:	40021c00 	.word	0x40021c00
 80011fc:	40013c00 	.word	0x40013c00

08001200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d101      	bne.n	8001212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e25b      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d075      	beq.n	800130a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800121e:	4ba3      	ldr	r3, [pc, #652]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 030c 	and.w	r3, r3, #12
 8001226:	2b04      	cmp	r3, #4
 8001228:	d00c      	beq.n	8001244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800122a:	4ba0      	ldr	r3, [pc, #640]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001232:	2b08      	cmp	r3, #8
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001236:	4b9d      	ldr	r3, [pc, #628]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001242:	d10b      	bne.n	800125c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001244:	4b99      	ldr	r3, [pc, #612]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d05b      	beq.n	8001308 <HAL_RCC_OscConfig+0x108>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d157      	bne.n	8001308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e236      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001264:	d106      	bne.n	8001274 <HAL_RCC_OscConfig+0x74>
 8001266:	4b91      	ldr	r3, [pc, #580]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a90      	ldr	r2, [pc, #576]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800126c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	e01d      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x98>
 800127e:	4b8b      	ldr	r3, [pc, #556]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a8a      	ldr	r2, [pc, #552]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	4b88      	ldr	r3, [pc, #544]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a87      	ldr	r2, [pc, #540]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	e00b      	b.n	80012b0 <HAL_RCC_OscConfig+0xb0>
 8001298:	4b84      	ldr	r3, [pc, #528]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a83      	ldr	r2, [pc, #524]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800129e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a2:	6013      	str	r3, [r2, #0]
 80012a4:	4b81      	ldr	r3, [pc, #516]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a80      	ldr	r2, [pc, #512]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80012aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d013      	beq.n	80012e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b8:	f7ff fd1a 	bl	8000cf0 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c0:	f7ff fd16 	bl	8000cf0 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b64      	cmp	r3, #100	; 0x64
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e1fb      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b76      	ldr	r3, [pc, #472]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0xc0>
 80012de:	e014      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fd06 	bl	8000cf0 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fd02 	bl	8000cf0 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	; 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e1e7      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	4b6c      	ldr	r3, [pc, #432]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0xe8>
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d063      	beq.n	80013de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001316:	4b65      	ldr	r3, [pc, #404]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b00      	cmp	r3, #0
 8001320:	d00b      	beq.n	800133a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001322:	4b62      	ldr	r3, [pc, #392]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132a:	2b08      	cmp	r3, #8
 800132c:	d11c      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b5f      	ldr	r3, [pc, #380]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d116      	bne.n	8001368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	4b5c      	ldr	r3, [pc, #368]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d001      	beq.n	8001352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e1bb      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	4b56      	ldr	r3, [pc, #344]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	4952      	ldr	r1, [pc, #328]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001362:	4313      	orrs	r3, r2
 8001364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001366:	e03a      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d020      	beq.n	80013b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001370:	4b4f      	ldr	r3, [pc, #316]	; (80014b0 <HAL_RCC_OscConfig+0x2b0>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001376:	f7ff fcbb 	bl	8000cf0 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	e008      	b.n	8001390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800137e:	f7ff fcb7 	bl	8000cf0 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d901      	bls.n	8001390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e19c      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	4b46      	ldr	r3, [pc, #280]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d0f0      	beq.n	800137e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139c:	4b43      	ldr	r3, [pc, #268]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4940      	ldr	r1, [pc, #256]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80013ac:	4313      	orrs	r3, r2
 80013ae:	600b      	str	r3, [r1, #0]
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b2:	4b3f      	ldr	r3, [pc, #252]	; (80014b0 <HAL_RCC_OscConfig+0x2b0>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fc9a 	bl	8000cf0 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fc96 	bl	8000cf0 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e17b      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b36      	ldr	r3, [pc, #216]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d030      	beq.n	800144c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <HAL_RCC_OscConfig+0x2b4>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013f8:	f7ff fc7a 	bl	8000cf0 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001400:	f7ff fc76 	bl	8000cf0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e15b      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d0f0      	beq.n	8001400 <HAL_RCC_OscConfig+0x200>
 800141e:	e015      	b.n	800144c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001420:	4b24      	ldr	r3, [pc, #144]	; (80014b4 <HAL_RCC_OscConfig+0x2b4>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001426:	f7ff fc63 	bl	8000cf0 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800142e:	f7ff fc5f 	bl	8000cf0 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b02      	cmp	r3, #2
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e144      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80a0 	beq.w	800159a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10f      	bne.n	800148a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	60bb      	str	r3, [r7, #8]
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 8001474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001478:	6413      	str	r3, [r2, #64]	; 0x40
 800147a:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <HAL_RCC_OscConfig+0x2ac>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001486:	2301      	movs	r3, #1
 8001488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_RCC_OscConfig+0x2b8>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	2b00      	cmp	r3, #0
 8001494:	d121      	bne.n	80014da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_RCC_OscConfig+0x2b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_RCC_OscConfig+0x2b8>)
 800149c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014a2:	f7ff fc25 	bl	8000cf0 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a8:	e011      	b.n	80014ce <HAL_RCC_OscConfig+0x2ce>
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	42470000 	.word	0x42470000
 80014b4:	42470e80 	.word	0x42470e80
 80014b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014bc:	f7ff fc18 	bl	8000cf0 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e0fd      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b81      	ldr	r3, [pc, #516]	; (80016d4 <HAL_RCC_OscConfig+0x4d4>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d106      	bne.n	80014f0 <HAL_RCC_OscConfig+0x2f0>
 80014e2:	4b7d      	ldr	r3, [pc, #500]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80014e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014e6:	4a7c      	ldr	r2, [pc, #496]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6713      	str	r3, [r2, #112]	; 0x70
 80014ee:	e01c      	b.n	800152a <HAL_RCC_OscConfig+0x32a>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	2b05      	cmp	r3, #5
 80014f6:	d10c      	bne.n	8001512 <HAL_RCC_OscConfig+0x312>
 80014f8:	4b77      	ldr	r3, [pc, #476]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80014fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fc:	4a76      	ldr	r2, [pc, #472]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	6713      	str	r3, [r2, #112]	; 0x70
 8001504:	4b74      	ldr	r3, [pc, #464]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001508:	4a73      	ldr	r2, [pc, #460]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6713      	str	r3, [r2, #112]	; 0x70
 8001510:	e00b      	b.n	800152a <HAL_RCC_OscConfig+0x32a>
 8001512:	4b71      	ldr	r3, [pc, #452]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a70      	ldr	r2, [pc, #448]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001518:	f023 0301 	bic.w	r3, r3, #1
 800151c:	6713      	str	r3, [r2, #112]	; 0x70
 800151e:	4b6e      	ldr	r3, [pc, #440]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001522:	4a6d      	ldr	r2, [pc, #436]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001524:	f023 0304 	bic.w	r3, r3, #4
 8001528:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d015      	beq.n	800155e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001532:	f7ff fbdd 	bl	8000cf0 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001538:	e00a      	b.n	8001550 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800153a:	f7ff fbd9 	bl	8000cf0 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	f241 3288 	movw	r2, #5000	; 0x1388
 8001548:	4293      	cmp	r3, r2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e0bc      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	4b61      	ldr	r3, [pc, #388]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0ee      	beq.n	800153a <HAL_RCC_OscConfig+0x33a>
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155e:	f7ff fbc7 	bl	8000cf0 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001564:	e00a      	b.n	800157c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001566:	f7ff fbc3 	bl	8000cf0 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e0a6      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	4b56      	ldr	r3, [pc, #344]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d1ee      	bne.n	8001566 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001588:	7dfb      	ldrb	r3, [r7, #23]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d105      	bne.n	800159a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158e:	4b52      	ldr	r3, [pc, #328]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	4a51      	ldr	r2, [pc, #324]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001594:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001598:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8092 	beq.w	80016c8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015a4:	4b4c      	ldr	r3, [pc, #304]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 030c 	and.w	r3, r3, #12
 80015ac:	2b08      	cmp	r3, #8
 80015ae:	d05c      	beq.n	800166a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d141      	bne.n	800163c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b8:	4b48      	ldr	r3, [pc, #288]	; (80016dc <HAL_RCC_OscConfig+0x4dc>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fb97 	bl	8000cf0 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c6:	f7ff fb93 	bl	8000cf0 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e078      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69da      	ldr	r2, [r3, #28]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f2:	019b      	lsls	r3, r3, #6
 80015f4:	431a      	orrs	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fa:	085b      	lsrs	r3, r3, #1
 80015fc:	3b01      	subs	r3, #1
 80015fe:	041b      	lsls	r3, r3, #16
 8001600:	431a      	orrs	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001606:	061b      	lsls	r3, r3, #24
 8001608:	4933      	ldr	r1, [pc, #204]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 800160a:	4313      	orrs	r3, r2
 800160c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800160e:	4b33      	ldr	r3, [pc, #204]	; (80016dc <HAL_RCC_OscConfig+0x4dc>)
 8001610:	2201      	movs	r2, #1
 8001612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001614:	f7ff fb6c 	bl	8000cf0 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fb68 	bl	8000cf0 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e04d      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162e:	4b2a      	ldr	r3, [pc, #168]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x41c>
 800163a:	e045      	b.n	80016c8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163c:	4b27      	ldr	r3, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x4dc>)
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fb55 	bl	8000cf0 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fb51 	bl	8000cf0 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e036      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165c:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1f0      	bne.n	800164a <HAL_RCC_OscConfig+0x44a>
 8001668:	e02e      	b.n	80016c8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e029      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_RCC_OscConfig+0x4d8>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	429a      	cmp	r2, r3
 8001688:	d11c      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001694:	429a      	cmp	r2, r3
 8001696:	d115      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800169e:	4013      	ands	r3, r2
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d10d      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80016b2:	429a      	cmp	r2, r3
 80016b4:	d106      	bne.n	80016c4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d001      	beq.n	80016c8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e000      	b.n	80016ca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40007000 	.word	0x40007000
 80016d8:	40023800 	.word	0x40023800
 80016dc:	42470060 	.word	0x42470060

080016e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e0cc      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016f4:	4b68      	ldr	r3, [pc, #416]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 030f 	and.w	r3, r3, #15
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	429a      	cmp	r2, r3
 8001700:	d90c      	bls.n	800171c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001702:	4b65      	ldr	r3, [pc, #404]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	b2d2      	uxtb	r2, r2
 8001708:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 030f 	and.w	r3, r3, #15
 8001712:	683a      	ldr	r2, [r7, #0]
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e0b8      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d020      	beq.n	800176a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d005      	beq.n	8001740 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001734:	4b59      	ldr	r3, [pc, #356]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	4a58      	ldr	r2, [pc, #352]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800173e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0308 	and.w	r3, r3, #8
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800174c:	4b53      	ldr	r3, [pc, #332]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	4a52      	ldr	r2, [pc, #328]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001752:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001756:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4b50      	ldr	r3, [pc, #320]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	494d      	ldr	r1, [pc, #308]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	2b00      	cmp	r3, #0
 8001774:	d044      	beq.n	8001800 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177e:	4b47      	ldr	r3, [pc, #284]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d119      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e07f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b02      	cmp	r3, #2
 8001794:	d003      	beq.n	800179e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800179a:	2b03      	cmp	r3, #3
 800179c:	d107      	bne.n	80017ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800179e:	4b3f      	ldr	r3, [pc, #252]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d109      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e06f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ae:	4b3b      	ldr	r3, [pc, #236]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e067      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017be:	4b37      	ldr	r3, [pc, #220]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017c0:	689b      	ldr	r3, [r3, #8]
 80017c2:	f023 0203 	bic.w	r2, r3, #3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	4934      	ldr	r1, [pc, #208]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	4313      	orrs	r3, r2
 80017ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d0:	f7ff fa8e 	bl	8000cf0 <HAL_GetTick>
 80017d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017d8:	f7ff fa8a 	bl	8000cf0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e04f      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ee:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 020c 	and.w	r2, r3, #12
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d1eb      	bne.n	80017d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001800:	4b25      	ldr	r3, [pc, #148]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f003 030f 	and.w	r3, r3, #15
 8001808:	683a      	ldr	r2, [r7, #0]
 800180a:	429a      	cmp	r2, r3
 800180c:	d20c      	bcs.n	8001828 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180e:	4b22      	ldr	r3, [pc, #136]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001816:	4b20      	ldr	r3, [pc, #128]	; (8001898 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	429a      	cmp	r2, r3
 8001822:	d001      	beq.n	8001828 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	e032      	b.n	800188e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0304 	and.w	r3, r3, #4
 8001830:	2b00      	cmp	r3, #0
 8001832:	d008      	beq.n	8001846 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	4916      	ldr	r1, [pc, #88]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	2b00      	cmp	r3, #0
 8001850:	d009      	beq.n	8001866 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001852:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	691b      	ldr	r3, [r3, #16]
 800185e:	00db      	lsls	r3, r3, #3
 8001860:	490e      	ldr	r1, [pc, #56]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	4313      	orrs	r3, r2
 8001864:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001866:	f000 f821 	bl	80018ac <HAL_RCC_GetSysClockFreq>
 800186a:	4601      	mov	r1, r0
 800186c:	4b0b      	ldr	r3, [pc, #44]	; (800189c <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	091b      	lsrs	r3, r3, #4
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001878:	5cd3      	ldrb	r3, [r2, r3]
 800187a:	fa21 f303 	lsr.w	r3, r1, r3
 800187e:	4a09      	ldr	r2, [pc, #36]	; (80018a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001880:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001882:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff f944 	bl	8000b14 <HAL_InitTick>

  return HAL_OK;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00
 800189c:	40023800 	.word	0x40023800
 80018a0:	080071a8 	.word	0x080071a8
 80018a4:	20000010 	.word	0x20000010
 80018a8:	20000014 	.word	0x20000014

080018ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	2300      	movs	r3, #0
 80018bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018c2:	4b50      	ldr	r3, [pc, #320]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d007      	beq.n	80018de <HAL_RCC_GetSysClockFreq+0x32>
 80018ce:	2b08      	cmp	r3, #8
 80018d0:	d008      	beq.n	80018e4 <HAL_RCC_GetSysClockFreq+0x38>
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f040 808d 	bne.w	80019f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018d8:	4b4b      	ldr	r3, [pc, #300]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x15c>)
 80018da:	60bb      	str	r3, [r7, #8]
       break;
 80018dc:	e08c      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018de:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x160>)
 80018e0:	60bb      	str	r3, [r7, #8]
      break;
 80018e2:	e089      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018e4:	4b47      	ldr	r3, [pc, #284]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018ee:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d023      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018fa:	4b42      	ldr	r3, [pc, #264]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	099b      	lsrs	r3, r3, #6
 8001900:	f04f 0400 	mov.w	r4, #0
 8001904:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001908:	f04f 0200 	mov.w	r2, #0
 800190c:	ea03 0501 	and.w	r5, r3, r1
 8001910:	ea04 0602 	and.w	r6, r4, r2
 8001914:	4a3d      	ldr	r2, [pc, #244]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x160>)
 8001916:	fb02 f106 	mul.w	r1, r2, r6
 800191a:	2200      	movs	r2, #0
 800191c:	fb02 f205 	mul.w	r2, r2, r5
 8001920:	440a      	add	r2, r1
 8001922:	493a      	ldr	r1, [pc, #232]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x160>)
 8001924:	fba5 0101 	umull	r0, r1, r5, r1
 8001928:	1853      	adds	r3, r2, r1
 800192a:	4619      	mov	r1, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f04f 0400 	mov.w	r4, #0
 8001932:	461a      	mov	r2, r3
 8001934:	4623      	mov	r3, r4
 8001936:	f7fe fc95 	bl	8000264 <__aeabi_uldivmod>
 800193a:	4603      	mov	r3, r0
 800193c:	460c      	mov	r4, r1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e049      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b30      	ldr	r3, [pc, #192]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	f04f 0400 	mov.w	r4, #0
 800194c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	ea03 0501 	and.w	r5, r3, r1
 8001958:	ea04 0602 	and.w	r6, r4, r2
 800195c:	4629      	mov	r1, r5
 800195e:	4632      	mov	r2, r6
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	f04f 0400 	mov.w	r4, #0
 8001968:	0154      	lsls	r4, r2, #5
 800196a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800196e:	014b      	lsls	r3, r1, #5
 8001970:	4619      	mov	r1, r3
 8001972:	4622      	mov	r2, r4
 8001974:	1b49      	subs	r1, r1, r5
 8001976:	eb62 0206 	sbc.w	r2, r2, r6
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	f04f 0400 	mov.w	r4, #0
 8001982:	0194      	lsls	r4, r2, #6
 8001984:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001988:	018b      	lsls	r3, r1, #6
 800198a:	1a5b      	subs	r3, r3, r1
 800198c:	eb64 0402 	sbc.w	r4, r4, r2
 8001990:	f04f 0100 	mov.w	r1, #0
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	00e2      	lsls	r2, r4, #3
 800199a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800199e:	00d9      	lsls	r1, r3, #3
 80019a0:	460b      	mov	r3, r1
 80019a2:	4614      	mov	r4, r2
 80019a4:	195b      	adds	r3, r3, r5
 80019a6:	eb44 0406 	adc.w	r4, r4, r6
 80019aa:	f04f 0100 	mov.w	r1, #0
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	02a2      	lsls	r2, r4, #10
 80019b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80019b8:	0299      	lsls	r1, r3, #10
 80019ba:	460b      	mov	r3, r1
 80019bc:	4614      	mov	r4, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	4621      	mov	r1, r4
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	f04f 0400 	mov.w	r4, #0
 80019c8:	461a      	mov	r2, r3
 80019ca:	4623      	mov	r3, r4
 80019cc:	f7fe fc4a 	bl	8000264 <__aeabi_uldivmod>
 80019d0:	4603      	mov	r3, r0
 80019d2:	460c      	mov	r4, r1
 80019d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x158>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	0c1b      	lsrs	r3, r3, #16
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	3301      	adds	r3, #1
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ee:	60bb      	str	r3, [r7, #8]
      break;
 80019f0:	e002      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f2:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019f4:	60bb      	str	r3, [r7, #8]
      break;
 80019f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019f8:	68bb      	ldr	r3, [r7, #8]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3714      	adds	r7, #20
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40023800 	.word	0x40023800
 8001a08:	00f42400 	.word	0x00f42400
 8001a0c:	017d7840 	.word	0x017d7840

08001a10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000010 	.word	0x20000010

08001a28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a2c:	f7ff fff0 	bl	8001a10 <HAL_RCC_GetHCLKFreq>
 8001a30:	4601      	mov	r1, r0
 8001a32:	4b05      	ldr	r3, [pc, #20]	; (8001a48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	0a9b      	lsrs	r3, r3, #10
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a3e:	5cd3      	ldrb	r3, [r2, r3]
 8001a40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	080071b8 	.word	0x080071b8

08001a50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_RCC_GetClockConfig+0x5c>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_RCC_GetClockConfig+0x5c>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_RCC_GetClockConfig+0x5c>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001a84:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_RCC_GetClockConfig+0x5c>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a92:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <HAL_RCC_GetClockConfig+0x60>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 020f 	and.w	r2, r3, #15
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	601a      	str	r2, [r3, #0]
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40023c00 	.word	0x40023c00

08001ab4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e01d      	b.n	8001b02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d106      	bne.n	8001ae0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 f815 	bl	8001b0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3304      	adds	r3, #4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4610      	mov	r0, r2
 8001af4:	f000 fa96 	bl	8002024 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001b12:	bf00      	nop
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr

08001b1e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b085      	sub	sp, #20
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f042 0201 	orr.w	r2, r2, #1
 8001b34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b06      	cmp	r3, #6
 8001b46:	d007      	beq.n	8001b58 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3714      	adds	r7, #20
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b082      	sub	sp, #8
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d101      	bne.n	8001b78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e01d      	b.n	8001bb4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d106      	bne.n	8001b92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7fe ff65 	bl	8000a5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f000 fa3d 	bl	8002024 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	6839      	ldr	r1, [r7, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fc78 	bl	80024c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a15      	ldr	r2, [pc, #84]	; (8001c30 <HAL_TIM_PWM_Start+0x74>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d004      	beq.n	8001be8 <HAL_TIM_PWM_Start+0x2c>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a14      	ldr	r2, [pc, #80]	; (8001c34 <HAL_TIM_PWM_Start+0x78>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d101      	bne.n	8001bec <HAL_TIM_PWM_Start+0x30>
 8001be8:	2301      	movs	r3, #1
 8001bea:	e000      	b.n	8001bee <HAL_TIM_PWM_Start+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d007      	beq.n	8001c02 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d007      	beq.n	8001c24 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0201 	orr.w	r2, r2, #1
 8001c22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40010000 	.word	0x40010000
 8001c34:	40010400 	.word	0x40010400

08001c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d122      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d11b      	bne.n	8001c94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0202 	mvn.w	r2, #2
 8001c64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	f003 0303 	and.w	r3, r3, #3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f9b4 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001c80:	e005      	b.n	8001c8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f9a6 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 f9b7 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d122      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d11b      	bne.n	8001ce8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f06f 0204 	mvn.w	r2, #4
 8001cb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699b      	ldr	r3, [r3, #24]
 8001cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f98a 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001cd4:	e005      	b.n	8001ce2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f97c 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f98d 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0208 	mvn.w	r2, #8
 8001d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2204      	movs	r2, #4
 8001d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f960 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f952 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f963 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	2b10      	cmp	r3, #16
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0310 	and.w	r3, r3, #16
 8001d54:	2b10      	cmp	r3, #16
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0210 	mvn.w	r2, #16
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2208      	movs	r2, #8
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f936 	bl	8001fe8 <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f928 	bl	8001fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f939 	bl	8001ffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d10e      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d107      	bne.n	8001dbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0201 	mvn.w	r2, #1
 8001db4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7fe fdb0 	bl	800091c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dc6:	2b80      	cmp	r3, #128	; 0x80
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dd4:	2b80      	cmp	r3, #128	; 0x80
 8001dd6:	d107      	bne.n	8001de8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001de0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fc6c 	bl	80026c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	d10e      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e00:	2b40      	cmp	r3, #64	; 0x40
 8001e02:	d107      	bne.n	8001e14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8fe 	bl	8002010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	f003 0320 	and.w	r3, r3, #32
 8001e1e:	2b20      	cmp	r3, #32
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d107      	bne.n	8001e40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0220 	mvn.w	r2, #32
 8001e38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 fc36 	bl	80026ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e40:	bf00      	nop
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d101      	bne.n	8001e62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e5e:	2302      	movs	r3, #2
 8001e60:	e0b4      	b.n	8001fcc <HAL_TIM_PWM_ConfigChannel+0x184>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	f200 809f 	bhi.w	8001fb8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8001e7a:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8001e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e80:	08001eb5 	.word	0x08001eb5
 8001e84:	08001fb9 	.word	0x08001fb9
 8001e88:	08001fb9 	.word	0x08001fb9
 8001e8c:	08001fb9 	.word	0x08001fb9
 8001e90:	08001ef5 	.word	0x08001ef5
 8001e94:	08001fb9 	.word	0x08001fb9
 8001e98:	08001fb9 	.word	0x08001fb9
 8001e9c:	08001fb9 	.word	0x08001fb9
 8001ea0:	08001f37 	.word	0x08001f37
 8001ea4:	08001fb9 	.word	0x08001fb9
 8001ea8:	08001fb9 	.word	0x08001fb9
 8001eac:	08001fb9 	.word	0x08001fb9
 8001eb0:	08001f77 	.word	0x08001f77
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68b9      	ldr	r1, [r7, #8]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 f952 	bl	8002164 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699a      	ldr	r2, [r3, #24]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f042 0208 	orr.w	r2, r2, #8
 8001ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0204 	bic.w	r2, r2, #4
 8001ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6999      	ldr	r1, [r3, #24]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	691a      	ldr	r2, [r3, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	619a      	str	r2, [r3, #24]
      break;
 8001ef2:	e062      	b.n	8001fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f9a2 	bl	8002244 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6999      	ldr	r1, [r3, #24]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	021a      	lsls	r2, r3, #8
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	619a      	str	r2, [r3, #24]
      break;
 8001f34:	e041      	b.n	8001fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	68b9      	ldr	r1, [r7, #8]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 f9f7 	bl	8002330 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f042 0208 	orr.w	r2, r2, #8
 8001f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f022 0204 	bic.w	r2, r2, #4
 8001f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69d9      	ldr	r1, [r3, #28]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	691a      	ldr	r2, [r3, #16]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	61da      	str	r2, [r3, #28]
      break;
 8001f74:	e021      	b.n	8001fba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68b9      	ldr	r1, [r7, #8]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f000 fa4b 	bl	8002418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	69da      	ldr	r2, [r3, #28]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69da      	ldr	r2, [r3, #28]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69d9      	ldr	r1, [r3, #28]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	021a      	lsls	r2, r3, #8
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	61da      	str	r2, [r3, #28]
      break;
 8001fb6:	e000      	b.n	8001fba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8001fb8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002004:	bf00      	nop
 8002006:	370c      	adds	r7, #12
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a40      	ldr	r2, [pc, #256]	; (8002138 <TIM_Base_SetConfig+0x114>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d013      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002042:	d00f      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3d      	ldr	r2, [pc, #244]	; (800213c <TIM_Base_SetConfig+0x118>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00b      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3c      	ldr	r2, [pc, #240]	; (8002140 <TIM_Base_SetConfig+0x11c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d007      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3b      	ldr	r2, [pc, #236]	; (8002144 <TIM_Base_SetConfig+0x120>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d003      	beq.n	8002064 <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a3a      	ldr	r2, [pc, #232]	; (8002148 <TIM_Base_SetConfig+0x124>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d108      	bne.n	8002076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800206a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a2f      	ldr	r2, [pc, #188]	; (8002138 <TIM_Base_SetConfig+0x114>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002084:	d027      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2c      	ldr	r2, [pc, #176]	; (800213c <TIM_Base_SetConfig+0x118>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d023      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2b      	ldr	r2, [pc, #172]	; (8002140 <TIM_Base_SetConfig+0x11c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01f      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2a      	ldr	r2, [pc, #168]	; (8002144 <TIM_Base_SetConfig+0x120>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <TIM_Base_SetConfig+0x124>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d017      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a28      	ldr	r2, [pc, #160]	; (800214c <TIM_Base_SetConfig+0x128>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d013      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a27      	ldr	r2, [pc, #156]	; (8002150 <TIM_Base_SetConfig+0x12c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00f      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a26      	ldr	r2, [pc, #152]	; (8002154 <TIM_Base_SetConfig+0x130>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00b      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a25      	ldr	r2, [pc, #148]	; (8002158 <TIM_Base_SetConfig+0x134>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d007      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a24      	ldr	r2, [pc, #144]	; (800215c <TIM_Base_SetConfig+0x138>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d003      	beq.n	80020d6 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a23      	ldr	r2, [pc, #140]	; (8002160 <TIM_Base_SetConfig+0x13c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d108      	bne.n	80020e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <TIM_Base_SetConfig+0x114>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d003      	beq.n	800211c <TIM_Base_SetConfig+0xf8>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a0c      	ldr	r2, [pc, #48]	; (8002148 <TIM_Base_SetConfig+0x124>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d103      	bne.n	8002124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	691a      	ldr	r2, [r3, #16]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	615a      	str	r2, [r3, #20]
}
 800212a:	bf00      	nop
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40010000 	.word	0x40010000
 800213c:	40000400 	.word	0x40000400
 8002140:	40000800 	.word	0x40000800
 8002144:	40000c00 	.word	0x40000c00
 8002148:	40010400 	.word	0x40010400
 800214c:	40014000 	.word	0x40014000
 8002150:	40014400 	.word	0x40014400
 8002154:	40014800 	.word	0x40014800
 8002158:	40001800 	.word	0x40001800
 800215c:	40001c00 	.word	0x40001c00
 8002160:	40002000 	.word	0x40002000

08002164 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002164:	b480      	push	{r7}
 8002166:	b087      	sub	sp, #28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a1b      	ldr	r3, [r3, #32]
 8002172:	f023 0201 	bic.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	f023 0302 	bic.w	r3, r3, #2
 80021ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	697a      	ldr	r2, [r7, #20]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a20      	ldr	r2, [pc, #128]	; (800223c <TIM_OC1_SetConfig+0xd8>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <TIM_OC1_SetConfig+0x64>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a1f      	ldr	r2, [pc, #124]	; (8002240 <TIM_OC1_SetConfig+0xdc>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d10c      	bne.n	80021e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	f023 0308 	bic.w	r3, r3, #8
 80021ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	697a      	ldr	r2, [r7, #20]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a15      	ldr	r2, [pc, #84]	; (800223c <TIM_OC1_SetConfig+0xd8>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d003      	beq.n	80021f2 <TIM_OC1_SetConfig+0x8e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a14      	ldr	r2, [pc, #80]	; (8002240 <TIM_OC1_SetConfig+0xdc>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d111      	bne.n	8002216 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002200:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	695b      	ldr	r3, [r3, #20]
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	693a      	ldr	r2, [r7, #16]
 8002212:	4313      	orrs	r3, r2
 8002214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	697a      	ldr	r2, [r7, #20]
 800222e:	621a      	str	r2, [r3, #32]
}
 8002230:	bf00      	nop
 8002232:	371c      	adds	r7, #28
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	40010000 	.word	0x40010000
 8002240:	40010400 	.word	0x40010400

08002244 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002244:	b480      	push	{r7}
 8002246:	b087      	sub	sp, #28
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	f023 0210 	bic.w	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002272:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	021b      	lsls	r3, r3, #8
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f023 0320 	bic.w	r3, r3, #32
 800228e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a22      	ldr	r2, [pc, #136]	; (8002328 <TIM_OC2_SetConfig+0xe4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d003      	beq.n	80022ac <TIM_OC2_SetConfig+0x68>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a21      	ldr	r2, [pc, #132]	; (800232c <TIM_OC2_SetConfig+0xe8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d10d      	bne.n	80022c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	4313      	orrs	r3, r2
 80022be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a17      	ldr	r2, [pc, #92]	; (8002328 <TIM_OC2_SetConfig+0xe4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d003      	beq.n	80022d8 <TIM_OC2_SetConfig+0x94>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a16      	ldr	r2, [pc, #88]	; (800232c <TIM_OC2_SetConfig+0xe8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d113      	bne.n	8002300 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	699b      	ldr	r3, [r3, #24]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	621a      	str	r2, [r3, #32]
}
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	40010000 	.word	0x40010000
 800232c:	40010400 	.word	0x40010400

08002330 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800235e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0303 	bic.w	r3, r3, #3
 8002366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	68fa      	ldr	r2, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	021b      	lsls	r3, r3, #8
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	4313      	orrs	r3, r2
 8002384:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a21      	ldr	r2, [pc, #132]	; (8002410 <TIM_OC3_SetConfig+0xe0>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d003      	beq.n	8002396 <TIM_OC3_SetConfig+0x66>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a20      	ldr	r2, [pc, #128]	; (8002414 <TIM_OC3_SetConfig+0xe4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10d      	bne.n	80023b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800239c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a16      	ldr	r2, [pc, #88]	; (8002410 <TIM_OC3_SetConfig+0xe0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d003      	beq.n	80023c2 <TIM_OC3_SetConfig+0x92>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a15      	ldr	r2, [pc, #84]	; (8002414 <TIM_OC3_SetConfig+0xe4>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d113      	bne.n	80023ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	621a      	str	r2, [r3, #32]
}
 8002404:	bf00      	nop
 8002406:	371c      	adds	r7, #28
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40010000 	.word	0x40010000
 8002414:	40010400 	.word	0x40010400

08002418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a1b      	ldr	r3, [r3, #32]
 8002432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69db      	ldr	r3, [r3, #28]
 800243e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800244e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4313      	orrs	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	031b      	lsls	r3, r3, #12
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4a12      	ldr	r2, [pc, #72]	; (80024bc <TIM_OC4_SetConfig+0xa4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d003      	beq.n	8002480 <TIM_OC4_SetConfig+0x68>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <TIM_OC4_SetConfig+0xa8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d109      	bne.n	8002494 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002486:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	019b      	lsls	r3, r3, #6
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4313      	orrs	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	bf00      	nop
 80024b0:	371c      	adds	r7, #28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40010000 	.word	0x40010000
 80024c0:	40010400 	.word	0x40010400

080024c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	2201      	movs	r2, #1
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6a1a      	ldr	r2, [r3, #32]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	401a      	ands	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a1a      	ldr	r2, [r3, #32]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f003 031f 	and.w	r3, r3, #31
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	fa01 f303 	lsl.w	r3, r1, r3
 80024fc:	431a      	orrs	r2, r3
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	621a      	str	r2, [r3, #32]
}
 8002502:	bf00      	nop
 8002504:	371c      	adds	r7, #28
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002520:	2b01      	cmp	r3, #1
 8002522:	d101      	bne.n	8002528 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002524:	2302      	movs	r3, #2
 8002526:	e05a      	b.n	80025de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800254e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a21      	ldr	r2, [pc, #132]	; (80025ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d022      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002574:	d01d      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d018      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1b      	ldr	r2, [pc, #108]	; (80025f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d013      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1a      	ldr	r2, [pc, #104]	; (80025f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d00e      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a18      	ldr	r2, [pc, #96]	; (80025fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d009      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a17      	ldr	r2, [pc, #92]	; (8002600 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d004      	beq.n	80025b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a15      	ldr	r2, [pc, #84]	; (8002604 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d10c      	bne.n	80025cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68ba      	ldr	r2, [r7, #8]
 80025ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40010000 	.word	0x40010000
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000800 	.word	0x40000800
 80025f8:	40000c00 	.word	0x40000c00
 80025fc:	40010400 	.word	0x40010400
 8002600:	40014000 	.word	0x40014000
 8002604:	40001800 	.word	0x40001800

08002608 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002620:	2302      	movs	r3, #2
 8002622:	e03d      	b.n	80026a0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	4313      	orrs	r3, r2
 8002646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4313      	orrs	r3, r2
 8002662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	69db      	ldr	r3, [r3, #28]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3714      	adds	r7, #20
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80026d8:	bf00      	nop
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026ea:	f3ef 8305 	mrs	r3, IPSR
 80026ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80026f0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d10f      	bne.n	8002716 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026f6:	f3ef 8310 	mrs	r3, PRIMASK
 80026fa:	607b      	str	r3, [r7, #4]
  return(result);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002702:	f3ef 8311 	mrs	r3, BASEPRI
 8002706:	603b      	str	r3, [r7, #0]
  return(result);
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d007      	beq.n	800271e <osKernelInitialize+0x3a>
 800270e:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <osKernelInitialize+0x64>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d103      	bne.n	800271e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002716:	f06f 0305 	mvn.w	r3, #5
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	e00c      	b.n	8002738 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <osKernelInitialize+0x64>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d105      	bne.n	8002732 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002726:	4b08      	ldr	r3, [pc, #32]	; (8002748 <osKernelInitialize+0x64>)
 8002728:	2201      	movs	r2, #1
 800272a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	e002      	b.n	8002738 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002738:	68fb      	ldr	r3, [r7, #12]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	2000003c 	.word	0x2000003c

0800274c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002752:	f3ef 8305 	mrs	r3, IPSR
 8002756:	60bb      	str	r3, [r7, #8]
  return(result);
 8002758:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10f      	bne.n	800277e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800275e:	f3ef 8310 	mrs	r3, PRIMASK
 8002762:	607b      	str	r3, [r7, #4]
  return(result);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d105      	bne.n	8002776 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800276a:	f3ef 8311 	mrs	r3, BASEPRI
 800276e:	603b      	str	r3, [r7, #0]
  return(result);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d007      	beq.n	8002786 <osKernelStart+0x3a>
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <osKernelStart+0x68>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b02      	cmp	r3, #2
 800277c:	d103      	bne.n	8002786 <osKernelStart+0x3a>
    stat = osErrorISR;
 800277e:	f06f 0305 	mvn.w	r3, #5
 8002782:	60fb      	str	r3, [r7, #12]
 8002784:	e010      	b.n	80027a8 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <osKernelStart+0x68>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d109      	bne.n	80027a2 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800278e:	f7ff ffa1 	bl	80026d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <osKernelStart+0x68>)
 8002794:	2202      	movs	r2, #2
 8002796:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002798:	f001 fab0 	bl	8003cfc <vTaskStartScheduler>
      stat = osOK;
 800279c:	2300      	movs	r3, #0
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e002      	b.n	80027a8 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80027a2:	f04f 33ff 	mov.w	r3, #4294967295
 80027a6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80027a8:	68fb      	ldr	r3, [r7, #12]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	2000003c 	.word	0x2000003c

080027b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b090      	sub	sp, #64	; 0x40
 80027bc:	af04      	add	r7, sp, #16
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80027c8:	f3ef 8305 	mrs	r3, IPSR
 80027cc:	61fb      	str	r3, [r7, #28]
  return(result);
 80027ce:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f040 808f 	bne.w	80028f4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d6:	f3ef 8310 	mrs	r3, PRIMASK
 80027da:	61bb      	str	r3, [r7, #24]
  return(result);
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d105      	bne.n	80027ee <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80027e2:	f3ef 8311 	mrs	r3, BASEPRI
 80027e6:	617b      	str	r3, [r7, #20]
  return(result);
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <osThreadNew+0x3e>
 80027ee:	4b44      	ldr	r3, [pc, #272]	; (8002900 <osThreadNew+0x148>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d07e      	beq.n	80028f4 <osThreadNew+0x13c>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d07b      	beq.n	80028f4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80027fc:	2380      	movs	r3, #128	; 0x80
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002800:	2318      	movs	r3, #24
 8002802:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002804:	2300      	movs	r3, #0
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002808:	f04f 33ff 	mov.w	r3, #4294967295
 800280c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d045      	beq.n	80028a0 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d002      	beq.n	8002822 <osThreadNew+0x6a>
        name = attr->name;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d002      	beq.n	8002830 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	2b00      	cmp	r3, #0
 8002834:	d008      	beq.n	8002848 <osThreadNew+0x90>
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	2b38      	cmp	r3, #56	; 0x38
 800283a:	d805      	bhi.n	8002848 <osThreadNew+0x90>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <osThreadNew+0x94>
        return (NULL);
 8002848:	2300      	movs	r3, #0
 800284a:	e054      	b.n	80028f6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d003      	beq.n	800285c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	089b      	lsrs	r3, r3, #2
 800285a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d00e      	beq.n	8002882 <osThreadNew+0xca>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b5f      	cmp	r3, #95	; 0x5f
 800286a:	d90a      	bls.n	8002882 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d002      	beq.n	8002882 <osThreadNew+0xca>
        mem = 1;
 800287c:	2301      	movs	r3, #1
 800287e:	623b      	str	r3, [r7, #32]
 8002880:	e010      	b.n	80028a4 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10c      	bne.n	80028a4 <osThreadNew+0xec>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d108      	bne.n	80028a4 <osThreadNew+0xec>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d104      	bne.n	80028a4 <osThreadNew+0xec>
          mem = 0;
 800289a:	2300      	movs	r3, #0
 800289c:	623b      	str	r3, [r7, #32]
 800289e:	e001      	b.n	80028a4 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d110      	bne.n	80028cc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80028b2:	9202      	str	r2, [sp, #8]
 80028b4:	9301      	str	r3, [sp, #4]
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f001 f825 	bl	8003910 <xTaskCreateStatic>
 80028c6:	4603      	mov	r3, r0
 80028c8:	613b      	str	r3, [r7, #16]
 80028ca:	e013      	b.n	80028f4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d110      	bne.n	80028f4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	f107 0310 	add.w	r3, r7, #16
 80028da:	9301      	str	r3, [sp, #4]
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f001 f86d 	bl	80039c4 <xTaskCreate>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d001      	beq.n	80028f4 <osThreadNew+0x13c>
          hTask = NULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80028f4:	693b      	ldr	r3, [r7, #16]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3730      	adds	r7, #48	; 0x30
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	2000003c 	.word	0x2000003c

08002904 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800290c:	f3ef 8305 	mrs	r3, IPSR
 8002910:	613b      	str	r3, [r7, #16]
  return(result);
 8002912:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10f      	bne.n	8002938 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002918:	f3ef 8310 	mrs	r3, PRIMASK
 800291c:	60fb      	str	r3, [r7, #12]
  return(result);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d105      	bne.n	8002930 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002924:	f3ef 8311 	mrs	r3, BASEPRI
 8002928:	60bb      	str	r3, [r7, #8]
  return(result);
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d007      	beq.n	8002940 <osDelay+0x3c>
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <osDelay+0x58>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d103      	bne.n	8002940 <osDelay+0x3c>
    stat = osErrorISR;
 8002938:	f06f 0305 	mvn.w	r3, #5
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e007      	b.n	8002950 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <osDelay+0x4c>
      vTaskDelay(ticks);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f001 f99e 	bl	8003c8c <vTaskDelay>
    }
  }

  return (stat);
 8002950:	697b      	ldr	r3, [r7, #20]
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000003c 	.word	0x2000003c

08002960 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	; 0x30
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800296c:	2300      	movs	r3, #0
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002970:	f3ef 8305 	mrs	r3, IPSR
 8002974:	61bb      	str	r3, [r7, #24]
  return(result);
 8002976:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002978:	2b00      	cmp	r3, #0
 800297a:	f040 8087 	bne.w	8002a8c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800297e:	f3ef 8310 	mrs	r3, PRIMASK
 8002982:	617b      	str	r3, [r7, #20]
  return(result);
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d105      	bne.n	8002996 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800298a:	f3ef 8311 	mrs	r3, BASEPRI
 800298e:	613b      	str	r3, [r7, #16]
  return(result);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <osSemaphoreNew+0x3e>
 8002996:	4b40      	ldr	r3, [pc, #256]	; (8002a98 <osSemaphoreNew+0x138>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d076      	beq.n	8002a8c <osSemaphoreNew+0x12c>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d073      	beq.n	8002a8c <osSemaphoreNew+0x12c>
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d86f      	bhi.n	8002a8c <osSemaphoreNew+0x12c>
    mem = -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d006      	beq.n	80029ce <osSemaphoreNew+0x6e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2b4f      	cmp	r3, #79	; 0x4f
 80029c6:	d902      	bls.n	80029ce <osSemaphoreNew+0x6e>
        mem = 1;
 80029c8:	2301      	movs	r3, #1
 80029ca:	623b      	str	r3, [r7, #32]
 80029cc:	e00c      	b.n	80029e8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d108      	bne.n	80029e8 <osSemaphoreNew+0x88>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <osSemaphoreNew+0x88>
          mem = 0;
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
 80029e2:	e001      	b.n	80029e8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80029e4:	2300      	movs	r3, #0
 80029e6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80029e8:	6a3b      	ldr	r3, [r7, #32]
 80029ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ee:	d04d      	beq.n	8002a8c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d129      	bne.n	8002a4a <osSemaphoreNew+0xea>
        if (mem == 1) {
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d10b      	bne.n	8002a14 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	2303      	movs	r3, #3
 8002a02:	9300      	str	r3, [sp, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	2200      	movs	r2, #0
 8002a08:	2100      	movs	r1, #0
 8002a0a:	2001      	movs	r0, #1
 8002a0c:	f000 f996 	bl	8002d3c <xQueueGenericCreateStatic>
 8002a10:	6278      	str	r0, [r7, #36]	; 0x24
 8002a12:	e005      	b.n	8002a20 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002a14:	2203      	movs	r2, #3
 8002a16:	2100      	movs	r1, #0
 8002a18:	2001      	movs	r0, #1
 8002a1a:	f000 fa02 	bl	8002e22 <xQueueGenericCreate>
 8002a1e:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d022      	beq.n	8002a6c <osSemaphoreNew+0x10c>
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d01f      	beq.n	8002a6c <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a34:	f000 fac4 	bl	8002fc0 <xQueueGenericSend>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d016      	beq.n	8002a6c <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8002a3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a40:	f000 fd9c 	bl	800357c <vQueueDelete>
            hSemaphore = NULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
 8002a48:	e010      	b.n	8002a6c <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d108      	bne.n	8002a62 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	461a      	mov	r2, r3
 8002a56:	68b9      	ldr	r1, [r7, #8]
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fa4a 	bl	8002ef2 <xQueueCreateCountingSemaphoreStatic>
 8002a5e:	6278      	str	r0, [r7, #36]	; 0x24
 8002a60:	e004      	b.n	8002a6c <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fa79 	bl	8002f5c <xQueueCreateCountingSemaphore>
 8002a6a:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00c      	beq.n	8002a8c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d003      	beq.n	8002a80 <osSemaphoreNew+0x120>
          name = attr->name;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	e001      	b.n	8002a84 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8002a80:	2300      	movs	r3, #0
 8002a82:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002a84:	69f9      	ldr	r1, [r7, #28]
 8002a86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a88:	f000 feb4 	bl	80037f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3728      	adds	r7, #40	; 0x28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	2000003c 	.word	0x2000003c

08002a9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a07      	ldr	r2, [pc, #28]	; (8002ac8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002aac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4a06      	ldr	r2, [pc, #24]	; (8002acc <vApplicationGetIdleTaskMemory+0x30>)
 8002ab2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	601a      	str	r2, [r3, #0]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000040 	.word	0x20000040
 8002acc:	200000a0 	.word	0x200000a0

08002ad0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4a07      	ldr	r2, [pc, #28]	; (8002afc <vApplicationGetTimerTaskMemory+0x2c>)
 8002ae0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4a06      	ldr	r2, [pc, #24]	; (8002b00 <vApplicationGetTimerTaskMemory+0x30>)
 8002ae6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aee:	601a      	str	r2, [r3, #0]
}
 8002af0:	bf00      	nop
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr
 8002afc:	200002a0 	.word	0x200002a0
 8002b00:	20000300 	.word	0x20000300

08002b04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f103 0208 	add.w	r2, r3, #8
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f103 0208 	add.w	r2, r3, #8
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f103 0208 	add.w	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b52:	bf00      	nop
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b5e:	b480      	push	{r7}
 8002b60:	b085      	sub	sp, #20
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689a      	ldr	r2, [r3, #8]
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	601a      	str	r2, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	3714      	adds	r7, #20
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr

08002ba6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ba6:	b480      	push	{r7}
 8002ba8:	b085      	sub	sp, #20
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
 8002bae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d103      	bne.n	8002bc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	e00c      	b.n	8002be0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3308      	adds	r3, #8
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e002      	b.n	8002bd4 <vListInsert+0x2e>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d2f6      	bcs.n	8002bce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	1c5a      	adds	r2, r3, #1
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	601a      	str	r2, [r3, #0]
}
 8002c0c:	bf00      	nop
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6892      	ldr	r2, [r2, #8]
 8002c2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6852      	ldr	r2, [r2, #4]
 8002c38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d103      	bne.n	8002c4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689a      	ldr	r2, [r3, #8]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	1e5a      	subs	r2, r3, #1
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c84:	f383 8811 	msr	BASEPRI, r3
 8002c88:	f3bf 8f6f 	isb	sy
 8002c8c:	f3bf 8f4f 	dsb	sy
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	e7fe      	b.n	8002c92 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002c94:	f002 fa5a 	bl	800514c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca0:	68f9      	ldr	r1, [r7, #12]
 8002ca2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	441a      	add	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	68f9      	ldr	r1, [r7, #12]
 8002cc8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	441a      	add	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	22ff      	movs	r2, #255	; 0xff
 8002cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	22ff      	movs	r2, #255	; 0xff
 8002ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d114      	bne.n	8002d14 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01a      	beq.n	8002d28 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	3310      	adds	r3, #16
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f001 fae6 	bl	80042c8 <xTaskRemoveFromEventList>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d012      	beq.n	8002d28 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d02:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <xQueueGenericReset+0xcc>)
 8002d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	f3bf 8f6f 	isb	sy
 8002d12:	e009      	b.n	8002d28 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3310      	adds	r3, #16
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fef3 	bl	8002b04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	3324      	adds	r3, #36	; 0x24
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff feee 	bl	8002b04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d28:	f002 fa3e 	bl	80051a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d2c:	2301      	movs	r3, #1
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	e000ed04 	.word	0xe000ed04

08002d3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08e      	sub	sp, #56	; 0x38
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d109      	bne.n	8002d64 <xQueueGenericCreateStatic+0x28>
 8002d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d54:	f383 8811 	msr	BASEPRI, r3
 8002d58:	f3bf 8f6f 	isb	sy
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d62:	e7fe      	b.n	8002d62 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d109      	bne.n	8002d7e <xQueueGenericCreateStatic+0x42>
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	f383 8811 	msr	BASEPRI, r3
 8002d72:	f3bf 8f6f 	isb	sy
 8002d76:	f3bf 8f4f 	dsb	sy
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d7c:	e7fe      	b.n	8002d7c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <xQueueGenericCreateStatic+0x4e>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <xQueueGenericCreateStatic+0x52>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueGenericCreateStatic+0x54>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d109      	bne.n	8002da8 <xQueueGenericCreateStatic+0x6c>
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	623b      	str	r3, [r7, #32]
 8002da6:	e7fe      	b.n	8002da6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d102      	bne.n	8002db4 <xQueueGenericCreateStatic+0x78>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <xQueueGenericCreateStatic+0x7c>
 8002db4:	2301      	movs	r3, #1
 8002db6:	e000      	b.n	8002dba <xQueueGenericCreateStatic+0x7e>
 8002db8:	2300      	movs	r3, #0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <xQueueGenericCreateStatic+0x96>
 8002dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc2:	f383 8811 	msr	BASEPRI, r3
 8002dc6:	f3bf 8f6f 	isb	sy
 8002dca:	f3bf 8f4f 	dsb	sy
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	e7fe      	b.n	8002dd0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dd2:	2350      	movs	r3, #80	; 0x50
 8002dd4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b50      	cmp	r3, #80	; 0x50
 8002dda:	d009      	beq.n	8002df0 <xQueueGenericCreateStatic+0xb4>
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	f383 8811 	msr	BASEPRI, r3
 8002de4:	f3bf 8f6f 	isb	sy
 8002de8:	f3bf 8f4f 	dsb	sy
 8002dec:	61bb      	str	r3, [r7, #24]
 8002dee:	e7fe      	b.n	8002dee <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002df0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00d      	beq.n	8002e18 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e04:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 f844 	bl	8002ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3730      	adds	r7, #48	; 0x30
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b08a      	sub	sp, #40	; 0x28
 8002e26:	af02      	add	r7, sp, #8
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <xQueueGenericCreate+0x28>
 8002e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3a:	f383 8811 	msr	BASEPRI, r3
 8002e3e:	f3bf 8f6f 	isb	sy
 8002e42:	f3bf 8f4f 	dsb	sy
 8002e46:	613b      	str	r3, [r7, #16]
 8002e48:	e7fe      	b.n	8002e48 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d102      	bne.n	8002e56 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002e50:	2300      	movs	r3, #0
 8002e52:	61fb      	str	r3, [r7, #28]
 8002e54:	e004      	b.n	8002e60 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	68ba      	ldr	r2, [r7, #8]
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	3350      	adds	r3, #80	; 0x50
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fa8b 	bl	8005380 <pvPortMalloc>
 8002e6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d011      	beq.n	8002e96 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	3350      	adds	r3, #80	; 0x50
 8002e7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e84:	79fa      	ldrb	r2, [r7, #7]
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	9300      	str	r3, [sp, #0]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	68b9      	ldr	r1, [r7, #8]
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f805 	bl	8002ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e96:	69bb      	ldr	r3, [r7, #24]
	}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3720      	adds	r7, #32
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d103      	bne.n	8002ebc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002eb4:	69bb      	ldr	r3, [r7, #24]
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	e002      	b.n	8002ec2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	68ba      	ldr	r2, [r7, #8]
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ece:	2101      	movs	r1, #1
 8002ed0:	69b8      	ldr	r0, [r7, #24]
 8002ed2:	f7ff fecb 	bl	8002c6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 8002ede:	78fb      	ldrb	r3, [r7, #3]
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	68f9      	ldr	r1, [r7, #12]
 8002ee4:	2073      	movs	r0, #115	; 0x73
 8002ee6:	f003 f8f7 	bl	80060d8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002eea:	bf00      	nop
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b08a      	sub	sp, #40	; 0x28
 8002ef6:	af02      	add	r7, sp, #8
 8002ef8:	60f8      	str	r0, [r7, #12]
 8002efa:	60b9      	str	r1, [r7, #8]
 8002efc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <xQueueCreateCountingSemaphoreStatic+0x26>
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e7fe      	b.n	8002f16 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d909      	bls.n	8002f34 <xQueueCreateCountingSemaphoreStatic+0x42>
 8002f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f24:	f383 8811 	msr	BASEPRI, r3
 8002f28:	f3bf 8f6f 	isb	sy
 8002f2c:	f3bf 8f4f 	dsb	sy
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	e7fe      	b.n	8002f32 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002f34:	2302      	movs	r3, #2
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2100      	movs	r1, #0
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f7ff fefc 	bl	8002d3c <xQueueGenericCreateStatic>
 8002f44:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d002      	beq.n	8002f52 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002f52:	69fb      	ldr	r3, [r7, #28]
	}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d109      	bne.n	8002f80 <xQueueCreateCountingSemaphore+0x24>
 8002f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f70:	f383 8811 	msr	BASEPRI, r3
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	f3bf 8f4f 	dsb	sy
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	e7fe      	b.n	8002f7e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d909      	bls.n	8002f9c <xQueueCreateCountingSemaphore+0x40>
 8002f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f8c:	f383 8811 	msr	BASEPRI, r3
 8002f90:	f3bf 8f6f 	isb	sy
 8002f94:	f3bf 8f4f 	dsb	sy
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	e7fe      	b.n	8002f9a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ff3e 	bl	8002e22 <xQueueGenericCreate>
 8002fa6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002fb4:	697b      	ldr	r3, [r7, #20]
	}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b090      	sub	sp, #64	; 0x40
 8002fc4:	af02      	add	r7, sp, #8
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <xQueueGenericSend+0x30>
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fee:	e7fe      	b.n	8002fee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <xQueueGenericSend+0x3e>
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <xQueueGenericSend+0x42>
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <xQueueGenericSend+0x44>
 8003002:	2300      	movs	r3, #0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d109      	bne.n	800301c <xQueueGenericSend+0x5c>
 8003008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	627b      	str	r3, [r7, #36]	; 0x24
 800301a:	e7fe      	b.n	800301a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b02      	cmp	r3, #2
 8003020:	d103      	bne.n	800302a <xQueueGenericSend+0x6a>
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <xQueueGenericSend+0x6e>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <xQueueGenericSend+0x70>
 800302e:	2300      	movs	r3, #0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d109      	bne.n	8003048 <xQueueGenericSend+0x88>
 8003034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003038:	f383 8811 	msr	BASEPRI, r3
 800303c:	f3bf 8f6f 	isb	sy
 8003040:	f3bf 8f4f 	dsb	sy
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	e7fe      	b.n	8003046 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003048:	f001 fb30 	bl	80046ac <xTaskGetSchedulerState>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d102      	bne.n	8003058 <xQueueGenericSend+0x98>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <xQueueGenericSend+0x9c>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <xQueueGenericSend+0x9e>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d109      	bne.n	8003076 <xQueueGenericSend+0xb6>
 8003062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003066:	f383 8811 	msr	BASEPRI, r3
 800306a:	f3bf 8f6f 	isb	sy
 800306e:	f3bf 8f4f 	dsb	sy
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	e7fe      	b.n	8003074 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003076:	f002 f869 	bl	800514c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800307a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <xQueueGenericSend+0xcc>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b02      	cmp	r3, #2
 800308a:	d136      	bne.n	80030fa <xQueueGenericSend+0x13a>
			{
				traceQUEUE_SEND( pxQueue );
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	4618      	mov	r0, r3
 8003090:	f003 fcd2 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	460b      	mov	r3, r1
 800309e:	4601      	mov	r1, r0
 80030a0:	205a      	movs	r0, #90	; 0x5a
 80030a2:	f003 f88f 	bl	80061c4 <SEGGER_SYSVIEW_RecordU32x4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	68b9      	ldr	r1, [r7, #8]
 80030aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030ac:	f000 fa91 	bl	80035d2 <prvCopyDataToQueue>
 80030b0:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d010      	beq.n	80030dc <xQueueGenericSend+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	3324      	adds	r3, #36	; 0x24
 80030be:	4618      	mov	r0, r3
 80030c0:	f001 f902 	bl	80042c8 <xTaskRemoveFromEventList>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d013      	beq.n	80030f2 <xQueueGenericSend+0x132>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030ca:	4b4d      	ldr	r3, [pc, #308]	; (8003200 <xQueueGenericSend+0x240>)
 80030cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d0:	601a      	str	r2, [r3, #0]
 80030d2:	f3bf 8f4f 	dsb	sy
 80030d6:	f3bf 8f6f 	isb	sy
 80030da:	e00a      	b.n	80030f2 <xQueueGenericSend+0x132>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d007      	beq.n	80030f2 <xQueueGenericSend+0x132>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030e2:	4b47      	ldr	r3, [pc, #284]	; (8003200 <xQueueGenericSend+0x240>)
 80030e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030f2:	f002 f859 	bl	80051a8 <vPortExitCritical>
				return pdPASS;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e07d      	b.n	80031f6 <xQueueGenericSend+0x236>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d110      	bne.n	8003122 <xQueueGenericSend+0x162>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003100:	f002 f852 	bl	80051a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	4618      	mov	r0, r3
 8003108:	f003 fc96 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 800310c:	68ba      	ldr	r2, [r7, #8]
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	460b      	mov	r3, r1
 8003116:	4601      	mov	r1, r0
 8003118:	205a      	movs	r0, #90	; 0x5a
 800311a:	f003 f853 	bl	80061c4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_FULL;
 800311e:	2300      	movs	r3, #0
 8003120:	e069      	b.n	80031f6 <xQueueGenericSend+0x236>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003124:	2b00      	cmp	r3, #0
 8003126:	d106      	bne.n	8003136 <xQueueGenericSend+0x176>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	4618      	mov	r0, r3
 800312e:	f001 f931 	bl	8004394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003132:	2301      	movs	r3, #1
 8003134:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003136:	f002 f837 	bl	80051a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800313a:	f000 fe5b 	bl	8003df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800313e:	f002 f805 	bl	800514c <vPortEnterCritical>
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003148:	b25b      	sxtb	r3, r3
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d103      	bne.n	8003158 <xQueueGenericSend+0x198>
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	2200      	movs	r2, #0
 8003154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800315a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800315e:	b25b      	sxtb	r3, r3
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d103      	bne.n	800316e <xQueueGenericSend+0x1ae>
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800316e:	f002 f81b 	bl	80051a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003172:	1d3a      	adds	r2, r7, #4
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f001 f920 	bl	80043c0 <xTaskCheckForTimeOut>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d124      	bne.n	80031d0 <xQueueGenericSend+0x210>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003186:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003188:	f000 fb1b 	bl	80037c2 <prvIsQueueFull>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d018      	beq.n	80031c4 <xQueueGenericSend+0x204>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003194:	3310      	adds	r3, #16
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	4611      	mov	r1, r2
 800319a:	4618      	mov	r0, r3
 800319c:	f001 f842 	bl	8004224 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80031a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031a2:	f000 faa6 	bl	80036f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80031a6:	f000 fe33 	bl	8003e10 <xTaskResumeAll>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f47f af62 	bne.w	8003076 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80031b2:	4b13      	ldr	r3, [pc, #76]	; (8003200 <xQueueGenericSend+0x240>)
 80031b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	e758      	b.n	8003076 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80031c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031c6:	f000 fa94 	bl	80036f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80031ca:	f000 fe21 	bl	8003e10 <xTaskResumeAll>
 80031ce:	e752      	b.n	8003076 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031d2:	f000 fa8e 	bl	80036f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031d6:	f000 fe1b 	bl	8003e10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
 80031da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031dc:	4618      	mov	r0, r3
 80031de:	f003 fc2b 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	460b      	mov	r3, r1
 80031ec:	4601      	mov	r1, r0
 80031ee:	205a      	movs	r0, #90	; 0x5a
 80031f0:	f002 ffe8 	bl	80061c4 <SEGGER_SYSVIEW_RecordU32x4>
			return errQUEUE_FULL;
 80031f4:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3738      	adds	r7, #56	; 0x38
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	e000ed04 	.word	0xe000ed04

08003204 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08e      	sub	sp, #56	; 0x38
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003218:	2b00      	cmp	r3, #0
 800321a:	d109      	bne.n	8003230 <xQueueGenericSendFromISR+0x2c>
 800321c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003220:	f383 8811 	msr	BASEPRI, r3
 8003224:	f3bf 8f6f 	isb	sy
 8003228:	f3bf 8f4f 	dsb	sy
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	e7fe      	b.n	800322e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d103      	bne.n	800323e <xQueueGenericSendFromISR+0x3a>
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <xQueueGenericSendFromISR+0x3e>
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <xQueueGenericSendFromISR+0x40>
 8003242:	2300      	movs	r3, #0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d109      	bne.n	800325c <xQueueGenericSendFromISR+0x58>
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	623b      	str	r3, [r7, #32]
 800325a:	e7fe      	b.n	800325a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d103      	bne.n	800326a <xQueueGenericSendFromISR+0x66>
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <xQueueGenericSendFromISR+0x6a>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <xQueueGenericSendFromISR+0x6c>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d109      	bne.n	8003288 <xQueueGenericSendFromISR+0x84>
 8003274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003278:	f383 8811 	msr	BASEPRI, r3
 800327c:	f3bf 8f6f 	isb	sy
 8003280:	f3bf 8f4f 	dsb	sy
 8003284:	61fb      	str	r3, [r7, #28]
 8003286:	e7fe      	b.n	8003286 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003288:	f002 f83c 	bl	8005304 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800328c:	f3ef 8211 	mrs	r2, BASEPRI
 8003290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003294:	f383 8811 	msr	BASEPRI, r3
 8003298:	f3bf 8f6f 	isb	sy
 800329c:	f3bf 8f4f 	dsb	sy
 80032a0:	61ba      	str	r2, [r7, #24]
 80032a2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80032a4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80032a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80032a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d302      	bcc.n	80032ba <xQueueGenericSendFromISR+0xb6>
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d136      	bne.n	8003328 <xQueueGenericSendFromISR+0x124>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80032ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

			traceQUEUE_SEND_FROM_ISR( pxQueue );
 80032c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c6:	4618      	mov	r0, r3
 80032c8:	f003 fbb6 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 80032cc:	4601      	mov	r1, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	461a      	mov	r2, r3
 80032d2:	2060      	movs	r0, #96	; 0x60
 80032d4:	f002 fea6 	bl	8006024 <SEGGER_SYSVIEW_RecordU32x2>
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80032de:	f000 f978 	bl	80035d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80032e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d112      	bne.n	8003312 <xQueueGenericSendFromISR+0x10e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d016      	beq.n	8003322 <xQueueGenericSendFromISR+0x11e>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f6:	3324      	adds	r3, #36	; 0x24
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 ffe5 	bl	80042c8 <xTaskRemoveFromEventList>
 80032fe:	4603      	mov	r3, r0
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00e      	beq.n	8003322 <xQueueGenericSendFromISR+0x11e>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d00b      	beq.n	8003322 <xQueueGenericSendFromISR+0x11e>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e007      	b.n	8003322 <xQueueGenericSendFromISR+0x11e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003312:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003316:	3301      	adds	r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	b25a      	sxtb	r2, r3
 800331c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003322:	2301      	movs	r3, #1
 8003324:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003326:	e00b      	b.n	8003340 <xQueueGenericSendFromISR+0x13c>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8003328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fb84 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 8003330:	4601      	mov	r1, r0
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	461a      	mov	r2, r3
 8003336:	2060      	movs	r0, #96	; 0x60
 8003338:	f002 fe74 	bl	8006024 <SEGGER_SYSVIEW_RecordU32x2>
			xReturn = errQUEUE_FULL;
 800333c:	2300      	movs	r3, #0
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800334a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800334c:	4618      	mov	r0, r3
 800334e:	3738      	adds	r7, #56	; 0x38
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003354:	b590      	push	{r4, r7, lr}
 8003356:	b08f      	sub	sp, #60	; 0x3c
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003360:	2300      	movs	r3, #0
 8003362:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	2b00      	cmp	r3, #0
 800336c:	d109      	bne.n	8003382 <xQueueReceive+0x2e>
	__asm volatile
 800336e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003372:	f383 8811 	msr	BASEPRI, r3
 8003376:	f3bf 8f6f 	isb	sy
 800337a:	f3bf 8f4f 	dsb	sy
 800337e:	623b      	str	r3, [r7, #32]
 8003380:	e7fe      	b.n	8003380 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d103      	bne.n	8003390 <xQueueReceive+0x3c>
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <xQueueReceive+0x40>
 8003390:	2301      	movs	r3, #1
 8003392:	e000      	b.n	8003396 <xQueueReceive+0x42>
 8003394:	2300      	movs	r3, #0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <xQueueReceive+0x5a>
 800339a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800339e:	f383 8811 	msr	BASEPRI, r3
 80033a2:	f3bf 8f6f 	isb	sy
 80033a6:	f3bf 8f4f 	dsb	sy
 80033aa:	61fb      	str	r3, [r7, #28]
 80033ac:	e7fe      	b.n	80033ac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033ae:	f001 f97d 	bl	80046ac <xTaskGetSchedulerState>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d102      	bne.n	80033be <xQueueReceive+0x6a>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <xQueueReceive+0x6e>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <xQueueReceive+0x70>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <xQueueReceive+0x88>
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	61bb      	str	r3, [r7, #24]
 80033da:	e7fe      	b.n	80033da <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80033dc:	f001 feb6 	bl	800514c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d031      	beq.n	8003450 <xQueueReceive+0xfc>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033ec:	68b9      	ldr	r1, [r7, #8]
 80033ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80033f0:	f000 f959 	bl	80036a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
 80033f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033f6:	4618      	mov	r0, r3
 80033f8:	f003 fb1e 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 80033fc:	4604      	mov	r4, r0
 80033fe:	2000      	movs	r0, #0
 8003400:	f003 fb1a 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 8003404:	4601      	mov	r1, r0
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	2301      	movs	r3, #1
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	4613      	mov	r3, r2
 800340e:	460a      	mov	r2, r1
 8003410:	4621      	mov	r1, r4
 8003412:	205c      	movs	r0, #92	; 0x5c
 8003414:	f002 fed6 	bl	80061c4 <SEGGER_SYSVIEW_RecordU32x4>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	1e5a      	subs	r2, r3, #1
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00f      	beq.n	8003448 <xQueueReceive+0xf4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	3310      	adds	r3, #16
 800342c:	4618      	mov	r0, r3
 800342e:	f000 ff4b 	bl	80042c8 <xTaskRemoveFromEventList>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <xQueueReceive+0xf4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003438:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <xQueueReceive+0x224>)
 800343a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	f3bf 8f4f 	dsb	sy
 8003444:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003448:	f001 feae 	bl	80051a8 <vPortExitCritical>
				return pdPASS;
 800344c:	2301      	movs	r3, #1
 800344e:	e08e      	b.n	800356e <xQueueReceive+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d115      	bne.n	8003482 <xQueueReceive+0x12e>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003456:	f001 fea7 	bl	80051a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800345a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345c:	4618      	mov	r0, r3
 800345e:	f003 faeb 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 8003462:	4604      	mov	r4, r0
 8003464:	2000      	movs	r0, #0
 8003466:	f003 fae7 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 800346a:	4601      	mov	r1, r0
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	2301      	movs	r3, #1
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	4613      	mov	r3, r2
 8003474:	460a      	mov	r2, r1
 8003476:	4621      	mov	r1, r4
 8003478:	205c      	movs	r0, #92	; 0x5c
 800347a:	f002 fea3 	bl	80061c4 <SEGGER_SYSVIEW_RecordU32x4>
					return errQUEUE_EMPTY;
 800347e:	2300      	movs	r3, #0
 8003480:	e075      	b.n	800356e <xQueueReceive+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d106      	bne.n	8003496 <xQueueReceive+0x142>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003488:	f107 0310 	add.w	r3, r7, #16
 800348c:	4618      	mov	r0, r3
 800348e:	f000 ff81 	bl	8004394 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003492:	2301      	movs	r3, #1
 8003494:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003496:	f001 fe87 	bl	80051a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800349a:	f000 fcab 	bl	8003df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800349e:	f001 fe55 	bl	800514c <vPortEnterCritical>
 80034a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d103      	bne.n	80034b8 <xQueueReceive+0x164>
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034be:	b25b      	sxtb	r3, r3
 80034c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c4:	d103      	bne.n	80034ce <xQueueReceive+0x17a>
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034ce:	f001 fe6b 	bl	80051a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034d2:	1d3a      	adds	r2, r7, #4
 80034d4:	f107 0310 	add.w	r3, r7, #16
 80034d8:	4611      	mov	r1, r2
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 ff70 	bl	80043c0 <xTaskCheckForTimeOut>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d124      	bne.n	8003530 <xQueueReceive+0x1dc>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034e8:	f000 f955 	bl	8003796 <prvIsQueueEmpty>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d018      	beq.n	8003524 <xQueueReceive+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	3324      	adds	r3, #36	; 0x24
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4611      	mov	r1, r2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fe92 	bl	8004224 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003502:	f000 f8f6 	bl	80036f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003506:	f000 fc83 	bl	8003e10 <xTaskResumeAll>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	f47f af65 	bne.w	80033dc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003512:	4b19      	ldr	r3, [pc, #100]	; (8003578 <xQueueReceive+0x224>)
 8003514:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	f3bf 8f4f 	dsb	sy
 800351e:	f3bf 8f6f 	isb	sy
 8003522:	e75b      	b.n	80033dc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003526:	f000 f8e4 	bl	80036f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800352a:	f000 fc71 	bl	8003e10 <xTaskResumeAll>
 800352e:	e755      	b.n	80033dc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003530:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003532:	f000 f8de 	bl	80036f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003536:	f000 fc6b 	bl	8003e10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800353a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800353c:	f000 f92b 	bl	8003796 <prvIsQueueEmpty>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	f43f af4a 	beq.w	80033dc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 8003548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354a:	4618      	mov	r0, r3
 800354c:	f003 fa74 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 8003550:	4604      	mov	r4, r0
 8003552:	2000      	movs	r0, #0
 8003554:	f003 fa70 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 8003558:	4601      	mov	r1, r0
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	2301      	movs	r3, #1
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	4613      	mov	r3, r2
 8003562:	460a      	mov	r2, r1
 8003564:	4621      	mov	r1, r4
 8003566:	205c      	movs	r0, #92	; 0x5c
 8003568:	f002 fe2c 	bl	80061c4 <SEGGER_SYSVIEW_RecordU32x4>
				return errQUEUE_EMPTY;
 800356c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800356e:	4618      	mov	r0, r3
 8003570:	3734      	adds	r7, #52	; 0x34
 8003572:	46bd      	mov	sp, r7
 8003574:	bd90      	pop	{r4, r7, pc}
 8003576:	bf00      	nop
 8003578:	e000ed04 	.word	0xe000ed04

0800357c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <vQueueDelete+0x26>
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	60bb      	str	r3, [r7, #8]
 80035a0:	e7fe      	b.n	80035a0 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f003 fa47 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 80035aa:	4603      	mov	r3, r0
 80035ac:	4619      	mov	r1, r3
 80035ae:	205f      	movs	r0, #95	; 0x5f
 80035b0:	f002 fcfc 	bl	8005fac <SEGGER_SYSVIEW_RecordU32>

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f94d 	bl	8003854 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d102      	bne.n	80035ca <vQueueDelete+0x4e>
		{
			vPortFree( pxQueue );
 80035c4:	68f8      	ldr	r0, [r7, #12]
 80035c6:	f001 ff9d 	bl	8005504 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80035ca:	bf00      	nop
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d10d      	bne.n	800360c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d14d      	bne.n	8003694 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 f873 	bl	80046e8 <xTaskPriorityDisinherit>
 8003602:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	609a      	str	r2, [r3, #8]
 800360a:	e043      	b.n	8003694 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d119      	bne.n	8003646 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6858      	ldr	r0, [r3, #4]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361a:	461a      	mov	r2, r3
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	f003 fccc 	bl	8006fba <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	685a      	ldr	r2, [r3, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362a:	441a      	add	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	d32b      	bcc.n	8003694 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	605a      	str	r2, [r3, #4]
 8003644:	e026      	b.n	8003694 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68d8      	ldr	r0, [r3, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	461a      	mov	r2, r3
 8003650:	68b9      	ldr	r1, [r7, #8]
 8003652:	f003 fcb2 	bl	8006fba <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	425b      	negs	r3, r3
 8003660:	441a      	add	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d207      	bcs.n	8003682 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	425b      	negs	r3, r3
 800367c:	441a      	add	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b02      	cmp	r3, #2
 8003686:	d105      	bne.n	8003694 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d002      	beq.n	8003694 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	3b01      	subs	r3, #1
 8003692:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1c5a      	adds	r2, r3, #1
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800369c:	697b      	ldr	r3, [r7, #20]
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b082      	sub	sp, #8
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	6078      	str	r0, [r7, #4]
 80036ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d018      	beq.n	80036ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	441a      	add	r2, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d303      	bcc.n	80036da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	68d9      	ldr	r1, [r3, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e2:	461a      	mov	r2, r3
 80036e4:	6838      	ldr	r0, [r7, #0]
 80036e6:	f003 fc68 	bl	8006fba <memcpy>
	}
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80036fa:	f001 fd27 	bl	800514c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003704:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003706:	e011      	b.n	800372c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370c:	2b00      	cmp	r3, #0
 800370e:	d012      	beq.n	8003736 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3324      	adds	r3, #36	; 0x24
 8003714:	4618      	mov	r0, r3
 8003716:	f000 fdd7 	bl	80042c8 <xTaskRemoveFromEventList>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d001      	beq.n	8003724 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003720:	f000 feae 	bl	8004480 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	3b01      	subs	r3, #1
 8003728:	b2db      	uxtb	r3, r3
 800372a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800372c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003730:	2b00      	cmp	r3, #0
 8003732:	dce9      	bgt.n	8003708 <prvUnlockQueue+0x16>
 8003734:	e000      	b.n	8003738 <prvUnlockQueue+0x46>
					break;
 8003736:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	22ff      	movs	r2, #255	; 0xff
 800373c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003740:	f001 fd32 	bl	80051a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003744:	f001 fd02 	bl	800514c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800374e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003750:	e011      	b.n	8003776 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d012      	beq.n	8003780 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	3310      	adds	r3, #16
 800375e:	4618      	mov	r0, r3
 8003760:	f000 fdb2 	bl	80042c8 <xTaskRemoveFromEventList>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800376a:	f000 fe89 	bl	8004480 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800376e:	7bbb      	ldrb	r3, [r7, #14]
 8003770:	3b01      	subs	r3, #1
 8003772:	b2db      	uxtb	r3, r3
 8003774:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003776:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800377a:	2b00      	cmp	r3, #0
 800377c:	dce9      	bgt.n	8003752 <prvUnlockQueue+0x60>
 800377e:	e000      	b.n	8003782 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003780:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	22ff      	movs	r2, #255	; 0xff
 8003786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800378a:	f001 fd0d 	bl	80051a8 <vPortExitCritical>
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b084      	sub	sp, #16
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800379e:	f001 fcd5 	bl	800514c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80037aa:	2301      	movs	r3, #1
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	e001      	b.n	80037b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80037b0:	2300      	movs	r3, #0
 80037b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037b4:	f001 fcf8 	bl	80051a8 <vPortExitCritical>

	return xReturn;
 80037b8:	68fb      	ldr	r3, [r7, #12]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3710      	adds	r7, #16
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b084      	sub	sp, #16
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80037ca:	f001 fcbf 	bl	800514c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d102      	bne.n	80037e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80037da:	2301      	movs	r3, #1
 80037dc:	60fb      	str	r3, [r7, #12]
 80037de:	e001      	b.n	80037e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80037e0:	2300      	movs	r3, #0
 80037e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80037e4:	f001 fce0 	bl	80051a8 <vPortExitCritical>

	return xReturn;
 80037e8:	68fb      	ldr	r3, [r7, #12]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	e01e      	b.n	8003842 <vQueueAddToRegistry+0x4e>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003804:	4a12      	ldr	r2, [pc, #72]	; (8003850 <vQueueAddToRegistry+0x5c>)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d115      	bne.n	800383c <vQueueAddToRegistry+0x48>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003810:	490f      	ldr	r1, [pc, #60]	; (8003850 <vQueueAddToRegistry+0x5c>)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800381a:	4a0d      	ldr	r2, [pc, #52]	; (8003850 <vQueueAddToRegistry+0x5c>)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4413      	add	r3, r2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4618      	mov	r0, r3
 800382a:	f003 f905 	bl	8006a38 <SEGGER_SYSVIEW_ShrinkId>
 800382e:	4601      	mov	r1, r0
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	461a      	mov	r2, r3
 8003834:	2071      	movs	r0, #113	; 0x71
 8003836:	f002 fbf5 	bl	8006024 <SEGGER_SYSVIEW_RecordU32x2>
				break;
 800383a:	e005      	b.n	8003848 <vQueueAddToRegistry+0x54>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3301      	adds	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2b07      	cmp	r3, #7
 8003846:	d9dd      	bls.n	8003804 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	200053bc 	.word	0x200053bc

08003854 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	e016      	b.n	8003890 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <vQueueUnregisterQueue+0x50>)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	4413      	add	r3, r2
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	687a      	ldr	r2, [r7, #4]
 800386e:	429a      	cmp	r2, r3
 8003870:	d10b      	bne.n	800388a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003872:	4a0c      	ldr	r2, [pc, #48]	; (80038a4 <vQueueUnregisterQueue+0x50>)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2100      	movs	r1, #0
 8003878:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800387c:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <vQueueUnregisterQueue+0x50>)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4413      	add	r3, r2
 8003884:	2200      	movs	r2, #0
 8003886:	605a      	str	r2, [r3, #4]
				break;
 8003888:	e005      	b.n	8003896 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3301      	adds	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b07      	cmp	r3, #7
 8003894:	d9e5      	bls.n	8003862 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003896:	bf00      	nop
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	200053bc 	.word	0x200053bc

080038a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038b8:	f001 fc48 	bl	800514c <vPortEnterCritical>
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038c2:	b25b      	sxtb	r3, r3
 80038c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c8:	d103      	bne.n	80038d2 <vQueueWaitForMessageRestricted+0x2a>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038d8:	b25b      	sxtb	r3, r3
 80038da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038de:	d103      	bne.n	80038e8 <vQueueWaitForMessageRestricted+0x40>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038e8:	f001 fc5e 	bl	80051a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d106      	bne.n	8003902 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	3324      	adds	r3, #36	; 0x24
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fcb5 	bl	800426c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003902:	6978      	ldr	r0, [r7, #20]
 8003904:	f7ff fef5 	bl	80036f2 <prvUnlockQueue>
	}
 8003908:	bf00      	nop
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08e      	sub	sp, #56	; 0x38
 8003914:	af04      	add	r7, sp, #16
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
 800391c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	2b00      	cmp	r3, #0
 8003922:	d109      	bne.n	8003938 <xTaskCreateStatic+0x28>
 8003924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	623b      	str	r3, [r7, #32]
 8003936:	e7fe      	b.n	8003936 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393a:	2b00      	cmp	r3, #0
 800393c:	d109      	bne.n	8003952 <xTaskCreateStatic+0x42>
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	61fb      	str	r3, [r7, #28]
 8003950:	e7fe      	b.n	8003950 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003952:	2360      	movs	r3, #96	; 0x60
 8003954:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b60      	cmp	r3, #96	; 0x60
 800395a:	d009      	beq.n	8003970 <xTaskCreateStatic+0x60>
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	e7fe      	b.n	800396e <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003970:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	2b00      	cmp	r3, #0
 8003976:	d01e      	beq.n	80039b6 <xTaskCreateStatic+0xa6>
 8003978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01b      	beq.n	80039b6 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800397e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003986:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800398a:	2202      	movs	r2, #2
 800398c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003990:	2300      	movs	r3, #0
 8003992:	9303      	str	r3, [sp, #12]
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	9302      	str	r3, [sp, #8]
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	9301      	str	r3, [sp, #4]
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	68b9      	ldr	r1, [r7, #8]
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 f850 	bl	8003a4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039b0:	f000 f8de 	bl	8003b70 <prvAddNewTaskToReadyList>
 80039b4:	e001      	b.n	80039ba <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039ba:	697b      	ldr	r3, [r7, #20]
	}
 80039bc:	4618      	mov	r0, r3
 80039be:	3728      	adds	r7, #40	; 0x28
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08c      	sub	sp, #48	; 0x30
 80039c8:	af04      	add	r7, sp, #16
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4613      	mov	r3, r2
 80039d2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 fcd1 	bl	8005380 <pvPortMalloc>
 80039de:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00e      	beq.n	8003a04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039e6:	2060      	movs	r0, #96	; 0x60
 80039e8:	f001 fcca 	bl	8005380 <pvPortMalloc>
 80039ec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
 80039fa:	e005      	b.n	8003a08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80039fc:	6978      	ldr	r0, [r7, #20]
 80039fe:	f001 fd81 	bl	8005504 <vPortFree>
 8003a02:	e001      	b.n	8003a08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a04:	2300      	movs	r3, #0
 8003a06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d017      	beq.n	8003a3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a16:	88fa      	ldrh	r2, [r7, #6]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	9303      	str	r3, [sp, #12]
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	9302      	str	r3, [sp, #8]
 8003a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	68b9      	ldr	r1, [r7, #8]
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 f80e 	bl	8003a4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a32:	69f8      	ldr	r0, [r7, #28]
 8003a34:	f000 f89c 	bl	8003b70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	61bb      	str	r3, [r7, #24]
 8003a3c:	e002      	b.n	8003a44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a44:	69bb      	ldr	r3, [r7, #24]
	}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3720      	adds	r7, #32
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b088      	sub	sp, #32
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
 8003a5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	461a      	mov	r2, r3
 8003a66:	21a5      	movs	r1, #165	; 0xa5
 8003a68:	f003 fab2 	bl	8006fd0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a76:	3b01      	subs	r3, #1
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	4413      	add	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	f023 0307 	bic.w	r3, r3, #7
 8003a84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <prvInitialiseNewTask+0x56>
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	e7fe      	b.n	8003aa2 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01f      	beq.n	8003aea <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e012      	b.n	8003ad6 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	7819      	ldrb	r1, [r3, #0]
 8003ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	3334      	adds	r3, #52	; 0x34
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2b0f      	cmp	r3, #15
 8003ada:	d9e9      	bls.n	8003ab0 <prvInitialiseNewTask+0x62>
 8003adc:	e000      	b.n	8003ae0 <prvInitialiseNewTask+0x92>
			{
				break;
 8003ade:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ae8:	e003      	b.n	8003af2 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af4:	2b37      	cmp	r3, #55	; 0x37
 8003af6:	d901      	bls.n	8003afc <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003af8:	2337      	movs	r3, #55	; 0x37
 8003afa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	3304      	adds	r3, #4
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff f816 	bl	8002b44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	3318      	adds	r3, #24
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff f811 	bl	8002b44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8003b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	2200      	movs	r2, #0
 8003b42:	659a      	str	r2, [r3, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	69b8      	ldr	r0, [r7, #24]
 8003b52:	f001 f9d7 	bl	8004f04 <pxPortInitialiseStack>
 8003b56:	4602      	mov	r2, r0
 8003b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d002      	beq.n	8003b68 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b68:	bf00      	nop
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b70:	b5b0      	push	{r4, r5, r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af02      	add	r7, sp, #8
 8003b76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b78:	f001 fae8 	bl	800514c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b7c:	4b3c      	ldr	r3, [pc, #240]	; (8003c70 <prvAddNewTaskToReadyList+0x100>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	3301      	adds	r3, #1
 8003b82:	4a3b      	ldr	r2, [pc, #236]	; (8003c70 <prvAddNewTaskToReadyList+0x100>)
 8003b84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b86:	4b3b      	ldr	r3, [pc, #236]	; (8003c74 <prvAddNewTaskToReadyList+0x104>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b8e:	4a39      	ldr	r2, [pc, #228]	; (8003c74 <prvAddNewTaskToReadyList+0x104>)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b94:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <prvAddNewTaskToReadyList+0x100>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d110      	bne.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b9c:	f000 fc94 	bl	80044c8 <prvInitialiseTaskLists>
 8003ba0:	e00d      	b.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003ba2:	4b35      	ldr	r3, [pc, #212]	; (8003c78 <prvAddNewTaskToReadyList+0x108>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003baa:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <prvAddNewTaskToReadyList+0x104>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d802      	bhi.n	8003bbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bb8:	4a2e      	ldr	r2, [pc, #184]	; (8003c74 <prvAddNewTaskToReadyList+0x104>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bbe:	4b2f      	ldr	r3, [pc, #188]	; (8003c7c <prvAddNewTaskToReadyList+0x10c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	4a2d      	ldr	r2, [pc, #180]	; (8003c7c <prvAddNewTaskToReadyList+0x10c>)
 8003bc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	; (8003c7c <prvAddNewTaskToReadyList+0x10c>)
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d016      	beq.n	8003c04 <prvAddNewTaskToReadyList+0x94>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f002 fe67 	bl	80068ac <SEGGER_SYSVIEW_OnTaskCreate>
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bee:	461d      	mov	r5, r3
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	461c      	mov	r4, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfa:	1ae3      	subs	r3, r4, r3
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	462b      	mov	r3, r5
 8003c00:	f003 f91e 	bl	8006e40 <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f002 fed4 	bl	80069b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <prvAddNewTaskToReadyList+0x110>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d903      	bls.n	8003c20 <prvAddNewTaskToReadyList+0xb0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <prvAddNewTaskToReadyList+0x110>)
 8003c1e:	6013      	str	r3, [r2, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4a15      	ldr	r2, [pc, #84]	; (8003c84 <prvAddNewTaskToReadyList+0x114>)
 8003c2e:	441a      	add	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	3304      	adds	r3, #4
 8003c34:	4619      	mov	r1, r3
 8003c36:	4610      	mov	r0, r2
 8003c38:	f7fe ff91 	bl	8002b5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c3c:	f001 fab4 	bl	80051a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c40:	4b0d      	ldr	r3, [pc, #52]	; (8003c78 <prvAddNewTaskToReadyList+0x108>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00e      	beq.n	8003c66 <prvAddNewTaskToReadyList+0xf6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <prvAddNewTaskToReadyList+0x104>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d207      	bcs.n	8003c66 <prvAddNewTaskToReadyList+0xf6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c56:	4b0c      	ldr	r3, [pc, #48]	; (8003c88 <prvAddNewTaskToReadyList+0x118>)
 8003c58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20000bd4 	.word	0x20000bd4
 8003c74:	20000700 	.word	0x20000700
 8003c78:	20000be0 	.word	0x20000be0
 8003c7c:	20000bf0 	.word	0x20000bf0
 8003c80:	20000bdc 	.word	0x20000bdc
 8003c84:	20000704 	.word	0x20000704
 8003c88:	e000ed04 	.word	0xe000ed04

08003c8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c94:	2300      	movs	r3, #0
 8003c96:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d01a      	beq.n	8003cd4 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c9e:	4b15      	ldr	r3, [pc, #84]	; (8003cf4 <vTaskDelay+0x68>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <vTaskDelay+0x2e>
 8003ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	60bb      	str	r3, [r7, #8]
 8003cb8:	e7fe      	b.n	8003cb8 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003cba:	f000 f89b 	bl	8003df4 <vTaskSuspendAll>
			{
				traceTASK_DELAY();
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	2023      	movs	r0, #35	; 0x23
 8003cc2:	f002 f973 	bl	8005fac <SEGGER_SYSVIEW_RecordU32>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fd81 	bl	80047d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cce:	f000 f89f 	bl	8003e10 <xTaskResumeAll>
 8003cd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <vTaskDelay+0x6c>)
 8003cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	f3bf 8f4f 	dsb	sy
 8003ce6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cea:	bf00      	nop
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000bfc 	.word	0x20000bfc
 8003cf8:	e000ed04 	.word	0xe000ed04

08003cfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003d0a:	463a      	mov	r2, r7
 8003d0c:	1d39      	adds	r1, r7, #4
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fe fec2 	bl	8002a9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d18:	6839      	ldr	r1, [r7, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68ba      	ldr	r2, [r7, #8]
 8003d1e:	9202      	str	r2, [sp, #8]
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	2300      	movs	r3, #0
 8003d28:	460a      	mov	r2, r1
 8003d2a:	492b      	ldr	r1, [pc, #172]	; (8003dd8 <vTaskStartScheduler+0xdc>)
 8003d2c:	482b      	ldr	r0, [pc, #172]	; (8003ddc <vTaskStartScheduler+0xe0>)
 8003d2e:	f7ff fdef 	bl	8003910 <xTaskCreateStatic>
 8003d32:	4602      	mov	r2, r0
 8003d34:	4b2a      	ldr	r3, [pc, #168]	; (8003de0 <vTaskStartScheduler+0xe4>)
 8003d36:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d38:	4b29      	ldr	r3, [pc, #164]	; (8003de0 <vTaskStartScheduler+0xe4>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d002      	beq.n	8003d46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d40:	2301      	movs	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e001      	b.n	8003d4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d102      	bne.n	8003d56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d50:	f000 fd92 	bl	8004878 <xTimerCreateTimerTask>
 8003d54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d12a      	bne.n	8003db2 <vTaskStartScheduler+0xb6>
 8003d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <vTaskStartScheduler+0xe8>)
 8003d70:	f04f 32ff 	mov.w	r2, #4294967295
 8003d74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d76:	4b1c      	ldr	r3, [pc, #112]	; (8003de8 <vTaskStartScheduler+0xec>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <vTaskStartScheduler+0xf0>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003d82:	f7fc fbef 	bl	8000564 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <vTaskStartScheduler+0xf4>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3334      	adds	r3, #52	; 0x34
 8003d8c:	2205      	movs	r2, #5
 8003d8e:	4912      	ldr	r1, [pc, #72]	; (8003dd8 <vTaskStartScheduler+0xdc>)
 8003d90:	4618      	mov	r0, r3
 8003d92:	f003 f903 	bl	8006f9c <memcmp>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <vTaskStartScheduler+0xac>
 8003d9c:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <vTaskStartScheduler+0xf4>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f002 fdc5 	bl	8006930 <SEGGER_SYSVIEW_OnTaskStartExec>
 8003da6:	e001      	b.n	8003dac <vTaskStartScheduler+0xb0>
 8003da8:	f002 fd64 	bl	8006874 <SEGGER_SYSVIEW_OnIdle>

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003dac:	f001 f930 	bl	8005010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003db0:	e00d      	b.n	8003dce <vTaskStartScheduler+0xd2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db8:	d109      	bne.n	8003dce <vTaskStartScheduler+0xd2>
 8003dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dbe:	f383 8811 	msr	BASEPRI, r3
 8003dc2:	f3bf 8f6f 	isb	sy
 8003dc6:	f3bf 8f4f 	dsb	sy
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	e7fe      	b.n	8003dcc <vTaskStartScheduler+0xd0>
}
 8003dce:	bf00      	nop
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	08007054 	.word	0x08007054
 8003ddc:	08004499 	.word	0x08004499
 8003de0:	20000bf8 	.word	0x20000bf8
 8003de4:	20000bf4 	.word	0x20000bf4
 8003de8:	20000be0 	.word	0x20000be0
 8003dec:	20000bd8 	.word	0x20000bd8
 8003df0:	20000700 	.word	0x20000700

08003df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003df8:	4b04      	ldr	r3, [pc, #16]	; (8003e0c <vTaskSuspendAll+0x18>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	4a03      	ldr	r2, [pc, #12]	; (8003e0c <vTaskSuspendAll+0x18>)
 8003e00:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20000bfc 	.word	0x20000bfc

08003e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003e1e:	4b43      	ldr	r3, [pc, #268]	; (8003f2c <xTaskResumeAll+0x11c>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d109      	bne.n	8003e3a <xTaskResumeAll+0x2a>
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	e7fe      	b.n	8003e38 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003e3a:	f001 f987 	bl	800514c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003e3e:	4b3b      	ldr	r3, [pc, #236]	; (8003f2c <xTaskResumeAll+0x11c>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	4a39      	ldr	r2, [pc, #228]	; (8003f2c <xTaskResumeAll+0x11c>)
 8003e46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e48:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <xTaskResumeAll+0x11c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d166      	bne.n	8003f1e <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e50:	4b37      	ldr	r3, [pc, #220]	; (8003f30 <xTaskResumeAll+0x120>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d062      	beq.n	8003f1e <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e58:	e033      	b.n	8003ec2 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e5a:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <xTaskResumeAll+0x124>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3318      	adds	r3, #24
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7fe fed6 	bl	8002c18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	3304      	adds	r3, #4
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fe fed1 	bl	8002c18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f002 fd9b 	bl	80069b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e82:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <xTaskResumeAll+0x128>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d903      	bls.n	8003e92 <xTaskResumeAll+0x82>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8e:	4a2a      	ldr	r2, [pc, #168]	; (8003f38 <xTaskResumeAll+0x128>)
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <xTaskResumeAll+0x12c>)
 8003ea0:	441a      	add	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	3304      	adds	r3, #4
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	4610      	mov	r0, r2
 8003eaa:	f7fe fe58 	bl	8002b5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb2:	4b23      	ldr	r3, [pc, #140]	; (8003f40 <xTaskResumeAll+0x130>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d302      	bcc.n	8003ec2 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8003ebc:	4b21      	ldr	r3, [pc, #132]	; (8003f44 <xTaskResumeAll+0x134>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ec2:	4b1c      	ldr	r3, [pc, #112]	; (8003f34 <xTaskResumeAll+0x124>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1c7      	bne.n	8003e5a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ed0:	f000 fbcc 	bl	800466c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ed4:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <xTaskResumeAll+0x138>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d010      	beq.n	8003f02 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ee0:	f000 f858 	bl	8003f94 <xTaskIncrementTick>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8003eea:	4b16      	ldr	r3, [pc, #88]	; (8003f44 <xTaskResumeAll+0x134>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f1      	bne.n	8003ee0 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8003efc:	4b12      	ldr	r3, [pc, #72]	; (8003f48 <xTaskResumeAll+0x138>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <xTaskResumeAll+0x134>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d009      	beq.n	8003f1e <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003f0e:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <xTaskResumeAll+0x13c>)
 8003f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f14:	601a      	str	r2, [r3, #0]
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003f1e:	f001 f943 	bl	80051a8 <vPortExitCritical>

	return xAlreadyYielded;
 8003f22:	68bb      	ldr	r3, [r7, #8]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000bfc 	.word	0x20000bfc
 8003f30:	20000bd4 	.word	0x20000bd4
 8003f34:	20000b94 	.word	0x20000b94
 8003f38:	20000bdc 	.word	0x20000bdc
 8003f3c:	20000704 	.word	0x20000704
 8003f40:	20000700 	.word	0x20000700
 8003f44:	20000be8 	.word	0x20000be8
 8003f48:	20000be4 	.word	0x20000be4
 8003f4c:	e000ed04 	.word	0xe000ed04

08003f50 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f56:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <xTaskGetTickCount+0x1c>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f5c:	687b      	ldr	r3, [r7, #4]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	370c      	adds	r7, #12
 8003f62:	46bd      	mov	sp, r7
 8003f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	20000bd8 	.word	0x20000bd8

08003f70 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f76:	f001 f9c5 	bl	8005304 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003f7e:	4b04      	ldr	r3, [pc, #16]	; (8003f90 <xTaskGetTickCountFromISR+0x20>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f84:	683b      	ldr	r3, [r7, #0]
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	20000bd8 	.word	0x20000bd8

08003f94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f9e:	4b50      	ldr	r3, [pc, #320]	; (80040e0 <xTaskIncrementTick+0x14c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f040 808c 	bne.w	80040c0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003fa8:	4b4e      	ldr	r3, [pc, #312]	; (80040e4 <xTaskIncrementTick+0x150>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3301      	adds	r3, #1
 8003fae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003fb0:	4a4c      	ldr	r2, [pc, #304]	; (80040e4 <xTaskIncrementTick+0x150>)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d11f      	bne.n	8003ffc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003fbc:	4b4a      	ldr	r3, [pc, #296]	; (80040e8 <xTaskIncrementTick+0x154>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <xTaskIncrementTick+0x46>
 8003fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fca:	f383 8811 	msr	BASEPRI, r3
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f3bf 8f4f 	dsb	sy
 8003fd6:	603b      	str	r3, [r7, #0]
 8003fd8:	e7fe      	b.n	8003fd8 <xTaskIncrementTick+0x44>
 8003fda:	4b43      	ldr	r3, [pc, #268]	; (80040e8 <xTaskIncrementTick+0x154>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	4b42      	ldr	r3, [pc, #264]	; (80040ec <xTaskIncrementTick+0x158>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a40      	ldr	r2, [pc, #256]	; (80040e8 <xTaskIncrementTick+0x154>)
 8003fe6:	6013      	str	r3, [r2, #0]
 8003fe8:	4a40      	ldr	r2, [pc, #256]	; (80040ec <xTaskIncrementTick+0x158>)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6013      	str	r3, [r2, #0]
 8003fee:	4b40      	ldr	r3, [pc, #256]	; (80040f0 <xTaskIncrementTick+0x15c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	4a3e      	ldr	r2, [pc, #248]	; (80040f0 <xTaskIncrementTick+0x15c>)
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	f000 fb38 	bl	800466c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ffc:	4b3d      	ldr	r3, [pc, #244]	; (80040f4 <xTaskIncrementTick+0x160>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	429a      	cmp	r2, r3
 8004004:	d34d      	bcc.n	80040a2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004006:	4b38      	ldr	r3, [pc, #224]	; (80040e8 <xTaskIncrementTick+0x154>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004010:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <xTaskIncrementTick+0x160>)
 8004012:	f04f 32ff 	mov.w	r2, #4294967295
 8004016:	601a      	str	r2, [r3, #0]
					break;
 8004018:	e043      	b.n	80040a2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800401a:	4b33      	ldr	r3, [pc, #204]	; (80040e8 <xTaskIncrementTick+0x154>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	429a      	cmp	r2, r3
 8004030:	d203      	bcs.n	800403a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004032:	4a30      	ldr	r2, [pc, #192]	; (80040f4 <xTaskIncrementTick+0x160>)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004038:	e033      	b.n	80040a2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	3304      	adds	r3, #4
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe fdea 	bl	8002c18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004048:	2b00      	cmp	r3, #0
 800404a:	d004      	beq.n	8004056 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	3318      	adds	r3, #24
 8004050:	4618      	mov	r0, r3
 8004052:	f7fe fde1 	bl	8002c18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	4618      	mov	r0, r3
 800405a:	f002 fcab 	bl	80069b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	4b25      	ldr	r3, [pc, #148]	; (80040f8 <xTaskIncrementTick+0x164>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	429a      	cmp	r2, r3
 8004068:	d903      	bls.n	8004072 <xTaskIncrementTick+0xde>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406e:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <xTaskIncrementTick+0x164>)
 8004070:	6013      	str	r3, [r2, #0]
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4a1f      	ldr	r2, [pc, #124]	; (80040fc <xTaskIncrementTick+0x168>)
 8004080:	441a      	add	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	3304      	adds	r3, #4
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f7fe fd68 	bl	8002b5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004092:	4b1b      	ldr	r3, [pc, #108]	; (8004100 <xTaskIncrementTick+0x16c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004098:	429a      	cmp	r2, r3
 800409a:	d3b4      	bcc.n	8004006 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800409c:	2301      	movs	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80040a0:	e7b1      	b.n	8004006 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80040a2:	4b17      	ldr	r3, [pc, #92]	; (8004100 <xTaskIncrementTick+0x16c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4914      	ldr	r1, [pc, #80]	; (80040fc <xTaskIncrementTick+0x168>)
 80040aa:	4613      	mov	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d907      	bls.n	80040ca <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80040ba:	2301      	movs	r3, #1
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	e004      	b.n	80040ca <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80040c0:	4b10      	ldr	r3, [pc, #64]	; (8004104 <xTaskIncrementTick+0x170>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3301      	adds	r3, #1
 80040c6:	4a0f      	ldr	r2, [pc, #60]	; (8004104 <xTaskIncrementTick+0x170>)
 80040c8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <xTaskIncrementTick+0x174>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80040d2:	2301      	movs	r3, #1
 80040d4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80040d6:	697b      	ldr	r3, [r7, #20]
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3718      	adds	r7, #24
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	20000bfc 	.word	0x20000bfc
 80040e4:	20000bd8 	.word	0x20000bd8
 80040e8:	20000b8c 	.word	0x20000b8c
 80040ec:	20000b90 	.word	0x20000b90
 80040f0:	20000bec 	.word	0x20000bec
 80040f4:	20000bf4 	.word	0x20000bf4
 80040f8:	20000bdc 	.word	0x20000bdc
 80040fc:	20000704 	.word	0x20000704
 8004100:	20000700 	.word	0x20000700
 8004104:	20000be4 	.word	0x20000be4
 8004108:	20000be8 	.word	0x20000be8

0800410c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004112:	4b3c      	ldr	r3, [pc, #240]	; (8004204 <vTaskSwitchContext+0xf8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800411a:	4b3b      	ldr	r3, [pc, #236]	; (8004208 <vTaskSwitchContext+0xfc>)
 800411c:	2201      	movs	r2, #1
 800411e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004120:	e06c      	b.n	80041fc <vTaskSwitchContext+0xf0>
		xYieldPending = pdFALSE;
 8004122:	4b39      	ldr	r3, [pc, #228]	; (8004208 <vTaskSwitchContext+0xfc>)
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004128:	f7fc fa23 	bl	8000572 <getRunTimeCounterValue>
 800412c:	4602      	mov	r2, r0
 800412e:	4b37      	ldr	r3, [pc, #220]	; (800420c <vTaskSwitchContext+0x100>)
 8004130:	601a      	str	r2, [r3, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004132:	4b36      	ldr	r3, [pc, #216]	; (800420c <vTaskSwitchContext+0x100>)
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	4b36      	ldr	r3, [pc, #216]	; (8004210 <vTaskSwitchContext+0x104>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d909      	bls.n	8004152 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800413e:	4b35      	ldr	r3, [pc, #212]	; (8004214 <vTaskSwitchContext+0x108>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004144:	4a31      	ldr	r2, [pc, #196]	; (800420c <vTaskSwitchContext+0x100>)
 8004146:	6810      	ldr	r0, [r2, #0]
 8004148:	4a31      	ldr	r2, [pc, #196]	; (8004210 <vTaskSwitchContext+0x104>)
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	1a82      	subs	r2, r0, r2
 800414e:	440a      	add	r2, r1
 8004150:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004152:	4b2e      	ldr	r3, [pc, #184]	; (800420c <vTaskSwitchContext+0x100>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2e      	ldr	r2, [pc, #184]	; (8004210 <vTaskSwitchContext+0x104>)
 8004158:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800415a:	4b2f      	ldr	r3, [pc, #188]	; (8004218 <vTaskSwitchContext+0x10c>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	e00f      	b.n	8004182 <vTaskSwitchContext+0x76>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d109      	bne.n	800417c <vTaskSwitchContext+0x70>
 8004168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	e7fe      	b.n	800417a <vTaskSwitchContext+0x6e>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3b01      	subs	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	4926      	ldr	r1, [pc, #152]	; (800421c <vTaskSwitchContext+0x110>)
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0e5      	beq.n	8004162 <vTaskSwitchContext+0x56>
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4a1e      	ldr	r2, [pc, #120]	; (800421c <vTaskSwitchContext+0x110>)
 80041a2:	4413      	add	r3, r2
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	3308      	adds	r3, #8
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d104      	bne.n	80041c6 <vTaskSwitchContext+0xba>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	605a      	str	r2, [r3, #4]
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a11      	ldr	r2, [pc, #68]	; (8004214 <vTaskSwitchContext+0x108>)
 80041ce:	6013      	str	r3, [r2, #0]
 80041d0:	4a11      	ldr	r2, [pc, #68]	; (8004218 <vTaskSwitchContext+0x10c>)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <vTaskSwitchContext+0x108>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3334      	adds	r3, #52	; 0x34
 80041dc:	2205      	movs	r2, #5
 80041de:	4910      	ldr	r1, [pc, #64]	; (8004220 <vTaskSwitchContext+0x114>)
 80041e0:	4618      	mov	r0, r3
 80041e2:	f002 fedb 	bl	8006f9c <memcmp>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d005      	beq.n	80041f8 <vTaskSwitchContext+0xec>
 80041ec:	4b09      	ldr	r3, [pc, #36]	; (8004214 <vTaskSwitchContext+0x108>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	f002 fb9d 	bl	8006930 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80041f6:	e001      	b.n	80041fc <vTaskSwitchContext+0xf0>
		traceTASK_SWITCHED_IN();
 80041f8:	f002 fb3c 	bl	8006874 <SEGGER_SYSVIEW_OnIdle>
}
 80041fc:	bf00      	nop
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000bfc 	.word	0x20000bfc
 8004208:	20000be8 	.word	0x20000be8
 800420c:	20000c04 	.word	0x20000c04
 8004210:	20000c00 	.word	0x20000c00
 8004214:	20000700 	.word	0x20000700
 8004218:	20000bdc 	.word	0x20000bdc
 800421c:	20000704 	.word	0x20000704
 8004220:	08007054 	.word	0x08007054

08004224 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <vTaskPlaceOnEventList+0x24>
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	e7fe      	b.n	8004246 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004248:	4b07      	ldr	r3, [pc, #28]	; (8004268 <vTaskPlaceOnEventList+0x44>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	3318      	adds	r3, #24
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fe fca8 	bl	8002ba6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004256:	2101      	movs	r1, #1
 8004258:	6838      	ldr	r0, [r7, #0]
 800425a:	f000 fab9 	bl	80047d0 <prvAddCurrentTaskToDelayedList>
}
 800425e:	bf00      	nop
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000700 	.word	0x20000700

0800426c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <vTaskPlaceOnEventListRestricted+0x26>
 800427e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004282:	f383 8811 	msr	BASEPRI, r3
 8004286:	f3bf 8f6f 	isb	sy
 800428a:	f3bf 8f4f 	dsb	sy
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e7fe      	b.n	8004290 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004292:	4b0c      	ldr	r3, [pc, #48]	; (80042c4 <vTaskPlaceOnEventListRestricted+0x58>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3318      	adds	r3, #24
 8004298:	4619      	mov	r1, r3
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7fe fc5f 	bl	8002b5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295
 80042aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80042ac:	2024      	movs	r0, #36	; 0x24
 80042ae:	f001 fe5f 	bl	8005f70 <SEGGER_SYSVIEW_RecordVoid>
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	68b8      	ldr	r0, [r7, #8]
 80042b6:	f000 fa8b 	bl	80047d0 <prvAddCurrentTaskToDelayedList>
	}
 80042ba:	bf00      	nop
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	20000700 	.word	0x20000700

080042c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d109      	bne.n	80042f2 <xTaskRemoveFromEventList+0x2a>
 80042de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e2:	f383 8811 	msr	BASEPRI, r3
 80042e6:	f3bf 8f6f 	isb	sy
 80042ea:	f3bf 8f4f 	dsb	sy
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	e7fe      	b.n	80042f0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3318      	adds	r3, #24
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe fc8e 	bl	8002c18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042fc:	4b1f      	ldr	r3, [pc, #124]	; (800437c <xTaskRemoveFromEventList+0xb4>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d121      	bne.n	8004348 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3304      	adds	r3, #4
 8004308:	4618      	mov	r0, r3
 800430a:	f7fe fc85 	bl	8002c18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	4618      	mov	r0, r3
 8004312:	f002 fb4f 	bl	80069b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800431a:	4b19      	ldr	r3, [pc, #100]	; (8004380 <xTaskRemoveFromEventList+0xb8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d903      	bls.n	800432a <xTaskRemoveFromEventList+0x62>
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004326:	4a16      	ldr	r2, [pc, #88]	; (8004380 <xTaskRemoveFromEventList+0xb8>)
 8004328:	6013      	str	r3, [r2, #0]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a13      	ldr	r2, [pc, #76]	; (8004384 <xTaskRemoveFromEventList+0xbc>)
 8004338:	441a      	add	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	3304      	adds	r3, #4
 800433e:	4619      	mov	r1, r3
 8004340:	4610      	mov	r0, r2
 8004342:	f7fe fc0c 	bl	8002b5e <vListInsertEnd>
 8004346:	e005      	b.n	8004354 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	3318      	adds	r3, #24
 800434c:	4619      	mov	r1, r3
 800434e:	480e      	ldr	r0, [pc, #56]	; (8004388 <xTaskRemoveFromEventList+0xc0>)
 8004350:	f7fe fc05 	bl	8002b5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <xTaskRemoveFromEventList+0xc4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435e:	429a      	cmp	r2, r3
 8004360:	d905      	bls.n	800436e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004362:	2301      	movs	r3, #1
 8004364:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <xTaskRemoveFromEventList+0xc8>)
 8004368:	2201      	movs	r2, #1
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	e001      	b.n	8004372 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004372:	697b      	ldr	r3, [r7, #20]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	20000bfc 	.word	0x20000bfc
 8004380:	20000bdc 	.word	0x20000bdc
 8004384:	20000704 	.word	0x20000704
 8004388:	20000b94 	.word	0x20000b94
 800438c:	20000700 	.word	0x20000700
 8004390:	20000be8 	.word	0x20000be8

08004394 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <vTaskInternalSetTimeOutState+0x24>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <vTaskInternalSetTimeOutState+0x28>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	605a      	str	r2, [r3, #4]
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	20000bec 	.word	0x20000bec
 80043bc:	20000bd8 	.word	0x20000bd8

080043c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <xTaskCheckForTimeOut+0x24>
 80043d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	613b      	str	r3, [r7, #16]
 80043e2:	e7fe      	b.n	80043e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <xTaskCheckForTimeOut+0x3e>
 80043ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ee:	f383 8811 	msr	BASEPRI, r3
 80043f2:	f3bf 8f6f 	isb	sy
 80043f6:	f3bf 8f4f 	dsb	sy
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	e7fe      	b.n	80043fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80043fe:	f000 fea5 	bl	800514c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004402:	4b1d      	ldr	r3, [pc, #116]	; (8004478 <xTaskCheckForTimeOut+0xb8>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d102      	bne.n	8004422 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800441c:	2300      	movs	r3, #0
 800441e:	61fb      	str	r3, [r7, #28]
 8004420:	e023      	b.n	800446a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	4b15      	ldr	r3, [pc, #84]	; (800447c <xTaskCheckForTimeOut+0xbc>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d007      	beq.n	800443e <xTaskCheckForTimeOut+0x7e>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	429a      	cmp	r2, r3
 8004436:	d302      	bcc.n	800443e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	e015      	b.n	800446a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	429a      	cmp	r2, r3
 8004446:	d20b      	bcs.n	8004460 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	1ad2      	subs	r2, r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f7ff ff9d 	bl	8004394 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
 800445e:	e004      	b.n	800446a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004466:	2301      	movs	r3, #1
 8004468:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800446a:	f000 fe9d 	bl	80051a8 <vPortExitCritical>

	return xReturn;
 800446e:	69fb      	ldr	r3, [r7, #28]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000bd8 	.word	0x20000bd8
 800447c:	20000bec 	.word	0x20000bec

08004480 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004480:	b480      	push	{r7}
 8004482:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <vTaskMissedYield+0x14>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]
}
 800448a:	bf00      	nop
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	20000be8 	.word	0x20000be8

08004498 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80044a0:	f000 f852 	bl	8004548 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80044a4:	4b06      	ldr	r3, [pc, #24]	; (80044c0 <prvIdleTask+0x28>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d9f9      	bls.n	80044a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80044ac:	4b05      	ldr	r3, [pc, #20]	; (80044c4 <prvIdleTask+0x2c>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80044bc:	e7f0      	b.n	80044a0 <prvIdleTask+0x8>
 80044be:	bf00      	nop
 80044c0:	20000704 	.word	0x20000704
 80044c4:	e000ed04 	.word	0xe000ed04

080044c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044ce:	2300      	movs	r3, #0
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	e00c      	b.n	80044ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4a12      	ldr	r2, [pc, #72]	; (8004528 <prvInitialiseTaskLists+0x60>)
 80044e0:	4413      	add	r3, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe fb0e 	bl	8002b04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3301      	adds	r3, #1
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b37      	cmp	r3, #55	; 0x37
 80044f2:	d9ef      	bls.n	80044d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80044f4:	480d      	ldr	r0, [pc, #52]	; (800452c <prvInitialiseTaskLists+0x64>)
 80044f6:	f7fe fb05 	bl	8002b04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80044fa:	480d      	ldr	r0, [pc, #52]	; (8004530 <prvInitialiseTaskLists+0x68>)
 80044fc:	f7fe fb02 	bl	8002b04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004500:	480c      	ldr	r0, [pc, #48]	; (8004534 <prvInitialiseTaskLists+0x6c>)
 8004502:	f7fe faff 	bl	8002b04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004506:	480c      	ldr	r0, [pc, #48]	; (8004538 <prvInitialiseTaskLists+0x70>)
 8004508:	f7fe fafc 	bl	8002b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800450c:	480b      	ldr	r0, [pc, #44]	; (800453c <prvInitialiseTaskLists+0x74>)
 800450e:	f7fe faf9 	bl	8002b04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004512:	4b0b      	ldr	r3, [pc, #44]	; (8004540 <prvInitialiseTaskLists+0x78>)
 8004514:	4a05      	ldr	r2, [pc, #20]	; (800452c <prvInitialiseTaskLists+0x64>)
 8004516:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <prvInitialiseTaskLists+0x7c>)
 800451a:	4a05      	ldr	r2, [pc, #20]	; (8004530 <prvInitialiseTaskLists+0x68>)
 800451c:	601a      	str	r2, [r3, #0]
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20000704 	.word	0x20000704
 800452c:	20000b64 	.word	0x20000b64
 8004530:	20000b78 	.word	0x20000b78
 8004534:	20000b94 	.word	0x20000b94
 8004538:	20000ba8 	.word	0x20000ba8
 800453c:	20000bc0 	.word	0x20000bc0
 8004540:	20000b8c 	.word	0x20000b8c
 8004544:	20000b90 	.word	0x20000b90

08004548 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800454e:	e019      	b.n	8004584 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004550:	f000 fdfc 	bl	800514c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004554:	4b0f      	ldr	r3, [pc, #60]	; (8004594 <prvCheckTasksWaitingTermination+0x4c>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe fb59 	bl	8002c18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <prvCheckTasksWaitingTermination+0x50>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3b01      	subs	r3, #1
 800456c:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <prvCheckTasksWaitingTermination+0x50>)
 800456e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004570:	4b0a      	ldr	r3, [pc, #40]	; (800459c <prvCheckTasksWaitingTermination+0x54>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3b01      	subs	r3, #1
 8004576:	4a09      	ldr	r2, [pc, #36]	; (800459c <prvCheckTasksWaitingTermination+0x54>)
 8004578:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800457a:	f000 fe15 	bl	80051a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f846 	bl	8004610 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <prvCheckTasksWaitingTermination+0x54>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e1      	bne.n	8004550 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800458c:	bf00      	nop
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	20000ba8 	.word	0x20000ba8
 8004598:	20000bd4 	.word	0x20000bd4
 800459c:	20000bbc 	.word	0x20000bbc

080045a0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80045ac:	e005      	b.n	80045ba <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	3301      	adds	r3, #1
 80045b2:	607b      	str	r3, [r7, #4]
			ulCount++;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2ba5      	cmp	r3, #165	; 0xa5
 80045c0:	d0f5      	beq.n	80045ae <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	b29b      	uxth	r3, r3
	}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <uxTaskGetStackHighWaterMark+0x14>
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <uxTaskGetStackHighWaterMark+0x34>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	e000      	b.n	80045ee <uxTaskGetStackHighWaterMark+0x16>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f4:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80045f6:	6938      	ldr	r0, [r7, #16]
 80045f8:	f7ff ffd2 	bl	80045a0 <prvTaskCheckFreeStackSpace>
 80045fc:	4603      	mov	r3, r0
 80045fe:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004600:	68fb      	ldr	r3, [r7, #12]
	}
 8004602:	4618      	mov	r0, r3
 8004604:	3718      	adds	r7, #24
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000700 	.word	0x20000700

08004610 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800461e:	2b00      	cmp	r3, #0
 8004620:	d108      	bne.n	8004634 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	4618      	mov	r0, r3
 8004628:	f000 ff6c 	bl	8005504 <vPortFree>
				vPortFree( pxTCB );
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 ff69 	bl	8005504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004632:	e017      	b.n	8004664 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800463a:	2b01      	cmp	r3, #1
 800463c:	d103      	bne.n	8004646 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 ff60 	bl	8005504 <vPortFree>
	}
 8004644:	e00e      	b.n	8004664 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800464c:	2b02      	cmp	r3, #2
 800464e:	d009      	beq.n	8004664 <prvDeleteTCB+0x54>
 8004650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004654:	f383 8811 	msr	BASEPRI, r3
 8004658:	f3bf 8f6f 	isb	sy
 800465c:	f3bf 8f4f 	dsb	sy
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e7fe      	b.n	8004662 <prvDeleteTCB+0x52>
	}
 8004664:	bf00      	nop
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <prvResetNextTaskUnblockTime+0x38>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d104      	bne.n	8004686 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800467c:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <prvResetNextTaskUnblockTime+0x3c>)
 800467e:	f04f 32ff 	mov.w	r2, #4294967295
 8004682:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004684:	e008      	b.n	8004698 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004686:	4b07      	ldr	r3, [pc, #28]	; (80046a4 <prvResetNextTaskUnblockTime+0x38>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <prvResetNextTaskUnblockTime+0x3c>)
 8004696:	6013      	str	r3, [r2, #0]
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	20000b8c 	.word	0x20000b8c
 80046a8:	20000bf4 	.word	0x20000bf4

080046ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <xTaskGetSchedulerState+0x34>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d102      	bne.n	80046c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80046ba:	2301      	movs	r3, #1
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	e008      	b.n	80046d2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80046c0:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <xTaskGetSchedulerState+0x38>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d102      	bne.n	80046ce <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80046c8:	2302      	movs	r3, #2
 80046ca:	607b      	str	r3, [r7, #4]
 80046cc:	e001      	b.n	80046d2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80046ce:	2300      	movs	r3, #0
 80046d0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80046d2:	687b      	ldr	r3, [r7, #4]
	}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	20000be0 	.word	0x20000be0
 80046e4:	20000bfc 	.word	0x20000bfc

080046e8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d05d      	beq.n	80047ba <xTaskPriorityDisinherit+0xd2>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046fe:	4b31      	ldr	r3, [pc, #196]	; (80047c4 <xTaskPriorityDisinherit+0xdc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	429a      	cmp	r2, r3
 8004706:	d009      	beq.n	800471c <xTaskPriorityDisinherit+0x34>
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	60fb      	str	r3, [r7, #12]
 800471a:	e7fe      	b.n	800471a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <xTaskPriorityDisinherit+0x50>
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	60bb      	str	r3, [r7, #8]
 8004736:	e7fe      	b.n	8004736 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473c:	1e5a      	subs	r2, r3, #1
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800474a:	429a      	cmp	r2, r3
 800474c:	d035      	beq.n	80047ba <xTaskPriorityDisinherit+0xd2>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004752:	2b00      	cmp	r3, #0
 8004754:	d131      	bne.n	80047ba <xTaskPriorityDisinherit+0xd2>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3304      	adds	r3, #4
 800475a:	4618      	mov	r0, r3
 800475c:	f7fe fa5c 	bl	8002c18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4619      	mov	r1, r3
 8004764:	204a      	movs	r0, #74	; 0x4a
 8004766:	f001 fc21 	bl	8005fac <SEGGER_SYSVIEW_RecordU32>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004776:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4618      	mov	r0, r3
 8004782:	f002 f917 	bl	80069b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478a:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <xTaskPriorityDisinherit+0xe0>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	429a      	cmp	r2, r3
 8004790:	d903      	bls.n	800479a <xTaskPriorityDisinherit+0xb2>
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004796:	4a0c      	ldr	r2, [pc, #48]	; (80047c8 <xTaskPriorityDisinherit+0xe0>)
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479e:	4613      	mov	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <xTaskPriorityDisinherit+0xe4>)
 80047a8:	441a      	add	r2, r3
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	3304      	adds	r3, #4
 80047ae:	4619      	mov	r1, r3
 80047b0:	4610      	mov	r0, r2
 80047b2:	f7fe f9d4 	bl	8002b5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80047b6:	2301      	movs	r3, #1
 80047b8:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80047ba:	697b      	ldr	r3, [r7, #20]
	}
 80047bc:	4618      	mov	r0, r3
 80047be:	3718      	adds	r7, #24
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}
 80047c4:	20000700 	.word	0x20000700
 80047c8:	20000bdc 	.word	0x20000bdc
 80047cc:	20000704 	.word	0x20000704

080047d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80047da:	4b21      	ldr	r3, [pc, #132]	; (8004860 <prvAddCurrentTaskToDelayedList+0x90>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047e0:	4b20      	ldr	r3, [pc, #128]	; (8004864 <prvAddCurrentTaskToDelayedList+0x94>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3304      	adds	r3, #4
 80047e6:	4618      	mov	r0, r3
 80047e8:	f7fe fa16 	bl	8002c18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f2:	d10a      	bne.n	800480a <prvAddCurrentTaskToDelayedList+0x3a>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80047fa:	4b1a      	ldr	r3, [pc, #104]	; (8004864 <prvAddCurrentTaskToDelayedList+0x94>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4819      	ldr	r0, [pc, #100]	; (8004868 <prvAddCurrentTaskToDelayedList+0x98>)
 8004804:	f7fe f9ab 	bl	8002b5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004808:	e026      	b.n	8004858 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4413      	add	r3, r2
 8004810:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <prvAddCurrentTaskToDelayedList+0x94>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	429a      	cmp	r2, r3
 8004820:	d209      	bcs.n	8004836 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004822:	4b12      	ldr	r3, [pc, #72]	; (800486c <prvAddCurrentTaskToDelayedList+0x9c>)
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b0f      	ldr	r3, [pc, #60]	; (8004864 <prvAddCurrentTaskToDelayedList+0x94>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3304      	adds	r3, #4
 800482c:	4619      	mov	r1, r3
 800482e:	4610      	mov	r0, r2
 8004830:	f7fe f9b9 	bl	8002ba6 <vListInsert>
}
 8004834:	e010      	b.n	8004858 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004836:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b0a      	ldr	r3, [pc, #40]	; (8004864 <prvAddCurrentTaskToDelayedList+0x94>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4610      	mov	r0, r2
 8004844:	f7fe f9af 	bl	8002ba6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004848:	4b0a      	ldr	r3, [pc, #40]	; (8004874 <prvAddCurrentTaskToDelayedList+0xa4>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	429a      	cmp	r2, r3
 8004850:	d202      	bcs.n	8004858 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004852:	4a08      	ldr	r2, [pc, #32]	; (8004874 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	6013      	str	r3, [r2, #0]
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}
 8004860:	20000bd8 	.word	0x20000bd8
 8004864:	20000700 	.word	0x20000700
 8004868:	20000bc0 	.word	0x20000bc0
 800486c:	20000b90 	.word	0x20000b90
 8004870:	20000b8c 	.word	0x20000b8c
 8004874:	20000bf4 	.word	0x20000bf4

08004878 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b08a      	sub	sp, #40	; 0x28
 800487c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800487e:	2300      	movs	r3, #0
 8004880:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004882:	f000 faff 	bl	8004e84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004886:	4b1c      	ldr	r3, [pc, #112]	; (80048f8 <xTimerCreateTimerTask+0x80>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d021      	beq.n	80048d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004896:	1d3a      	adds	r2, r7, #4
 8004898:	f107 0108 	add.w	r1, r7, #8
 800489c:	f107 030c 	add.w	r3, r7, #12
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe f915 	bl	8002ad0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80048a6:	6879      	ldr	r1, [r7, #4]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	9202      	str	r2, [sp, #8]
 80048ae:	9301      	str	r3, [sp, #4]
 80048b0:	2302      	movs	r3, #2
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	2300      	movs	r3, #0
 80048b6:	460a      	mov	r2, r1
 80048b8:	4910      	ldr	r1, [pc, #64]	; (80048fc <xTimerCreateTimerTask+0x84>)
 80048ba:	4811      	ldr	r0, [pc, #68]	; (8004900 <xTimerCreateTimerTask+0x88>)
 80048bc:	f7ff f828 	bl	8003910 <xTaskCreateStatic>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b10      	ldr	r3, [pc, #64]	; (8004904 <xTimerCreateTimerTask+0x8c>)
 80048c4:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80048c6:	4b0f      	ldr	r3, [pc, #60]	; (8004904 <xTimerCreateTimerTask+0x8c>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80048ce:	2301      	movs	r3, #1
 80048d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d109      	bne.n	80048ec <xTimerCreateTimerTask+0x74>
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	f383 8811 	msr	BASEPRI, r3
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	613b      	str	r3, [r7, #16]
 80048ea:	e7fe      	b.n	80048ea <xTimerCreateTimerTask+0x72>
	return xReturn;
 80048ec:	697b      	ldr	r3, [r7, #20]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000c38 	.word	0x20000c38
 80048fc:	08007084 	.word	0x08007084
 8004900:	08004a39 	.word	0x08004a39
 8004904:	20000c3c 	.word	0x20000c3c

08004908 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004916:	2300      	movs	r3, #0
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <xTimerGenericCommand+0x2c>
 8004920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004924:	f383 8811 	msr	BASEPRI, r3
 8004928:	f3bf 8f6f 	isb	sy
 800492c:	f3bf 8f4f 	dsb	sy
 8004930:	623b      	str	r3, [r7, #32]
 8004932:	e7fe      	b.n	8004932 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004934:	4b19      	ldr	r3, [pc, #100]	; (800499c <xTimerGenericCommand+0x94>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d02a      	beq.n	8004992 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b05      	cmp	r3, #5
 800494c:	dc18      	bgt.n	8004980 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800494e:	f7ff fead 	bl	80046ac <xTaskGetSchedulerState>
 8004952:	4603      	mov	r3, r0
 8004954:	2b02      	cmp	r3, #2
 8004956:	d109      	bne.n	800496c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004958:	4b10      	ldr	r3, [pc, #64]	; (800499c <xTimerGenericCommand+0x94>)
 800495a:	6818      	ldr	r0, [r3, #0]
 800495c:	f107 0110 	add.w	r1, r7, #16
 8004960:	2300      	movs	r3, #0
 8004962:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004964:	f7fe fb2c 	bl	8002fc0 <xQueueGenericSend>
 8004968:	6278      	str	r0, [r7, #36]	; 0x24
 800496a:	e012      	b.n	8004992 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <xTimerGenericCommand+0x94>)
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	f107 0110 	add.w	r1, r7, #16
 8004974:	2300      	movs	r3, #0
 8004976:	2200      	movs	r2, #0
 8004978:	f7fe fb22 	bl	8002fc0 <xQueueGenericSend>
 800497c:	6278      	str	r0, [r7, #36]	; 0x24
 800497e:	e008      	b.n	8004992 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004980:	4b06      	ldr	r3, [pc, #24]	; (800499c <xTimerGenericCommand+0x94>)
 8004982:	6818      	ldr	r0, [r3, #0]
 8004984:	f107 0110 	add.w	r1, r7, #16
 8004988:	2300      	movs	r3, #0
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	f7fe fc3a 	bl	8003204 <xQueueGenericSendFromISR>
 8004990:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004994:	4618      	mov	r0, r3
 8004996:	3728      	adds	r7, #40	; 0x28
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000c38 	.word	0x20000c38

080049a0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b088      	sub	sp, #32
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	6078      	str	r0, [r7, #4]
 80049a8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049aa:	4b22      	ldr	r3, [pc, #136]	; (8004a34 <prvProcessExpiredTimer+0x94>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	3304      	adds	r3, #4
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe f92d 	bl	8002c18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d021      	beq.n	8004a10 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	699a      	ldr	r2, [r3, #24]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	18d1      	adds	r1, r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	6978      	ldr	r0, [r7, #20]
 80049da:	f000 f8d1 	bl	8004b80 <prvInsertTimerInActiveList>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d01e      	beq.n	8004a22 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049e4:	2300      	movs	r3, #0
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	2300      	movs	r3, #0
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	2100      	movs	r1, #0
 80049ee:	6978      	ldr	r0, [r7, #20]
 80049f0:	f7ff ff8a 	bl	8004908 <xTimerGenericCommand>
 80049f4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d112      	bne.n	8004a22 <prvProcessExpiredTimer+0x82>
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	60fb      	str	r3, [r7, #12]
 8004a0e:	e7fe      	b.n	8004a0e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	b2da      	uxtb	r2, r3
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	6978      	ldr	r0, [r7, #20]
 8004a28:	4798      	blx	r3
}
 8004a2a:	bf00      	nop
 8004a2c:	3718      	adds	r7, #24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	20000c30 	.word	0x20000c30

08004a38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a40:	f107 0308 	add.w	r3, r7, #8
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 f857 	bl	8004af8 <prvGetNextExpireTime>
 8004a4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4619      	mov	r1, r3
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f803 	bl	8004a5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a56:	f000 f8d5 	bl	8004c04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a5a:	e7f1      	b.n	8004a40 <prvTimerTask+0x8>

08004a5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a66:	f7ff f9c5 	bl	8003df4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a6a:	f107 0308 	add.w	r3, r7, #8
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f000 f866 	bl	8004b40 <prvSampleTimeNow>
 8004a74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d130      	bne.n	8004ade <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10a      	bne.n	8004a98 <prvProcessTimerOrBlockTask+0x3c>
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d806      	bhi.n	8004a98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004a8a:	f7ff f9c1 	bl	8003e10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004a8e:	68f9      	ldr	r1, [r7, #12]
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff ff85 	bl	80049a0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004a96:	e024      	b.n	8004ae2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d008      	beq.n	8004ab0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004a9e:	4b13      	ldr	r3, [pc, #76]	; (8004aec <prvProcessTimerOrBlockTask+0x90>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d101      	bne.n	8004aac <prvProcessTimerOrBlockTask+0x50>
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e000      	b.n	8004aae <prvProcessTimerOrBlockTask+0x52>
 8004aac:	2300      	movs	r3, #0
 8004aae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ab0:	4b0f      	ldr	r3, [pc, #60]	; (8004af0 <prvProcessTimerOrBlockTask+0x94>)
 8004ab2:	6818      	ldr	r0, [r3, #0]
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	4619      	mov	r1, r3
 8004abe:	f7fe fef3 	bl	80038a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ac2:	f7ff f9a5 	bl	8003e10 <xTaskResumeAll>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d10a      	bne.n	8004ae2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004acc:	4b09      	ldr	r3, [pc, #36]	; (8004af4 <prvProcessTimerOrBlockTask+0x98>)
 8004ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	f3bf 8f6f 	isb	sy
}
 8004adc:	e001      	b.n	8004ae2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004ade:	f7ff f997 	bl	8003e10 <xTaskResumeAll>
}
 8004ae2:	bf00      	nop
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	20000c34 	.word	0x20000c34
 8004af0:	20000c38 	.word	0x20000c38
 8004af4:	e000ed04 	.word	0xe000ed04

08004af8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b00:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <prvGetNextExpireTime+0x44>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <prvGetNextExpireTime+0x16>
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	e000      	b.n	8004b10 <prvGetNextExpireTime+0x18>
 8004b0e:	2200      	movs	r2, #0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d105      	bne.n	8004b28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b1c:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <prvGetNextExpireTime+0x44>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e001      	b.n	8004b2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	20000c30 	.word	0x20000c30

08004b40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b48:	f7ff fa02 	bl	8003f50 <xTaskGetTickCount>
 8004b4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b4e:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <prvSampleTimeNow+0x3c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d205      	bcs.n	8004b64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b58:	f000 f930 	bl	8004dbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e002      	b.n	8004b6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b6a:	4a04      	ldr	r2, [pc, #16]	; (8004b7c <prvSampleTimeNow+0x3c>)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004b70:	68fb      	ldr	r3, [r7, #12]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000c40 	.word	0x20000c40

08004b80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d812      	bhi.n	8004bcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	1ad2      	subs	r2, r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d302      	bcc.n	8004bba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	e01b      	b.n	8004bf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bba:	4b10      	ldr	r3, [pc, #64]	; (8004bfc <prvInsertTimerInActiveList+0x7c>)
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3304      	adds	r3, #4
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	f7fd ffee 	bl	8002ba6 <vListInsert>
 8004bca:	e012      	b.n	8004bf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d206      	bcs.n	8004be2 <prvInsertTimerInActiveList+0x62>
 8004bd4:	68ba      	ldr	r2, [r7, #8]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d302      	bcc.n	8004be2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	e007      	b.n	8004bf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <prvInsertTimerInActiveList+0x80>)
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3304      	adds	r3, #4
 8004bea:	4619      	mov	r1, r3
 8004bec:	4610      	mov	r0, r2
 8004bee:	f7fd ffda 	bl	8002ba6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004bf2:	697b      	ldr	r3, [r7, #20]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000c34 	.word	0x20000c34
 8004c00:	20000c30 	.word	0x20000c30

08004c04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b08e      	sub	sp, #56	; 0x38
 8004c08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c0a:	e0c6      	b.n	8004d9a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	da17      	bge.n	8004c42 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004c12:	1d3b      	adds	r3, r7, #4
 8004c14:	3304      	adds	r3, #4
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d109      	bne.n	8004c32 <prvProcessReceivedCommands+0x2e>
 8004c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c22:	f383 8811 	msr	BASEPRI, r3
 8004c26:	f3bf 8f6f 	isb	sy
 8004c2a:	f3bf 8f4f 	dsb	sy
 8004c2e:	61fb      	str	r3, [r7, #28]
 8004c30:	e7fe      	b.n	8004c30 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c38:	6850      	ldr	r0, [r2, #4]
 8004c3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c3c:	6892      	ldr	r2, [r2, #8]
 8004c3e:	4611      	mov	r1, r2
 8004c40:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f2c0 80a7 	blt.w	8004d98 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d004      	beq.n	8004c60 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	3304      	adds	r3, #4
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fd ffdc 	bl	8002c18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c60:	463b      	mov	r3, r7
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7ff ff6c 	bl	8004b40 <prvSampleTimeNow>
 8004c68:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b09      	cmp	r3, #9
 8004c6e:	f200 8094 	bhi.w	8004d9a <prvProcessReceivedCommands+0x196>
 8004c72:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <prvProcessReceivedCommands+0x74>)
 8004c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c78:	08004ca1 	.word	0x08004ca1
 8004c7c:	08004ca1 	.word	0x08004ca1
 8004c80:	08004ca1 	.word	0x08004ca1
 8004c84:	08004d13 	.word	0x08004d13
 8004c88:	08004d27 	.word	0x08004d27
 8004c8c:	08004d6f 	.word	0x08004d6f
 8004c90:	08004ca1 	.word	0x08004ca1
 8004c94:	08004ca1 	.word	0x08004ca1
 8004c98:	08004d13 	.word	0x08004d13
 8004c9c:	08004d27 	.word	0x08004d27
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ca2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ca6:	f043 0301 	orr.w	r3, r3, #1
 8004caa:	b2da      	uxtb	r2, r3
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb6:	699b      	ldr	r3, [r3, #24]
 8004cb8:	18d1      	adds	r1, r2, r3
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc0:	f7ff ff5e 	bl	8004b80 <prvInsertTimerInActiveList>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d067      	beq.n	8004d9a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cd0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d05c      	beq.n	8004d9a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	441a      	add	r2, r3
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	2300      	movs	r3, #0
 8004cee:	2100      	movs	r1, #0
 8004cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf2:	f7ff fe09 	bl	8004908 <xTimerGenericCommand>
 8004cf6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d14d      	bne.n	8004d9a <prvProcessReceivedCommands+0x196>
 8004cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d02:	f383 8811 	msr	BASEPRI, r3
 8004d06:	f3bf 8f6f 	isb	sy
 8004d0a:	f3bf 8f4f 	dsb	sy
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e7fe      	b.n	8004d10 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d18:	f023 0301 	bic.w	r3, r3, #1
 8004d1c:	b2da      	uxtb	r2, r3
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004d24:	e039      	b.n	8004d9a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <prvProcessReceivedCommands+0x156>
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	e7fe      	b.n	8004d58 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	699a      	ldr	r2, [r3, #24]
 8004d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d60:	18d1      	adds	r1, r2, r3
 8004d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d68:	f7ff ff0a 	bl	8004b80 <prvInsertTimerInActiveList>
					break;
 8004d6c:	e015      	b.n	8004d9a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d103      	bne.n	8004d84 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004d7e:	f000 fbc1 	bl	8005504 <vPortFree>
 8004d82:	e00a      	b.n	8004d9a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	b2da      	uxtb	r2, r3
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d96:	e000      	b.n	8004d9a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004d98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d9a:	4b07      	ldr	r3, [pc, #28]	; (8004db8 <prvProcessReceivedCommands+0x1b4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	1d39      	adds	r1, r7, #4
 8004da0:	2200      	movs	r2, #0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fe fad6 	bl	8003354 <xQueueReceive>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	f47f af2e 	bne.w	8004c0c <prvProcessReceivedCommands+0x8>
	}
}
 8004db0:	bf00      	nop
 8004db2:	3730      	adds	r7, #48	; 0x30
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	20000c38 	.word	0x20000c38

08004dbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004dc2:	e047      	b.n	8004e54 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <prvSwitchTimerLists+0xc0>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dce:	4b2b      	ldr	r3, [pc, #172]	; (8004e7c <prvSwitchTimerLists+0xc0>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fd ff1b 	bl	8002c18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d02d      	beq.n	8004e54 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	699b      	ldr	r3, [r3, #24]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	4413      	add	r3, r2
 8004e00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d90e      	bls.n	8004e28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e16:	4b19      	ldr	r3, [pc, #100]	; (8004e7c <prvSwitchTimerLists+0xc0>)
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3304      	adds	r3, #4
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4610      	mov	r0, r2
 8004e22:	f7fd fec0 	bl	8002ba6 <vListInsert>
 8004e26:	e015      	b.n	8004e54 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	2100      	movs	r1, #0
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f7ff fd68 	bl	8004908 <xTimerGenericCommand>
 8004e38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d109      	bne.n	8004e54 <prvSwitchTimerLists+0x98>
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	603b      	str	r3, [r7, #0]
 8004e52:	e7fe      	b.n	8004e52 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <prvSwitchTimerLists+0xc0>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1b2      	bne.n	8004dc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e5e:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <prvSwitchTimerLists+0xc0>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <prvSwitchTimerLists+0xc4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a04      	ldr	r2, [pc, #16]	; (8004e7c <prvSwitchTimerLists+0xc0>)
 8004e6a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e6c:	4a04      	ldr	r2, [pc, #16]	; (8004e80 <prvSwitchTimerLists+0xc4>)
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	6013      	str	r3, [r2, #0]
}
 8004e72:	bf00      	nop
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000c30 	.word	0x20000c30
 8004e80:	20000c34 	.word	0x20000c34

08004e84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e8a:	f000 f95f 	bl	800514c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e8e:	4b15      	ldr	r3, [pc, #84]	; (8004ee4 <prvCheckForValidListAndQueue+0x60>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d120      	bne.n	8004ed8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e96:	4814      	ldr	r0, [pc, #80]	; (8004ee8 <prvCheckForValidListAndQueue+0x64>)
 8004e98:	f7fd fe34 	bl	8002b04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e9c:	4813      	ldr	r0, [pc, #76]	; (8004eec <prvCheckForValidListAndQueue+0x68>)
 8004e9e:	f7fd fe31 	bl	8002b04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ea2:	4b13      	ldr	r3, [pc, #76]	; (8004ef0 <prvCheckForValidListAndQueue+0x6c>)
 8004ea4:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <prvCheckForValidListAndQueue+0x64>)
 8004ea6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ea8:	4b12      	ldr	r3, [pc, #72]	; (8004ef4 <prvCheckForValidListAndQueue+0x70>)
 8004eaa:	4a10      	ldr	r2, [pc, #64]	; (8004eec <prvCheckForValidListAndQueue+0x68>)
 8004eac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004eae:	2300      	movs	r3, #0
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <prvCheckForValidListAndQueue+0x74>)
 8004eb4:	4a11      	ldr	r2, [pc, #68]	; (8004efc <prvCheckForValidListAndQueue+0x78>)
 8004eb6:	2110      	movs	r1, #16
 8004eb8:	200a      	movs	r0, #10
 8004eba:	f7fd ff3f 	bl	8002d3c <xQueueGenericCreateStatic>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <prvCheckForValidListAndQueue+0x60>)
 8004ec2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <prvCheckForValidListAndQueue+0x60>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ecc:	4b05      	ldr	r3, [pc, #20]	; (8004ee4 <prvCheckForValidListAndQueue+0x60>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	490b      	ldr	r1, [pc, #44]	; (8004f00 <prvCheckForValidListAndQueue+0x7c>)
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe fc8e 	bl	80037f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ed8:	f000 f966 	bl	80051a8 <vPortExitCritical>
}
 8004edc:	bf00      	nop
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	20000c38 	.word	0x20000c38
 8004ee8:	20000c08 	.word	0x20000c08
 8004eec:	20000c1c 	.word	0x20000c1c
 8004ef0:	20000c30 	.word	0x20000c30
 8004ef4:	20000c34 	.word	0x20000c34
 8004ef8:	20000ce4 	.word	0x20000ce4
 8004efc:	20000c44 	.word	0x20000c44
 8004f00:	0800708c 	.word	0x0800708c

08004f04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b04      	subs	r3, #4
 8004f14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3b04      	subs	r3, #4
 8004f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3b04      	subs	r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f34:	4a0c      	ldr	r2, [pc, #48]	; (8004f68 <pxPortInitialiseStack+0x64>)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3b14      	subs	r3, #20
 8004f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b04      	subs	r3, #4
 8004f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f06f 0202 	mvn.w	r2, #2
 8004f52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	3b20      	subs	r3, #32
 8004f58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3714      	adds	r7, #20
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr
 8004f68:	08004f6d 	.word	0x08004f6d

08004f6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f76:	4b11      	ldr	r3, [pc, #68]	; (8004fbc <prvTaskExitError+0x50>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d009      	beq.n	8004f94 <prvTaskExitError+0x28>
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e7fe      	b.n	8004f92 <prvTaskExitError+0x26>
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004fa6:	bf00      	nop
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d0fc      	beq.n	8004fa8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fae:	bf00      	nop
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	2000001c 	.word	0x2000001c

08004fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <pxCurrentTCBConst2>)
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	6808      	ldr	r0, [r1, #0]
 8004fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fca:	f380 8809 	msr	PSP, r0
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8811 	msr	BASEPRI, r0
 8004fda:	4770      	bx	lr
 8004fdc:	f3af 8000 	nop.w

08004fe0 <pxCurrentTCBConst2>:
 8004fe0:	20000700 	.word	0x20000700
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fe8:	4808      	ldr	r0, [pc, #32]	; (800500c <prvPortStartFirstTask+0x24>)
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	6800      	ldr	r0, [r0, #0]
 8004fee:	f380 8808 	msr	MSP, r0
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f380 8814 	msr	CONTROL, r0
 8004ffa:	b662      	cpsie	i
 8004ffc:	b661      	cpsie	f
 8004ffe:	f3bf 8f4f 	dsb	sy
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	df00      	svc	0
 8005008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800500a:	bf00      	nop
 800500c:	e000ed08 	.word	0xe000ed08

08005010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005016:	4b44      	ldr	r3, [pc, #272]	; (8005128 <xPortStartScheduler+0x118>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a44      	ldr	r2, [pc, #272]	; (800512c <xPortStartScheduler+0x11c>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d109      	bne.n	8005034 <xPortStartScheduler+0x24>
 8005020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005024:	f383 8811 	msr	BASEPRI, r3
 8005028:	f3bf 8f6f 	isb	sy
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	e7fe      	b.n	8005032 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005034:	4b3c      	ldr	r3, [pc, #240]	; (8005128 <xPortStartScheduler+0x118>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a3d      	ldr	r2, [pc, #244]	; (8005130 <xPortStartScheduler+0x120>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d109      	bne.n	8005052 <xPortStartScheduler+0x42>
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	60fb      	str	r3, [r7, #12]
 8005050:	e7fe      	b.n	8005050 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005052:	4b38      	ldr	r3, [pc, #224]	; (8005134 <xPortStartScheduler+0x124>)
 8005054:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	b2db      	uxtb	r3, r3
 800505c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	22ff      	movs	r2, #255	; 0xff
 8005062:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b2db      	uxtb	r3, r3
 800506a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800506c:	78fb      	ldrb	r3, [r7, #3]
 800506e:	b2db      	uxtb	r3, r3
 8005070:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005074:	b2da      	uxtb	r2, r3
 8005076:	4b30      	ldr	r3, [pc, #192]	; (8005138 <xPortStartScheduler+0x128>)
 8005078:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800507a:	4b30      	ldr	r3, [pc, #192]	; (800513c <xPortStartScheduler+0x12c>)
 800507c:	2207      	movs	r2, #7
 800507e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005080:	e009      	b.n	8005096 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005082:	4b2e      	ldr	r3, [pc, #184]	; (800513c <xPortStartScheduler+0x12c>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3b01      	subs	r3, #1
 8005088:	4a2c      	ldr	r2, [pc, #176]	; (800513c <xPortStartScheduler+0x12c>)
 800508a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800508c:	78fb      	ldrb	r3, [r7, #3]
 800508e:	b2db      	uxtb	r3, r3
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	b2db      	uxtb	r3, r3
 800509a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509e:	2b80      	cmp	r3, #128	; 0x80
 80050a0:	d0ef      	beq.n	8005082 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80050a2:	4b26      	ldr	r3, [pc, #152]	; (800513c <xPortStartScheduler+0x12c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f1c3 0307 	rsb	r3, r3, #7
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d009      	beq.n	80050c2 <xPortStartScheduler+0xb2>
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	e7fe      	b.n	80050c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050c2:	4b1e      	ldr	r3, [pc, #120]	; (800513c <xPortStartScheduler+0x12c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	4a1c      	ldr	r2, [pc, #112]	; (800513c <xPortStartScheduler+0x12c>)
 80050ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050cc:	4b1b      	ldr	r3, [pc, #108]	; (800513c <xPortStartScheduler+0x12c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80050d4:	4a19      	ldr	r2, [pc, #100]	; (800513c <xPortStartScheduler+0x12c>)
 80050d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	b2da      	uxtb	r2, r3
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050e0:	4b17      	ldr	r3, [pc, #92]	; (8005140 <xPortStartScheduler+0x130>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a16      	ldr	r2, [pc, #88]	; (8005140 <xPortStartScheduler+0x130>)
 80050e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050ec:	4b14      	ldr	r3, [pc, #80]	; (8005140 <xPortStartScheduler+0x130>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a13      	ldr	r2, [pc, #76]	; (8005140 <xPortStartScheduler+0x130>)
 80050f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80050f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050f8:	f000 f8d6 	bl	80052a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050fc:	4b11      	ldr	r3, [pc, #68]	; (8005144 <xPortStartScheduler+0x134>)
 80050fe:	2200      	movs	r2, #0
 8005100:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005102:	f000 f8f5 	bl	80052f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005106:	4b10      	ldr	r3, [pc, #64]	; (8005148 <xPortStartScheduler+0x138>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a0f      	ldr	r2, [pc, #60]	; (8005148 <xPortStartScheduler+0x138>)
 800510c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005110:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005112:	f7ff ff69 	bl	8004fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005116:	f7fe fff9 	bl	800410c <vTaskSwitchContext>
	prvTaskExitError();
 800511a:	f7ff ff27 	bl	8004f6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	e000ed00 	.word	0xe000ed00
 800512c:	410fc271 	.word	0x410fc271
 8005130:	410fc270 	.word	0x410fc270
 8005134:	e000e400 	.word	0xe000e400
 8005138:	20000d34 	.word	0x20000d34
 800513c:	20000d38 	.word	0x20000d38
 8005140:	e000ed20 	.word	0xe000ed20
 8005144:	2000001c 	.word	0x2000001c
 8005148:	e000ef34 	.word	0xe000ef34

0800514c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005164:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <vPortEnterCritical+0x54>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3301      	adds	r3, #1
 800516a:	4a0d      	ldr	r2, [pc, #52]	; (80051a0 <vPortEnterCritical+0x54>)
 800516c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800516e:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <vPortEnterCritical+0x54>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d10e      	bne.n	8005194 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <vPortEnterCritical+0x58>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d009      	beq.n	8005194 <vPortEnterCritical+0x48>
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	603b      	str	r3, [r7, #0]
 8005192:	e7fe      	b.n	8005192 <vPortEnterCritical+0x46>
	}
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	2000001c 	.word	0x2000001c
 80051a4:	e000ed04 	.word	0xe000ed04

080051a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051ae:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <vPortExitCritical+0x4c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d109      	bne.n	80051ca <vPortExitCritical+0x22>
 80051b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	607b      	str	r3, [r7, #4]
 80051c8:	e7fe      	b.n	80051c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80051ca:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <vPortExitCritical+0x4c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	4a08      	ldr	r2, [pc, #32]	; (80051f4 <vPortExitCritical+0x4c>)
 80051d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051d4:	4b07      	ldr	r3, [pc, #28]	; (80051f4 <vPortExitCritical+0x4c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <vPortExitCritical+0x3e>
 80051dc:	2300      	movs	r3, #0
 80051de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80051e6:	bf00      	nop
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	2000001c 	.word	0x2000001c
	...

08005200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005200:	f3ef 8009 	mrs	r0, PSP
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <pxCurrentTCBConst>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	f01e 0f10 	tst.w	lr, #16
 8005210:	bf08      	it	eq
 8005212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521a:	6010      	str	r0, [r2, #0]
 800521c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005224:	f380 8811 	msr	BASEPRI, r0
 8005228:	f3bf 8f4f 	dsb	sy
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f7fe ff6c 	bl	800410c <vTaskSwitchContext>
 8005234:	f04f 0000 	mov.w	r0, #0
 8005238:	f380 8811 	msr	BASEPRI, r0
 800523c:	bc09      	pop	{r0, r3}
 800523e:	6819      	ldr	r1, [r3, #0]
 8005240:	6808      	ldr	r0, [r1, #0]
 8005242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005246:	f01e 0f10 	tst.w	lr, #16
 800524a:	bf08      	it	eq
 800524c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005250:	f380 8809 	msr	PSP, r0
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	f3af 8000 	nop.w

08005260 <pxCurrentTCBConst>:
 8005260:	20000700 	.word	0x20000700
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop

08005268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	__asm volatile
 800526e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005272:	f383 8811 	msr	BASEPRI, r3
 8005276:	f3bf 8f6f 	isb	sy
 800527a:	f3bf 8f4f 	dsb	sy
 800527e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005280:	f7fe fe88 	bl	8003f94 <xTaskIncrementTick>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800528a:	4b06      	ldr	r3, [pc, #24]	; (80052a4 <SysTick_Handler+0x3c>)
 800528c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	2300      	movs	r3, #0
 8005294:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800529c:	bf00      	nop
 800529e:	3708      	adds	r7, #8
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	e000ed04 	.word	0xe000ed04

080052a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052ac:	4b0b      	ldr	r3, [pc, #44]	; (80052dc <vPortSetupTimerInterrupt+0x34>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052b2:	4b0b      	ldr	r3, [pc, #44]	; (80052e0 <vPortSetupTimerInterrupt+0x38>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052b8:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <vPortSetupTimerInterrupt+0x3c>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <vPortSetupTimerInterrupt+0x40>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	099b      	lsrs	r3, r3, #6
 80052c4:	4a09      	ldr	r2, [pc, #36]	; (80052ec <vPortSetupTimerInterrupt+0x44>)
 80052c6:	3b01      	subs	r3, #1
 80052c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052ca:	4b04      	ldr	r3, [pc, #16]	; (80052dc <vPortSetupTimerInterrupt+0x34>)
 80052cc:	2207      	movs	r2, #7
 80052ce:	601a      	str	r2, [r3, #0]
}
 80052d0:	bf00      	nop
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	e000e010 	.word	0xe000e010
 80052e0:	e000e018 	.word	0xe000e018
 80052e4:	20000010 	.word	0x20000010
 80052e8:	10624dd3 	.word	0x10624dd3
 80052ec:	e000e014 	.word	0xe000e014

080052f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005300 <vPortEnableVFP+0x10>
 80052f4:	6801      	ldr	r1, [r0, #0]
 80052f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80052fa:	6001      	str	r1, [r0, #0]
 80052fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052fe:	bf00      	nop
 8005300:	e000ed88 	.word	0xe000ed88

08005304 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800530a:	f3ef 8305 	mrs	r3, IPSR
 800530e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2b0f      	cmp	r3, #15
 8005314:	d913      	bls.n	800533e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005316:	4a16      	ldr	r2, [pc, #88]	; (8005370 <vPortValidateInterruptPriority+0x6c>)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4413      	add	r3, r2
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005320:	4b14      	ldr	r3, [pc, #80]	; (8005374 <vPortValidateInterruptPriority+0x70>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	7afa      	ldrb	r2, [r7, #11]
 8005326:	429a      	cmp	r2, r3
 8005328:	d209      	bcs.n	800533e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	607b      	str	r3, [r7, #4]
 800533c:	e7fe      	b.n	800533c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800533e:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <vPortValidateInterruptPriority+0x74>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005346:	4b0d      	ldr	r3, [pc, #52]	; (800537c <vPortValidateInterruptPriority+0x78>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d909      	bls.n	8005362 <vPortValidateInterruptPriority+0x5e>
 800534e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	603b      	str	r3, [r7, #0]
 8005360:	e7fe      	b.n	8005360 <vPortValidateInterruptPriority+0x5c>
	}
 8005362:	bf00      	nop
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	e000e3f0 	.word	0xe000e3f0
 8005374:	20000d34 	.word	0x20000d34
 8005378:	e000ed0c 	.word	0xe000ed0c
 800537c:	20000d38 	.word	0x20000d38

08005380 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800538c:	f7fe fd32 	bl	8003df4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005390:	4b57      	ldr	r3, [pc, #348]	; (80054f0 <pvPortMalloc+0x170>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d101      	bne.n	800539c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005398:	f000 f90c 	bl	80055b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800539c:	4b55      	ldr	r3, [pc, #340]	; (80054f4 <pvPortMalloc+0x174>)
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4013      	ands	r3, r2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f040 808c 	bne.w	80054c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d01c      	beq.n	80053ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80053b0:	2208      	movs	r2, #8
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4413      	add	r3, r2
 80053b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f003 0307 	and.w	r3, r3, #7
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d013      	beq.n	80053ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f023 0307 	bic.w	r3, r3, #7
 80053c8:	3308      	adds	r3, #8
 80053ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d009      	beq.n	80053ea <pvPortMalloc+0x6a>
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e7fe      	b.n	80053e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d068      	beq.n	80054c2 <pvPortMalloc+0x142>
 80053f0:	4b41      	ldr	r3, [pc, #260]	; (80054f8 <pvPortMalloc+0x178>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d863      	bhi.n	80054c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053fa:	4b40      	ldr	r3, [pc, #256]	; (80054fc <pvPortMalloc+0x17c>)
 80053fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80053fe:	4b3f      	ldr	r3, [pc, #252]	; (80054fc <pvPortMalloc+0x17c>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005404:	e004      	b.n	8005410 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d903      	bls.n	8005422 <pvPortMalloc+0xa2>
 800541a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d1f1      	bne.n	8005406 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005422:	4b33      	ldr	r3, [pc, #204]	; (80054f0 <pvPortMalloc+0x170>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005428:	429a      	cmp	r2, r3
 800542a:	d04a      	beq.n	80054c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	2208      	movs	r2, #8
 8005432:	4413      	add	r3, r2
 8005434:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	6a3b      	ldr	r3, [r7, #32]
 800543c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800543e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	1ad2      	subs	r2, r2, r3
 8005446:	2308      	movs	r3, #8
 8005448:	005b      	lsls	r3, r3, #1
 800544a:	429a      	cmp	r2, r3
 800544c:	d91e      	bls.n	800548c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800544e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <pvPortMalloc+0xf4>
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	e7fe      	b.n	8005472 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	685a      	ldr	r2, [r3, #4]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	1ad2      	subs	r2, r2, r3
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005486:	69b8      	ldr	r0, [r7, #24]
 8005488:	f000 f8f6 	bl	8005678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800548c:	4b1a      	ldr	r3, [pc, #104]	; (80054f8 <pvPortMalloc+0x178>)
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	4a18      	ldr	r2, [pc, #96]	; (80054f8 <pvPortMalloc+0x178>)
 8005498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800549a:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <pvPortMalloc+0x178>)
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b18      	ldr	r3, [pc, #96]	; (8005500 <pvPortMalloc+0x180>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d203      	bcs.n	80054ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054a6:	4b14      	ldr	r3, [pc, #80]	; (80054f8 <pvPortMalloc+0x178>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a15      	ldr	r2, [pc, #84]	; (8005500 <pvPortMalloc+0x180>)
 80054ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	4b10      	ldr	r3, [pc, #64]	; (80054f4 <pvPortMalloc+0x174>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	431a      	orrs	r2, r3
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80054c2:	f7fe fca5 	bl	8003e10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d009      	beq.n	80054e4 <pvPortMalloc+0x164>
 80054d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	e7fe      	b.n	80054e2 <pvPortMalloc+0x162>
	return pvReturn;
 80054e4:	69fb      	ldr	r3, [r7, #28]
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3728      	adds	r7, #40	; 0x28
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	20004944 	.word	0x20004944
 80054f4:	20004950 	.word	0x20004950
 80054f8:	20004948 	.word	0x20004948
 80054fc:	2000493c 	.word	0x2000493c
 8005500:	2000494c 	.word	0x2000494c

08005504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d046      	beq.n	80055a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005516:	2308      	movs	r3, #8
 8005518:	425b      	negs	r3, r3
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4413      	add	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	4b20      	ldr	r3, [pc, #128]	; (80055ac <vPortFree+0xa8>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4013      	ands	r3, r2
 800552e:	2b00      	cmp	r3, #0
 8005530:	d109      	bne.n	8005546 <vPortFree+0x42>
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	e7fe      	b.n	8005544 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d009      	beq.n	8005562 <vPortFree+0x5e>
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	60bb      	str	r3, [r7, #8]
 8005560:	e7fe      	b.n	8005560 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	4b11      	ldr	r3, [pc, #68]	; (80055ac <vPortFree+0xa8>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d019      	beq.n	80055a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d115      	bne.n	80055a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <vPortFree+0xa8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	43db      	mvns	r3, r3
 8005582:	401a      	ands	r2, r3
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005588:	f7fe fc34 	bl	8003df4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	4b07      	ldr	r3, [pc, #28]	; (80055b0 <vPortFree+0xac>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4413      	add	r3, r2
 8005596:	4a06      	ldr	r2, [pc, #24]	; (80055b0 <vPortFree+0xac>)
 8005598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800559a:	6938      	ldr	r0, [r7, #16]
 800559c:	f000 f86c 	bl	8005678 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80055a0:	f7fe fc36 	bl	8003e10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80055a4:	bf00      	nop
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20004950 	.word	0x20004950
 80055b0:	20004948 	.word	0x20004948

080055b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80055ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80055be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80055c0:	4b27      	ldr	r3, [pc, #156]	; (8005660 <prvHeapInit+0xac>)
 80055c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00c      	beq.n	80055e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	3307      	adds	r3, #7
 80055d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0307 	bic.w	r3, r3, #7
 80055da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	4a1f      	ldr	r2, [pc, #124]	; (8005660 <prvHeapInit+0xac>)
 80055e4:	4413      	add	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80055ec:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <prvHeapInit+0xb0>)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80055f2:	4b1c      	ldr	r3, [pc, #112]	; (8005664 <prvHeapInit+0xb0>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	4413      	add	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005600:	2208      	movs	r2, #8
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0307 	bic.w	r3, r3, #7
 800560e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4a15      	ldr	r2, [pc, #84]	; (8005668 <prvHeapInit+0xb4>)
 8005614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005616:	4b14      	ldr	r3, [pc, #80]	; (8005668 <prvHeapInit+0xb4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800561e:	4b12      	ldr	r3, [pc, #72]	; (8005668 <prvHeapInit+0xb4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	1ad2      	subs	r2, r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005634:	4b0c      	ldr	r3, [pc, #48]	; (8005668 <prvHeapInit+0xb4>)
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	4a0a      	ldr	r2, [pc, #40]	; (800566c <prvHeapInit+0xb8>)
 8005642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	4a09      	ldr	r2, [pc, #36]	; (8005670 <prvHeapInit+0xbc>)
 800564a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800564c:	4b09      	ldr	r3, [pc, #36]	; (8005674 <prvHeapInit+0xc0>)
 800564e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005652:	601a      	str	r2, [r3, #0]
}
 8005654:	bf00      	nop
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr
 8005660:	20000d3c 	.word	0x20000d3c
 8005664:	2000493c 	.word	0x2000493c
 8005668:	20004944 	.word	0x20004944
 800566c:	2000494c 	.word	0x2000494c
 8005670:	20004948 	.word	0x20004948
 8005674:	20004950 	.word	0x20004950

08005678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005680:	4b28      	ldr	r3, [pc, #160]	; (8005724 <prvInsertBlockIntoFreeList+0xac>)
 8005682:	60fb      	str	r3, [r7, #12]
 8005684:	e002      	b.n	800568c <prvInsertBlockIntoFreeList+0x14>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d8f7      	bhi.n	8005686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	68ba      	ldr	r2, [r7, #8]
 80056a0:	4413      	add	r3, r2
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d108      	bne.n	80056ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	441a      	add	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	441a      	add	r2, r3
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d118      	bne.n	8005700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <prvInsertBlockIntoFreeList+0xb0>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d00d      	beq.n	80056f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	441a      	add	r2, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	e008      	b.n	8005708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <prvInsertBlockIntoFreeList+0xb0>)
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]
 80056fe:	e003      	b.n	8005708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d002      	beq.n	8005716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	2000493c 	.word	0x2000493c
 8005728:	20004944 	.word	0x20004944

0800572c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005732:	4b24      	ldr	r3, [pc, #144]	; (80057c4 <_DoInit+0x98>)
 8005734:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2203      	movs	r2, #3
 800573a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2203      	movs	r2, #3
 8005740:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a20      	ldr	r2, [pc, #128]	; (80057c8 <_DoInit+0x9c>)
 8005746:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a20      	ldr	r2, [pc, #128]	; (80057cc <_DoInit+0xa0>)
 800574c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005754:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a17      	ldr	r2, [pc, #92]	; (80057c8 <_DoInit+0x9c>)
 800576c:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a17      	ldr	r2, [pc, #92]	; (80057d0 <_DoInit+0xa4>)
 8005772:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2210      	movs	r2, #16
 8005778:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	3307      	adds	r3, #7
 8005790:	4a10      	ldr	r2, [pc, #64]	; (80057d4 <_DoInit+0xa8>)
 8005792:	6810      	ldr	r0, [r2, #0]
 8005794:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005796:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a0e      	ldr	r2, [pc, #56]	; (80057d8 <_DoInit+0xac>)
 800579e:	6810      	ldr	r0, [r2, #0]
 80057a0:	6018      	str	r0, [r3, #0]
 80057a2:	8891      	ldrh	r1, [r2, #4]
 80057a4:	7992      	ldrb	r2, [r2, #6]
 80057a6:	8099      	strh	r1, [r3, #4]
 80057a8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80057aa:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2220      	movs	r2, #32
 80057b2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80057b4:	f3bf 8f5f 	dmb	sy
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr
 80057c4:	200053fc 	.word	0x200053fc
 80057c8:	08007094 	.word	0x08007094
 80057cc:	20004954 	.word	0x20004954
 80057d0:	20004d54 	.word	0x20004d54
 80057d4:	080070a0 	.word	0x080070a0
 80057d8:	080070a4 	.word	0x080070a4

080057dc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80057dc:	b580      	push	{r7, lr}
 80057de:	b08c      	sub	sp, #48	; 0x30
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80057e8:	4b3e      	ldr	r3, [pc, #248]	; (80058e4 <SEGGER_RTT_ReadNoLock+0x108>)
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	6a3b      	ldr	r3, [r7, #32]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <SEGGER_RTT_ReadNoLock+0x1e>
 80057f6:	f7ff ff99 	bl	800572c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4613      	mov	r3, r2
 80057fe:	005b      	lsls	r3, r3, #1
 8005800:	4413      	add	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	3360      	adds	r3, #96	; 0x60
 8005806:	4a37      	ldr	r2, [pc, #220]	; (80058e4 <SEGGER_RTT_ReadNoLock+0x108>)
 8005808:	4413      	add	r3, r2
 800580a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800581c:	2300      	movs	r3, #0
 800581e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005820:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	429a      	cmp	r2, r3
 8005826:	d92b      	bls.n	8005880 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	689a      	ldr	r2, [r3, #8]
 800582c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4293      	cmp	r3, r2
 8005838:	bf28      	it	cs
 800583a:	4613      	movcs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005844:	4413      	add	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	6939      	ldr	r1, [r7, #16]
 800584c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800584e:	f001 fbb4 	bl	8006fba <memcpy>
    NumBytesRead += NumBytesRem;
 8005852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	4413      	add	r3, r2
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	1ad3      	subs	r3, r2, r3
 8005868:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800586a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	4413      	add	r3, r2
 8005870:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005878:	429a      	cmp	r2, r3
 800587a:	d101      	bne.n	8005880 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800587c:	2300      	movs	r3, #0
 800587e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005880:	69ba      	ldr	r2, [r7, #24]
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4293      	cmp	r3, r2
 800588e:	bf28      	it	cs
 8005890:	4613      	movcs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d019      	beq.n	80058ce <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	4413      	add	r3, r2
 80058a2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	6939      	ldr	r1, [r7, #16]
 80058a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058aa:	f001 fb86 	bl	8006fba <memcpy>
    NumBytesRead += NumBytesRem;
 80058ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	4413      	add	r3, r2
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	4413      	add	r3, r2
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	4413      	add	r3, r2
 80058cc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d002      	beq.n	80058da <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80058da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3730      	adds	r7, #48	; 0x30
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	200053fc 	.word	0x200053fc

080058e8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b088      	sub	sp, #32
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80058f6:	4b3d      	ldr	r3, [pc, #244]	; (80059ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005904:	f7ff ff12 	bl	800572c <_DoInit>
  SEGGER_RTT_LOCK();
 8005908:	f3ef 8311 	mrs	r3, BASEPRI
 800590c:	f04f 0120 	mov.w	r1, #32
 8005910:	f381 8811 	msr	BASEPRI, r1
 8005914:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005916:	4b35      	ldr	r3, [pc, #212]	; (80059ec <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005918:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800591e:	6939      	ldr	r1, [r7, #16]
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	4613      	mov	r3, r2
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	4413      	add	r3, r2
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	440b      	add	r3, r1
 800592e:	3304      	adds	r3, #4
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	3301      	adds	r3, #1
 800593a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	69fa      	ldr	r2, [r7, #28]
 8005942:	429a      	cmp	r2, r3
 8005944:	dbeb      	blt.n	800591e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005946:	e000      	b.n	800594a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005948:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	429a      	cmp	r2, r3
 8005952:	da3f      	bge.n	80059d4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005954:	6939      	ldr	r1, [r7, #16]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	4613      	mov	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	4413      	add	r3, r2
 8005960:	00db      	lsls	r3, r3, #3
 8005962:	440b      	add	r3, r1
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005968:	6939      	ldr	r1, [r7, #16]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	4613      	mov	r3, r2
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	440b      	add	r3, r1
 8005978:	3304      	adds	r3, #4
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800597e:	6939      	ldr	r1, [r7, #16]
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	4613      	mov	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	4413      	add	r3, r2
 8005988:	00db      	lsls	r3, r3, #3
 800598a:	440b      	add	r3, r1
 800598c:	3320      	adds	r3, #32
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005992:	6939      	ldr	r1, [r7, #16]
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	4613      	mov	r3, r2
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	4413      	add	r3, r2
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	440b      	add	r3, r1
 80059a0:	3328      	adds	r3, #40	; 0x28
 80059a2:	2200      	movs	r2, #0
 80059a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80059a6:	6939      	ldr	r1, [r7, #16]
 80059a8:	69fa      	ldr	r2, [r7, #28]
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	00db      	lsls	r3, r3, #3
 80059b2:	440b      	add	r3, r1
 80059b4:	3324      	adds	r3, #36	; 0x24
 80059b6:	2200      	movs	r2, #0
 80059b8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80059ba:	6939      	ldr	r1, [r7, #16]
 80059bc:	69fa      	ldr	r2, [r7, #28]
 80059be:	4613      	mov	r3, r2
 80059c0:	005b      	lsls	r3, r3, #1
 80059c2:	4413      	add	r3, r2
 80059c4:	00db      	lsls	r3, r3, #3
 80059c6:	440b      	add	r3, r1
 80059c8:	332c      	adds	r3, #44	; 0x2c
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80059ce:	f3bf 8f5f 	dmb	sy
 80059d2:	e002      	b.n	80059da <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80059d4:	f04f 33ff 	mov.w	r3, #4294967295
 80059d8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80059e0:	69fb      	ldr	r3, [r7, #28]
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3720      	adds	r7, #32
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200053fc 	.word	0x200053fc

080059f0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	; 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80059fe:	4b21      	ldr	r3, [pc, #132]	; (8005a84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d101      	bne.n	8005a10 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005a0c:	f7ff fe8e 	bl	800572c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a10:	4b1c      	ldr	r3, [pc, #112]	; (8005a84 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005a12:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d82c      	bhi.n	8005a74 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a1e:	f04f 0120 	mov.w	r1, #32
 8005a22:	f381 8811 	msr	BASEPRI, r1
 8005a26:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	4413      	add	r3, r2
 8005a30:	00db      	lsls	r3, r3, #3
 8005a32:	3360      	adds	r3, #96	; 0x60
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	4413      	add	r3, r2
 8005a38:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00e      	beq.n	8005a5e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	683a      	ldr	r2, [r7, #0]
 8005a50:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a62:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a64:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	627b      	str	r3, [r7, #36]	; 0x24
 8005a72:	e002      	b.n	8005a7a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005a74:	f04f 33ff 	mov.w	r3, #4294967295
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3728      	adds	r7, #40	; 0x28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	200053fc 	.word	0x200053fc

08005a88 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005a88:	b480      	push	{r7}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00f      	beq.n	8005abe <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005a9e:	e002      	b.n	8005aa6 <_EncodeStr+0x1e>
      Len++;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	4413      	add	r3, r2
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1f6      	bne.n	8005aa0 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005ab2:	693a      	ldr	r2, [r7, #16]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d901      	bls.n	8005abe <_EncodeStr+0x36>
      Len = Limit;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	2bfe      	cmp	r3, #254	; 0xfe
 8005ac2:	d806      	bhi.n	8005ad2 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	1c5a      	adds	r2, r3, #1
 8005ac8:	60fa      	str	r2, [r7, #12]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	b2d2      	uxtb	r2, r2
 8005ace:	701a      	strb	r2, [r3, #0]
 8005ad0:	e011      	b.n	8005af6 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	1c5a      	adds	r2, r3, #1
 8005ad6:	60fa      	str	r2, [r7, #12]
 8005ad8:	22ff      	movs	r2, #255	; 0xff
 8005ada:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	60fa      	str	r2, [r7, #12]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	0a19      	lsrs	r1, r3, #8
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	1c5a      	adds	r2, r3, #1
 8005af0:	60fa      	str	r2, [r7, #12]
 8005af2:	b2ca      	uxtb	r2, r1
 8005af4:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005afa:	e00a      	b.n	8005b12 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	1c53      	adds	r3, r2, #1
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1c59      	adds	r1, r3, #1
 8005b06:	60f9      	str	r1, [r7, #12]
 8005b08:	7812      	ldrb	r2, [r2, #0]
 8005b0a:	701a      	strb	r2, [r3, #0]
    n++;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005b12:	697a      	ldr	r2, [r7, #20]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d3f0      	bcc.n	8005afc <_EncodeStr+0x74>
  }
  return pPayload;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	3304      	adds	r3, #4
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b46:	4b33      	ldr	r3, [pc, #204]	; (8005c14 <_HandleIncomingPacket+0xd4>)
 8005b48:	7e1b      	ldrb	r3, [r3, #24]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	1cfb      	adds	r3, r7, #3
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4619      	mov	r1, r3
 8005b52:	f7ff fe43 	bl	80057dc <SEGGER_RTT_ReadNoLock>
 8005b56:	4603      	mov	r3, r0
 8005b58:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dd4d      	ble.n	8005bfc <_HandleIncomingPacket+0xbc>
    switch (Cmd) {
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	2b05      	cmp	r3, #5
 8005b64:	d022      	beq.n	8005bac <_HandleIncomingPacket+0x6c>
 8005b66:	2b05      	cmp	r3, #5
 8005b68:	dc0b      	bgt.n	8005b82 <_HandleIncomingPacket+0x42>
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d015      	beq.n	8005b9a <_HandleIncomingPacket+0x5a>
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	dc02      	bgt.n	8005b78 <_HandleIncomingPacket+0x38>
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d00e      	beq.n	8005b94 <_HandleIncomingPacket+0x54>
 8005b76:	e034      	b.n	8005be2 <_HandleIncomingPacket+0xa2>
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d011      	beq.n	8005ba0 <_HandleIncomingPacket+0x60>
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d012      	beq.n	8005ba6 <_HandleIncomingPacket+0x66>
 8005b80:	e02f      	b.n	8005be2 <_HandleIncomingPacket+0xa2>
 8005b82:	2b07      	cmp	r3, #7
 8005b84:	d018      	beq.n	8005bb8 <_HandleIncomingPacket+0x78>
 8005b86:	2b07      	cmp	r3, #7
 8005b88:	db13      	blt.n	8005bb2 <_HandleIncomingPacket+0x72>
 8005b8a:	2b7f      	cmp	r3, #127	; 0x7f
 8005b8c:	d038      	beq.n	8005c00 <_HandleIncomingPacket+0xc0>
 8005b8e:	2b80      	cmp	r3, #128	; 0x80
 8005b90:	d015      	beq.n	8005bbe <_HandleIncomingPacket+0x7e>
 8005b92:	e026      	b.n	8005be2 <_HandleIncomingPacket+0xa2>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005b94:	f000 fba8 	bl	80062e8 <SEGGER_SYSVIEW_Start>
      break;
 8005b98:	e037      	b.n	8005c0a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005b9a:	f000 fc5f 	bl	800645c <SEGGER_SYSVIEW_Stop>
      break;
 8005b9e:	e034      	b.n	8005c0a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005ba0:	f000 fe38 	bl	8006814 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005ba4:	e031      	b.n	8005c0a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005ba6:	f000 fdfd 	bl	80067a4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005baa:	e02e      	b.n	8005c0a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005bac:	f000 fc7c 	bl	80064a8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005bb0:	e02b      	b.n	8005c0a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005bb2:	f000 ffef 	bl	8006b94 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005bb6:	e028      	b.n	8005c0a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005bb8:	f000 ffce 	bl	8006b58 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005bbc:	e025      	b.n	8005c0a <_HandleIncomingPacket+0xca>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bbe:	4b15      	ldr	r3, [pc, #84]	; (8005c14 <_HandleIncomingPacket+0xd4>)
 8005bc0:	7e1b      	ldrb	r3, [r3, #24]
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	1cfb      	adds	r3, r7, #3
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	4619      	mov	r1, r3
 8005bca:	f7ff fe07 	bl	80057dc <SEGGER_RTT_ReadNoLock>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	dd15      	ble.n	8005c04 <_HandleIncomingPacket+0xc4>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 ff3c 	bl	8006a58 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005be0:	e010      	b.n	8005c04 <_HandleIncomingPacket+0xc4>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005be2:	78fb      	ldrb	r3, [r7, #3]
 8005be4:	b25b      	sxtb	r3, r3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da0e      	bge.n	8005c08 <_HandleIncomingPacket+0xc8>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bea:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <_HandleIncomingPacket+0xd4>)
 8005bec:	7e1b      	ldrb	r3, [r3, #24]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	1cfb      	adds	r3, r7, #3
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	f7ff fdf1 	bl	80057dc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005bfa:	e005      	b.n	8005c08 <_HandleIncomingPacket+0xc8>
    }
  }
 8005bfc:	bf00      	nop
 8005bfe:	e004      	b.n	8005c0a <_HandleIncomingPacket+0xca>
      break;
 8005c00:	bf00      	nop
 8005c02:	e002      	b.n	8005c0a <_HandleIncomingPacket+0xca>
      break;
 8005c04:	bf00      	nop
 8005c06:	e000      	b.n	8005c0a <_HandleIncomingPacket+0xca>
      break;
 8005c08:	bf00      	nop
}
 8005c0a:	bf00      	nop
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	2000516c 	.word	0x2000516c

08005c18 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08c      	sub	sp, #48	; 0x30
 8005c1c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005c1e:	2301      	movs	r3, #1
 8005c20:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005c22:	1d3b      	adds	r3, r7, #4
 8005c24:	3301      	adds	r3, #1
 8005c26:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c2c:	4b31      	ldr	r3, [pc, #196]	; (8005cf4 <_TrySendOverflowPacket+0xdc>)
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c32:	e00b      	b.n	8005c4c <_TrySendOverflowPacket+0x34>
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c48:	09db      	lsrs	r3, r3, #7
 8005c4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c50:	d8f0      	bhi.n	8005c34 <_TrySendOverflowPacket+0x1c>
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c60:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c62:	4b25      	ldr	r3, [pc, #148]	; (8005cf8 <_TrySendOverflowPacket+0xe0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c68:	4b22      	ldr	r3, [pc, #136]	; (8005cf4 <_TrySendOverflowPacket+0xdc>)
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	623b      	str	r3, [r7, #32]
 8005c7a:	e00b      	b.n	8005c94 <_TrySendOverflowPacket+0x7c>
 8005c7c:	6a3b      	ldr	r3, [r7, #32]
 8005c7e:	b2da      	uxtb	r2, r3
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	1c59      	adds	r1, r3, #1
 8005c84:	6279      	str	r1, [r7, #36]	; 0x24
 8005c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c8a:	b2d2      	uxtb	r2, r2
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	09db      	lsrs	r3, r3, #7
 8005c92:	623b      	str	r3, [r7, #32]
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	2b7f      	cmp	r3, #127	; 0x7f
 8005c98:	d8f0      	bhi.n	8005c7c <_TrySendOverflowPacket+0x64>
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	627a      	str	r2, [r7, #36]	; 0x24
 8005ca0:	6a3a      	ldr	r2, [r7, #32]
 8005ca2:	b2d2      	uxtb	r2, r2
 8005ca4:	701a      	strb	r2, [r3, #0]
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca8:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005caa:	4b12      	ldr	r3, [pc, #72]	; (8005cf4 <_TrySendOverflowPacket+0xdc>)
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	69fa      	ldr	r2, [r7, #28]
 8005cb2:	1d3b      	adds	r3, r7, #4
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	1d3b      	adds	r3, r7, #4
 8005cba:	4619      	mov	r1, r3
 8005cbc:	f7fa fa88 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d009      	beq.n	8005cde <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005cca:	4a0a      	ldr	r2, [pc, #40]	; (8005cf4 <_TrySendOverflowPacket+0xdc>)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005cd0:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <_TrySendOverflowPacket+0xdc>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	4b06      	ldr	r3, [pc, #24]	; (8005cf4 <_TrySendOverflowPacket+0xdc>)
 8005cda:	701a      	strb	r2, [r3, #0]
 8005cdc:	e004      	b.n	8005ce8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005cde:	4b05      	ldr	r3, [pc, #20]	; (8005cf4 <_TrySendOverflowPacket+0xdc>)
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	3301      	adds	r3, #1
 8005ce4:	4a03      	ldr	r2, [pc, #12]	; (8005cf4 <_TrySendOverflowPacket+0xdc>)
 8005ce6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005ce8:	693b      	ldr	r3, [r7, #16]
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3730      	adds	r7, #48	; 0x30
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	2000516c 	.word	0x2000516c
 8005cf8:	e0001004 	.word	0xe0001004

08005cfc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005d08:	4b6c      	ldr	r3, [pc, #432]	; (8005ebc <_SendPacket+0x1c0>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d010      	beq.n	8005d32 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005d10:	4b6a      	ldr	r3, [pc, #424]	; (8005ebc <_SendPacket+0x1c0>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80a3 	beq.w	8005e60 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005d1a:	4b68      	ldr	r3, [pc, #416]	; (8005ebc <_SendPacket+0x1c0>)
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d109      	bne.n	8005d36 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005d22:	f7ff ff79 	bl	8005c18 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005d26:	4b65      	ldr	r3, [pc, #404]	; (8005ebc <_SendPacket+0x1c0>)
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	f040 809a 	bne.w	8005e64 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005d30:	e001      	b.n	8005d36 <_SendPacket+0x3a>
    goto Send;
 8005d32:	bf00      	nop
 8005d34:	e000      	b.n	8005d38 <_SendPacket+0x3c>
Send:
 8005d36:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b1f      	cmp	r3, #31
 8005d3c:	d809      	bhi.n	8005d52 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005d3e:	4b5f      	ldr	r3, [pc, #380]	; (8005ebc <_SendPacket+0x1c0>)
 8005d40:	69da      	ldr	r2, [r3, #28]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	fa22 f303 	lsr.w	r3, r2, r3
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	f040 808b 	bne.w	8005e68 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b17      	cmp	r3, #23
 8005d56:	d807      	bhi.n	8005d68 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	60fb      	str	r3, [r7, #12]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	e03d      	b.n	8005de4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005d68:	68ba      	ldr	r2, [r7, #8]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	2b7f      	cmp	r3, #127	; 0x7f
 8005d74:	d912      	bls.n	8005d9c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	09da      	lsrs	r2, r3, #7
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	68fa      	ldr	r2, [r7, #12]
 8005d8c:	3a01      	subs	r2, #1
 8005d8e:	60fa      	str	r2, [r7, #12]
 8005d90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d94:	b2da      	uxtb	r2, r3
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	701a      	strb	r2, [r3, #0]
 8005d9a:	e006      	b.n	8005daa <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	b2da      	uxtb	r2, r3
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b7f      	cmp	r3, #127	; 0x7f
 8005dae:	d912      	bls.n	8005dd6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	09da      	lsrs	r2, r3, #7
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	3a01      	subs	r2, #1
 8005dc8:	60fa      	str	r2, [r7, #12]
 8005dca:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	701a      	strb	r2, [r3, #0]
 8005dd4:	e006      	b.n	8005de4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005de4:	4b36      	ldr	r3, [pc, #216]	; (8005ec0 <_SendPacket+0x1c4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005dea:	4b34      	ldr	r3, [pc, #208]	; (8005ebc <_SendPacket+0x1c0>)
 8005dec:	68db      	ldr	r3, [r3, #12]
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	627b      	str	r3, [r7, #36]	; 0x24
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	623b      	str	r3, [r7, #32]
 8005dfc:	e00b      	b.n	8005e16 <_SendPacket+0x11a>
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	b2da      	uxtb	r2, r3
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	1c59      	adds	r1, r3, #1
 8005e06:	6279      	str	r1, [r7, #36]	; 0x24
 8005e08:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e0c:	b2d2      	uxtb	r2, r2
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	6a3b      	ldr	r3, [r7, #32]
 8005e12:	09db      	lsrs	r3, r3, #7
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	2b7f      	cmp	r3, #127	; 0x7f
 8005e1a:	d8f0      	bhi.n	8005dfe <_SendPacket+0x102>
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	627a      	str	r2, [r7, #36]	; 0x24
 8005e22:	6a3a      	ldr	r2, [r7, #32]
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005e2c:	4b23      	ldr	r3, [pc, #140]	; (8005ebc <_SendPacket+0x1c0>)
 8005e2e:	785b      	ldrb	r3, [r3, #1]
 8005e30:	4618      	mov	r0, r3
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	461a      	mov	r2, r3
 8005e3a:	68f9      	ldr	r1, [r7, #12]
 8005e3c:	f7fa f9c8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e40:	4603      	mov	r3, r0
 8005e42:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	; (8005ebc <_SendPacket+0x1c0>)
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	60d3      	str	r3, [r2, #12]
 8005e50:	e00b      	b.n	8005e6a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005e52:	4b1a      	ldr	r3, [pc, #104]	; (8005ebc <_SendPacket+0x1c0>)
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	3301      	adds	r3, #1
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	4b18      	ldr	r3, [pc, #96]	; (8005ebc <_SendPacket+0x1c0>)
 8005e5c:	701a      	strb	r2, [r3, #0]
 8005e5e:	e004      	b.n	8005e6a <_SendPacket+0x16e>
    goto SendDone;
 8005e60:	bf00      	nop
 8005e62:	e002      	b.n	8005e6a <_SendPacket+0x16e>
      goto SendDone;
 8005e64:	bf00      	nop
 8005e66:	e000      	b.n	8005e6a <_SendPacket+0x16e>
      goto SendDone;
 8005e68:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005e6a:	4b14      	ldr	r3, [pc, #80]	; (8005ebc <_SendPacket+0x1c0>)
 8005e6c:	7e1b      	ldrb	r3, [r3, #24]
 8005e6e:	4619      	mov	r1, r3
 8005e70:	4a14      	ldr	r2, [pc, #80]	; (8005ec4 <_SendPacket+0x1c8>)
 8005e72:	460b      	mov	r3, r1
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	440b      	add	r3, r1
 8005e78:	00db      	lsls	r3, r3, #3
 8005e7a:	4413      	add	r3, r2
 8005e7c:	336c      	adds	r3, #108	; 0x6c
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b0e      	ldr	r3, [pc, #56]	; (8005ebc <_SendPacket+0x1c0>)
 8005e82:	7e1b      	ldrb	r3, [r3, #24]
 8005e84:	4618      	mov	r0, r3
 8005e86:	490f      	ldr	r1, [pc, #60]	; (8005ec4 <_SendPacket+0x1c8>)
 8005e88:	4603      	mov	r3, r0
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4403      	add	r3, r0
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	440b      	add	r3, r1
 8005e92:	3370      	adds	r3, #112	; 0x70
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d00b      	beq.n	8005eb2 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005e9a:	4b08      	ldr	r3, [pc, #32]	; (8005ebc <_SendPacket+0x1c0>)
 8005e9c:	789b      	ldrb	r3, [r3, #2]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d107      	bne.n	8005eb2 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005ea2:	4b06      	ldr	r3, [pc, #24]	; (8005ebc <_SendPacket+0x1c0>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005ea8:	f7ff fe4a 	bl	8005b40 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005eac:	4b03      	ldr	r3, [pc, #12]	; (8005ebc <_SendPacket+0x1c0>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005eb2:	bf00      	nop
 8005eb4:	3728      	adds	r7, #40	; 0x28
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	2000516c 	.word	0x2000516c
 8005ec0:	e0001004 	.word	0xe0001004
 8005ec4:	200053fc 	.word	0x200053fc

08005ec8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af02      	add	r7, sp, #8
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005edc:	4917      	ldr	r1, [pc, #92]	; (8005f3c <SEGGER_SYSVIEW_Init+0x74>)
 8005ede:	4818      	ldr	r0, [pc, #96]	; (8005f40 <SEGGER_SYSVIEW_Init+0x78>)
 8005ee0:	f7ff fd02 	bl	80058e8 <SEGGER_RTT_AllocUpBuffer>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	b2da      	uxtb	r2, r3
 8005ee8:	4b16      	ldr	r3, [pc, #88]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005eea:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005eec:	4b15      	ldr	r3, [pc, #84]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005eee:	785a      	ldrb	r2, [r3, #1]
 8005ef0:	4b14      	ldr	r3, [pc, #80]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ef2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005ef4:	4b13      	ldr	r3, [pc, #76]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ef6:	7e1b      	ldrb	r3, [r3, #24]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	2300      	movs	r3, #0
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	2308      	movs	r3, #8
 8005f00:	4a11      	ldr	r2, [pc, #68]	; (8005f48 <SEGGER_SYSVIEW_Init+0x80>)
 8005f02:	490f      	ldr	r1, [pc, #60]	; (8005f40 <SEGGER_SYSVIEW_Init+0x78>)
 8005f04:	f7ff fd74 	bl	80059f0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f08:	4b0e      	ldr	r3, [pc, #56]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <SEGGER_SYSVIEW_Init+0x84>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a0c      	ldr	r2, [pc, #48]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f14:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f16:	4a0b      	ldr	r2, [pc, #44]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f1c:	4a09      	ldr	r2, [pc, #36]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f22:	4a08      	ldr	r2, [pc, #32]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f28:	4a06      	ldr	r2, [pc, #24]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005f2e:	4b05      	ldr	r3, [pc, #20]	; (8005f44 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005f34:	bf00      	nop
 8005f36:	3710      	adds	r7, #16
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}
 8005f3c:	20004d64 	.word	0x20004d64
 8005f40:	080070ac 	.word	0x080070ac
 8005f44:	2000516c 	.word	0x2000516c
 8005f48:	20005164 	.word	0x20005164
 8005f4c:	e0001004 	.word	0xe0001004

08005f50 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005f58:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6113      	str	r3, [r2, #16]
}
 8005f5e:	bf00      	nop
 8005f60:	370c      	adds	r7, #12
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	2000516c 	.word	0x2000516c

08005f70 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f78:	f3ef 8311 	mrs	r3, BASEPRI
 8005f7c:	f04f 0120 	mov.w	r1, #32
 8005f80:	f381 8811 	msr	BASEPRI, r1
 8005f84:	60fb      	str	r3, [r7, #12]
 8005f86:	4808      	ldr	r0, [pc, #32]	; (8005fa8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005f88:	f7ff fdce 	bl	8005b28 <_PreparePacket>
 8005f8c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	68b9      	ldr	r1, [r7, #8]
 8005f92:	68b8      	ldr	r0, [r7, #8]
 8005f94:	f7ff feb2 	bl	8005cfc <_SendPacket>
  RECORD_END();
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f383 8811 	msr	BASEPRI, r3
}
 8005f9e:	bf00      	nop
 8005fa0:	3710      	adds	r7, #16
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}
 8005fa6:	bf00      	nop
 8005fa8:	2000519c 	.word	0x2000519c

08005fac <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8005fba:	f04f 0120 	mov.w	r1, #32
 8005fbe:	f381 8811 	msr	BASEPRI, r1
 8005fc2:	617b      	str	r3, [r7, #20]
 8005fc4:	4816      	ldr	r0, [pc, #88]	; (8006020 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005fc6:	f7ff fdaf 	bl	8005b28 <_PreparePacket>
 8005fca:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	61bb      	str	r3, [r7, #24]
 8005fd8:	e00b      	b.n	8005ff2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005fda:	69bb      	ldr	r3, [r7, #24]
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	1c59      	adds	r1, r3, #1
 8005fe2:	61f9      	str	r1, [r7, #28]
 8005fe4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fe8:	b2d2      	uxtb	r2, r2
 8005fea:	701a      	strb	r2, [r3, #0]
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	09db      	lsrs	r3, r3, #7
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ff6:	d8f0      	bhi.n	8005fda <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	61fa      	str	r2, [r7, #28]
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	68f9      	ldr	r1, [r7, #12]
 800600c:	6938      	ldr	r0, [r7, #16]
 800600e:	f7ff fe75 	bl	8005cfc <_SendPacket>
  RECORD_END();
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f383 8811 	msr	BASEPRI, r3
}
 8006018:	bf00      	nop
 800601a:	3720      	adds	r7, #32
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}
 8006020:	2000519c 	.word	0x2000519c

08006024 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b08c      	sub	sp, #48	; 0x30
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006030:	f3ef 8311 	mrs	r3, BASEPRI
 8006034:	f04f 0120 	mov.w	r1, #32
 8006038:	f381 8811 	msr	BASEPRI, r1
 800603c:	61fb      	str	r3, [r7, #28]
 800603e:	4825      	ldr	r0, [pc, #148]	; (80060d4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006040:	f7ff fd72 	bl	8005b28 <_PreparePacket>
 8006044:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28
 8006052:	e00b      	b.n	800606c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006056:	b2da      	uxtb	r2, r3
 8006058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605a:	1c59      	adds	r1, r3, #1
 800605c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800605e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006062:	b2d2      	uxtb	r2, r2
 8006064:	701a      	strb	r2, [r3, #0]
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	09db      	lsrs	r3, r3, #7
 800606a:	62bb      	str	r3, [r7, #40]	; 0x28
 800606c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606e:	2b7f      	cmp	r3, #127	; 0x7f
 8006070:	d8f0      	bhi.n	8006054 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	1c5a      	adds	r2, r3, #1
 8006076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	627b      	str	r3, [r7, #36]	; 0x24
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	623b      	str	r3, [r7, #32]
 800608a:	e00b      	b.n	80060a4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	b2da      	uxtb	r2, r3
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	1c59      	adds	r1, r3, #1
 8006094:	6279      	str	r1, [r7, #36]	; 0x24
 8006096:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	09db      	lsrs	r3, r3, #7
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	2b7f      	cmp	r3, #127	; 0x7f
 80060a8:	d8f0      	bhi.n	800608c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80060aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	627a      	str	r2, [r7, #36]	; 0x24
 80060b0:	6a3a      	ldr	r2, [r7, #32]
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	6979      	ldr	r1, [r7, #20]
 80060be:	69b8      	ldr	r0, [r7, #24]
 80060c0:	f7ff fe1c 	bl	8005cfc <_SendPacket>
  RECORD_END();
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	f383 8811 	msr	BASEPRI, r3
}
 80060ca:	bf00      	nop
 80060cc:	3730      	adds	r7, #48	; 0x30
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	2000519c 	.word	0x2000519c

080060d8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80060d8:	b580      	push	{r7, lr}
 80060da:	b08e      	sub	sp, #56	; 0x38
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80060e6:	f3ef 8311 	mrs	r3, BASEPRI
 80060ea:	f04f 0120 	mov.w	r1, #32
 80060ee:	f381 8811 	msr	BASEPRI, r1
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	4832      	ldr	r0, [pc, #200]	; (80061c0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80060f6:	f7ff fd17 	bl	8005b28 <_PreparePacket>
 80060fa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	637b      	str	r3, [r7, #52]	; 0x34
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
 8006108:	e00b      	b.n	8006122 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	b2da      	uxtb	r2, r3
 800610e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006110:	1c59      	adds	r1, r3, #1
 8006112:	6379      	str	r1, [r7, #52]	; 0x34
 8006114:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006118:	b2d2      	uxtb	r2, r2
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611e:	09db      	lsrs	r3, r3, #7
 8006120:	633b      	str	r3, [r7, #48]	; 0x30
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	2b7f      	cmp	r3, #127	; 0x7f
 8006126:	d8f0      	bhi.n	800610a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	637a      	str	r2, [r7, #52]	; 0x34
 800612e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	701a      	strb	r2, [r3, #0]
 8006134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006136:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006140:	e00b      	b.n	800615a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	b2da      	uxtb	r2, r3
 8006146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006148:	1c59      	adds	r1, r3, #1
 800614a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800614c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	09db      	lsrs	r3, r3, #7
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
 800615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615c:	2b7f      	cmp	r3, #127	; 0x7f
 800615e:	d8f0      	bhi.n	8006142 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	623b      	str	r3, [r7, #32]
 8006178:	e00b      	b.n	8006192 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006180:	1c59      	adds	r1, r3, #1
 8006182:	6279      	str	r1, [r7, #36]	; 0x24
 8006184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	09db      	lsrs	r3, r3, #7
 8006190:	623b      	str	r3, [r7, #32]
 8006192:	6a3b      	ldr	r3, [r7, #32]
 8006194:	2b7f      	cmp	r3, #127	; 0x7f
 8006196:	d8f0      	bhi.n	800617a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	627a      	str	r2, [r7, #36]	; 0x24
 800619e:	6a3a      	ldr	r2, [r7, #32]
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	6979      	ldr	r1, [r7, #20]
 80061ac:	69b8      	ldr	r0, [r7, #24]
 80061ae:	f7ff fda5 	bl	8005cfc <_SendPacket>
  RECORD_END();
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	f383 8811 	msr	BASEPRI, r3
}
 80061b8:	bf00      	nop
 80061ba:	3738      	adds	r7, #56	; 0x38
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	2000519c 	.word	0x2000519c

080061c4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b090      	sub	sp, #64	; 0x40
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061d2:	f3ef 8311 	mrs	r3, BASEPRI
 80061d6:	f04f 0120 	mov.w	r1, #32
 80061da:	f381 8811 	msr	BASEPRI, r1
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	4840      	ldr	r0, [pc, #256]	; (80062e4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80061e2:	f7ff fca1 	bl	8005b28 <_PreparePacket>
 80061e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80061f4:	e00b      	b.n	800620e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80061f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f8:	b2da      	uxtb	r2, r3
 80061fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fc:	1c59      	adds	r1, r3, #1
 80061fe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006200:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006204:	b2d2      	uxtb	r2, r2
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800620a:	09db      	lsrs	r3, r3, #7
 800620c:	63bb      	str	r3, [r7, #56]	; 0x38
 800620e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006210:	2b7f      	cmp	r3, #127	; 0x7f
 8006212:	d8f0      	bhi.n	80061f6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006216:	1c5a      	adds	r2, r3, #1
 8006218:	63fa      	str	r2, [r7, #60]	; 0x3c
 800621a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800621c:	b2d2      	uxtb	r2, r2
 800621e:	701a      	strb	r2, [r3, #0]
 8006220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006222:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	637b      	str	r3, [r7, #52]	; 0x34
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	633b      	str	r3, [r7, #48]	; 0x30
 800622c:	e00b      	b.n	8006246 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	b2da      	uxtb	r2, r3
 8006232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006234:	1c59      	adds	r1, r3, #1
 8006236:	6379      	str	r1, [r7, #52]	; 0x34
 8006238:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	09db      	lsrs	r3, r3, #7
 8006244:	633b      	str	r3, [r7, #48]	; 0x30
 8006246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006248:	2b7f      	cmp	r3, #127	; 0x7f
 800624a:	d8f0      	bhi.n	800622e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800624c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	637a      	str	r2, [r7, #52]	; 0x34
 8006252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]
 8006258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	62bb      	str	r3, [r7, #40]	; 0x28
 8006264:	e00b      	b.n	800627e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006268:	b2da      	uxtb	r2, r3
 800626a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626c:	1c59      	adds	r1, r3, #1
 800626e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006270:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006274:	b2d2      	uxtb	r2, r2
 8006276:	701a      	strb	r2, [r3, #0]
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	09db      	lsrs	r3, r3, #7
 800627c:	62bb      	str	r3, [r7, #40]	; 0x28
 800627e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006280:	2b7f      	cmp	r3, #127	; 0x7f
 8006282:	d8f0      	bhi.n	8006266 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006286:	1c5a      	adds	r2, r3, #1
 8006288:	62fa      	str	r2, [r7, #44]	; 0x2c
 800628a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800628c:	b2d2      	uxtb	r2, r2
 800628e:	701a      	strb	r2, [r3, #0]
 8006290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006292:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	627b      	str	r3, [r7, #36]	; 0x24
 8006298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629a:	623b      	str	r3, [r7, #32]
 800629c:	e00b      	b.n	80062b6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800629e:	6a3b      	ldr	r3, [r7, #32]
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a4:	1c59      	adds	r1, r3, #1
 80062a6:	6279      	str	r1, [r7, #36]	; 0x24
 80062a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	09db      	lsrs	r3, r3, #7
 80062b4:	623b      	str	r3, [r7, #32]
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	2b7f      	cmp	r3, #127	; 0x7f
 80062ba:	d8f0      	bhi.n	800629e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80062bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062be:	1c5a      	adds	r2, r3, #1
 80062c0:	627a      	str	r2, [r7, #36]	; 0x24
 80062c2:	6a3a      	ldr	r2, [r7, #32]
 80062c4:	b2d2      	uxtb	r2, r2
 80062c6:	701a      	strb	r2, [r3, #0]
 80062c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ca:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	6979      	ldr	r1, [r7, #20]
 80062d0:	69b8      	ldr	r0, [r7, #24]
 80062d2:	f7ff fd13 	bl	8005cfc <_SendPacket>
  RECORD_END();
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	f383 8811 	msr	BASEPRI, r3
}
 80062dc:	bf00      	nop
 80062de:	3740      	adds	r7, #64	; 0x40
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	2000519c 	.word	0x2000519c

080062e8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	; 0x30
 80062ec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80062ee:	4b58      	ldr	r3, [pc, #352]	; (8006450 <SEGGER_SYSVIEW_Start+0x168>)
 80062f0:	2201      	movs	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80062f4:	f3ef 8311 	mrs	r3, BASEPRI
 80062f8:	f04f 0120 	mov.w	r1, #32
 80062fc:	f381 8811 	msr	BASEPRI, r1
 8006300:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006302:	4b53      	ldr	r3, [pc, #332]	; (8006450 <SEGGER_SYSVIEW_Start+0x168>)
 8006304:	785b      	ldrb	r3, [r3, #1]
 8006306:	220a      	movs	r2, #10
 8006308:	4952      	ldr	r1, [pc, #328]	; (8006454 <SEGGER_SYSVIEW_Start+0x16c>)
 800630a:	4618      	mov	r0, r3
 800630c:	f7f9 ff60 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006316:	200a      	movs	r0, #10
 8006318:	f7ff fe2a 	bl	8005f70 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800631c:	f3ef 8311 	mrs	r3, BASEPRI
 8006320:	f04f 0120 	mov.w	r1, #32
 8006324:	f381 8811 	msr	BASEPRI, r1
 8006328:	60bb      	str	r3, [r7, #8]
 800632a:	484b      	ldr	r0, [pc, #300]	; (8006458 <SEGGER_SYSVIEW_Start+0x170>)
 800632c:	f7ff fbfc 	bl	8005b28 <_PreparePacket>
 8006330:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800633a:	4b45      	ldr	r3, [pc, #276]	; (8006450 <SEGGER_SYSVIEW_Start+0x168>)
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006340:	e00b      	b.n	800635a <SEGGER_SYSVIEW_Start+0x72>
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	b2da      	uxtb	r2, r3
 8006346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800634c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	09db      	lsrs	r3, r3, #7
 8006358:	62bb      	str	r3, [r7, #40]	; 0x28
 800635a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635c:	2b7f      	cmp	r3, #127	; 0x7f
 800635e:	d8f0      	bhi.n	8006342 <SEGGER_SYSVIEW_Start+0x5a>
 8006360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
 8006374:	4b36      	ldr	r3, [pc, #216]	; (8006450 <SEGGER_SYSVIEW_Start+0x168>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	623b      	str	r3, [r7, #32]
 800637a:	e00b      	b.n	8006394 <SEGGER_SYSVIEW_Start+0xac>
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	b2da      	uxtb	r2, r3
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	1c59      	adds	r1, r3, #1
 8006384:	6279      	str	r1, [r7, #36]	; 0x24
 8006386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
 800638e:	6a3b      	ldr	r3, [r7, #32]
 8006390:	09db      	lsrs	r3, r3, #7
 8006392:	623b      	str	r3, [r7, #32]
 8006394:	6a3b      	ldr	r3, [r7, #32]
 8006396:	2b7f      	cmp	r3, #127	; 0x7f
 8006398:	d8f0      	bhi.n	800637c <SEGGER_SYSVIEW_Start+0x94>
 800639a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639c:	1c5a      	adds	r2, r3, #1
 800639e:	627a      	str	r2, [r7, #36]	; 0x24
 80063a0:	6a3a      	ldr	r2, [r7, #32]
 80063a2:	b2d2      	uxtb	r2, r2
 80063a4:	701a      	strb	r2, [r3, #0]
 80063a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	61fb      	str	r3, [r7, #28]
 80063ae:	4b28      	ldr	r3, [pc, #160]	; (8006450 <SEGGER_SYSVIEW_Start+0x168>)
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	61bb      	str	r3, [r7, #24]
 80063b4:	e00b      	b.n	80063ce <SEGGER_SYSVIEW_Start+0xe6>
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	69fb      	ldr	r3, [r7, #28]
 80063bc:	1c59      	adds	r1, r3, #1
 80063be:	61f9      	str	r1, [r7, #28]
 80063c0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	09db      	lsrs	r3, r3, #7
 80063cc:	61bb      	str	r3, [r7, #24]
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	2b7f      	cmp	r3, #127	; 0x7f
 80063d2:	d8f0      	bhi.n	80063b6 <SEGGER_SYSVIEW_Start+0xce>
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	61fa      	str	r2, [r7, #28]
 80063da:	69ba      	ldr	r2, [r7, #24]
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
 80063ec:	e00b      	b.n	8006406 <SEGGER_SYSVIEW_Start+0x11e>
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	6179      	str	r1, [r7, #20]
 80063f8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	09db      	lsrs	r3, r3, #7
 8006404:	613b      	str	r3, [r7, #16]
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b7f      	cmp	r3, #127	; 0x7f
 800640a:	d8f0      	bhi.n	80063ee <SEGGER_SYSVIEW_Start+0x106>
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	617a      	str	r2, [r7, #20]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800641c:	2218      	movs	r2, #24
 800641e:	6839      	ldr	r1, [r7, #0]
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f7ff fc6b 	bl	8005cfc <_SendPacket>
      RECORD_END();
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800642c:	4b08      	ldr	r3, [pc, #32]	; (8006450 <SEGGER_SYSVIEW_Start+0x168>)
 800642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <SEGGER_SYSVIEW_Start+0x168>)
 8006436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006438:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800643a:	f000 f9eb 	bl	8006814 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800643e:	f000 f9b1 	bl	80067a4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006442:	f000 fba7 	bl	8006b94 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006446:	bf00      	nop
 8006448:	3730      	adds	r7, #48	; 0x30
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	2000516c 	.word	0x2000516c
 8006454:	080071c0 	.word	0x080071c0
 8006458:	2000519c 	.word	0x2000519c

0800645c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006462:	f3ef 8311 	mrs	r3, BASEPRI
 8006466:	f04f 0120 	mov.w	r1, #32
 800646a:	f381 8811 	msr	BASEPRI, r1
 800646e:	607b      	str	r3, [r7, #4]
 8006470:	480b      	ldr	r0, [pc, #44]	; (80064a0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006472:	f7ff fb59 	bl	8005b28 <_PreparePacket>
 8006476:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006480:	220b      	movs	r2, #11
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	6838      	ldr	r0, [r7, #0]
 8006486:	f7ff fc39 	bl	8005cfc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <SEGGER_SYSVIEW_Stop+0x48>)
 800648c:	2200      	movs	r2, #0
 800648e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f383 8811 	msr	BASEPRI, r3
}
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	2000519c 	.word	0x2000519c
 80064a4:	2000516c 	.word	0x2000516c

080064a8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	; 0x30
 80064ac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064ae:	f3ef 8311 	mrs	r3, BASEPRI
 80064b2:	f04f 0120 	mov.w	r1, #32
 80064b6:	f381 8811 	msr	BASEPRI, r1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	4845      	ldr	r0, [pc, #276]	; (80065d4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80064be:	f7ff fb33 	bl	8005b28 <_PreparePacket>
 80064c2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064cc:	4b42      	ldr	r3, [pc, #264]	; (80065d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80064d2:	e00b      	b.n	80064ec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064da:	1c59      	adds	r1, r3, #1
 80064dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80064de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	09db      	lsrs	r3, r3, #7
 80064ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	2b7f      	cmp	r3, #127	; 0x7f
 80064f0:	d8f0      	bhi.n	80064d4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006500:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
 8006506:	4b34      	ldr	r3, [pc, #208]	; (80065d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	623b      	str	r3, [r7, #32]
 800650c:	e00b      	b.n	8006526 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800650e:	6a3b      	ldr	r3, [r7, #32]
 8006510:	b2da      	uxtb	r2, r3
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	1c59      	adds	r1, r3, #1
 8006516:	6279      	str	r1, [r7, #36]	; 0x24
 8006518:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800651c:	b2d2      	uxtb	r2, r2
 800651e:	701a      	strb	r2, [r3, #0]
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	09db      	lsrs	r3, r3, #7
 8006524:	623b      	str	r3, [r7, #32]
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	2b7f      	cmp	r3, #127	; 0x7f
 800652a:	d8f0      	bhi.n	800650e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	627a      	str	r2, [r7, #36]	; 0x24
 8006532:	6a3a      	ldr	r2, [r7, #32]
 8006534:	b2d2      	uxtb	r2, r2
 8006536:	701a      	strb	r2, [r3, #0]
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	61fb      	str	r3, [r7, #28]
 8006540:	4b25      	ldr	r3, [pc, #148]	; (80065d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	61bb      	str	r3, [r7, #24]
 8006546:	e00b      	b.n	8006560 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	b2da      	uxtb	r2, r3
 800654c:	69fb      	ldr	r3, [r7, #28]
 800654e:	1c59      	adds	r1, r3, #1
 8006550:	61f9      	str	r1, [r7, #28]
 8006552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006556:	b2d2      	uxtb	r2, r2
 8006558:	701a      	strb	r2, [r3, #0]
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	09db      	lsrs	r3, r3, #7
 800655e:	61bb      	str	r3, [r7, #24]
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b7f      	cmp	r3, #127	; 0x7f
 8006564:	d8f0      	bhi.n	8006548 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	61fa      	str	r2, [r7, #28]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	b2d2      	uxtb	r2, r2
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	2300      	movs	r3, #0
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	e00b      	b.n	8006598 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	b2da      	uxtb	r2, r3
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	1c59      	adds	r1, r3, #1
 8006588:	6179      	str	r1, [r7, #20]
 800658a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	09db      	lsrs	r3, r3, #7
 8006596:	613b      	str	r3, [r7, #16]
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	2b7f      	cmp	r3, #127	; 0x7f
 800659c:	d8f0      	bhi.n	8006580 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	617a      	str	r2, [r7, #20]
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065ae:	2218      	movs	r2, #24
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	68b8      	ldr	r0, [r7, #8]
 80065b4:	f7ff fba2 	bl	8005cfc <_SendPacket>
  RECORD_END();
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065be:	4b06      	ldr	r3, [pc, #24]	; (80065d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80065c6:	4b04      	ldr	r3, [pc, #16]	; (80065d8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	4798      	blx	r3
  }
}
 80065cc:	bf00      	nop
 80065ce:	3730      	adds	r7, #48	; 0x30
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	2000519c 	.word	0x2000519c
 80065d8:	2000516c 	.word	0x2000516c

080065dc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80065dc:	b580      	push	{r7, lr}
 80065de:	b092      	sub	sp, #72	; 0x48
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80065e4:	f3ef 8311 	mrs	r3, BASEPRI
 80065e8:	f04f 0120 	mov.w	r1, #32
 80065ec:	f381 8811 	msr	BASEPRI, r1
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	486a      	ldr	r0, [pc, #424]	; (800679c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80065f4:	f7ff fa98 	bl	8005b28 <_PreparePacket>
 80065f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	647b      	str	r3, [r7, #68]	; 0x44
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	4b66      	ldr	r3, [pc, #408]	; (80067a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006608:	691b      	ldr	r3, [r3, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	643b      	str	r3, [r7, #64]	; 0x40
 800660e:	e00b      	b.n	8006628 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006612:	b2da      	uxtb	r2, r3
 8006614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006616:	1c59      	adds	r1, r3, #1
 8006618:	6479      	str	r1, [r7, #68]	; 0x44
 800661a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006624:	09db      	lsrs	r3, r3, #7
 8006626:	643b      	str	r3, [r7, #64]	; 0x40
 8006628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662a:	2b7f      	cmp	r3, #127	; 0x7f
 800662c:	d8f0      	bhi.n	8006610 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800662e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	647a      	str	r2, [r7, #68]	; 0x44
 8006634:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	63bb      	str	r3, [r7, #56]	; 0x38
 8006648:	e00b      	b.n	8006662 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800664a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800664c:	b2da      	uxtb	r2, r3
 800664e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006650:	1c59      	adds	r1, r3, #1
 8006652:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006654:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006658:	b2d2      	uxtb	r2, r2
 800665a:	701a      	strb	r2, [r3, #0]
 800665c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665e:	09db      	lsrs	r3, r3, #7
 8006660:	63bb      	str	r3, [r7, #56]	; 0x38
 8006662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006664:	2b7f      	cmp	r3, #127	; 0x7f
 8006666:	d8f0      	bhi.n	800664a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800666a:	1c5a      	adds	r2, r3, #1
 800666c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800666e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006670:	b2d2      	uxtb	r2, r2
 8006672:	701a      	strb	r2, [r3, #0]
 8006674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006676:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	4619      	mov	r1, r3
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f7ff fa01 	bl	8005a88 <_EncodeStr>
 8006686:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006688:	2209      	movs	r2, #9
 800668a:	68f9      	ldr	r1, [r7, #12]
 800668c:	6938      	ldr	r0, [r7, #16]
 800668e:	f7ff fb35 	bl	8005cfc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	637b      	str	r3, [r7, #52]	; 0x34
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b40      	ldr	r3, [pc, #256]	; (80067a0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30
 80066a6:	e00b      	b.n	80066c0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	b2da      	uxtb	r2, r3
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	1c59      	adds	r1, r3, #1
 80066b0:	6379      	str	r1, [r7, #52]	; 0x34
 80066b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066bc:	09db      	lsrs	r3, r3, #7
 80066be:	633b      	str	r3, [r7, #48]	; 0x30
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	2b7f      	cmp	r3, #127	; 0x7f
 80066c4:	d8f0      	bhi.n	80066a8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80066c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066c8:	1c5a      	adds	r2, r3, #1
 80066ca:	637a      	str	r2, [r7, #52]	; 0x34
 80066cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ce:	b2d2      	uxtb	r2, r2
 80066d0:	701a      	strb	r2, [r3, #0]
 80066d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	62bb      	str	r3, [r7, #40]	; 0x28
 80066e0:	e00b      	b.n	80066fa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	1c59      	adds	r1, r3, #1
 80066ea:	62f9      	str	r1, [r7, #44]	; 0x2c
 80066ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066f6:	09db      	lsrs	r3, r3, #7
 80066f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	2b7f      	cmp	r3, #127	; 0x7f
 80066fe:	d8f0      	bhi.n	80066e2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006706:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	627b      	str	r3, [r7, #36]	; 0x24
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	623b      	str	r3, [r7, #32]
 800671a:	e00b      	b.n	8006734 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	b2da      	uxtb	r2, r3
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006722:	1c59      	adds	r1, r3, #1
 8006724:	6279      	str	r1, [r7, #36]	; 0x24
 8006726:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800672a:	b2d2      	uxtb	r2, r2
 800672c:	701a      	strb	r2, [r3, #0]
 800672e:	6a3b      	ldr	r3, [r7, #32]
 8006730:	09db      	lsrs	r3, r3, #7
 8006732:	623b      	str	r3, [r7, #32]
 8006734:	6a3b      	ldr	r3, [r7, #32]
 8006736:	2b7f      	cmp	r3, #127	; 0x7f
 8006738:	d8f0      	bhi.n	800671c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673c:	1c5a      	adds	r2, r3, #1
 800673e:	627a      	str	r2, [r7, #36]	; 0x24
 8006740:	6a3a      	ldr	r2, [r7, #32]
 8006742:	b2d2      	uxtb	r2, r2
 8006744:	701a      	strb	r2, [r3, #0]
 8006746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006748:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	2300      	movs	r3, #0
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	e00b      	b.n	800676c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	b2da      	uxtb	r2, r3
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	1c59      	adds	r1, r3, #1
 800675c:	61f9      	str	r1, [r7, #28]
 800675e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006762:	b2d2      	uxtb	r2, r2
 8006764:	701a      	strb	r2, [r3, #0]
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	09db      	lsrs	r3, r3, #7
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	2b7f      	cmp	r3, #127	; 0x7f
 8006770:	d8f0      	bhi.n	8006754 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	61fa      	str	r2, [r7, #28]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	69fb      	ldr	r3, [r7, #28]
 8006780:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006782:	2215      	movs	r2, #21
 8006784:	68f9      	ldr	r1, [r7, #12]
 8006786:	6938      	ldr	r0, [r7, #16]
 8006788:	f7ff fab8 	bl	8005cfc <_SendPacket>
  RECORD_END();
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f383 8811 	msr	BASEPRI, r3
}
 8006792:	bf00      	nop
 8006794:	3748      	adds	r7, #72	; 0x48
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	2000519c 	.word	0x2000519c
 80067a0:	2000516c 	.word	0x2000516c

080067a4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80067a4:	b580      	push	{r7, lr}
 80067a6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80067a8:	4b07      	ldr	r3, [pc, #28]	; (80067c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d008      	beq.n	80067c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80067b0:	4b05      	ldr	r3, [pc, #20]	; (80067c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067b2:	6a1b      	ldr	r3, [r3, #32]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80067ba:	4b03      	ldr	r3, [pc, #12]	; (80067c8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	4798      	blx	r3
  }
}
 80067c2:	bf00      	nop
 80067c4:	bd80      	pop	{r7, pc}
 80067c6:	bf00      	nop
 80067c8:	2000516c 	.word	0x2000516c

080067cc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b086      	sub	sp, #24
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067d4:	f3ef 8311 	mrs	r3, BASEPRI
 80067d8:	f04f 0120 	mov.w	r1, #32
 80067dc:	f381 8811 	msr	BASEPRI, r1
 80067e0:	617b      	str	r3, [r7, #20]
 80067e2:	480b      	ldr	r0, [pc, #44]	; (8006810 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80067e4:	f7ff f9a0 	bl	8005b28 <_PreparePacket>
 80067e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80067ea:	2280      	movs	r2, #128	; 0x80
 80067ec:	6879      	ldr	r1, [r7, #4]
 80067ee:	6938      	ldr	r0, [r7, #16]
 80067f0:	f7ff f94a 	bl	8005a88 <_EncodeStr>
 80067f4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80067f6:	220e      	movs	r2, #14
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	6938      	ldr	r0, [r7, #16]
 80067fc:	f7ff fa7e 	bl	8005cfc <_SendPacket>
  RECORD_END();
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	f383 8811 	msr	BASEPRI, r3
}
 8006806:	bf00      	nop
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	2000519c 	.word	0x2000519c

08006814 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006814:	b590      	push	{r4, r7, lr}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800681a:	4b14      	ldr	r3, [pc, #80]	; (800686c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d019      	beq.n	8006856 <SEGGER_SYSVIEW_RecordSystime+0x42>
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d014      	beq.n	8006856 <SEGGER_SYSVIEW_RecordSystime+0x42>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800682c:	4b0f      	ldr	r3, [pc, #60]	; (800686c <SEGGER_SYSVIEW_RecordSystime+0x58>)
 800682e:	6a1b      	ldr	r3, [r3, #32]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4798      	blx	r3
 8006834:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006838:	6838      	ldr	r0, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800683a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800683e:	f04f 0300 	mov.w	r3, #0
 8006842:	f04f 0400 	mov.w	r4, #0
 8006846:	0013      	movs	r3, r2
 8006848:	2400      	movs	r4, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800684a:	461a      	mov	r2, r3
 800684c:	4601      	mov	r1, r0
 800684e:	200d      	movs	r0, #13
 8006850:	f7ff fbe8 	bl	8006024 <SEGGER_SYSVIEW_RecordU32x2>
 8006854:	e005      	b.n	8006862 <SEGGER_SYSVIEW_RecordSystime+0x4e>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4619      	mov	r1, r3
 800685c:	200c      	movs	r0, #12
 800685e:	f7ff fba5 	bl	8005fac <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	bd90      	pop	{r4, r7, pc}
 800686a:	bf00      	nop
 800686c:	2000516c 	.word	0x2000516c
 8006870:	e0001004 	.word	0xe0001004

08006874 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800687a:	f3ef 8311 	mrs	r3, BASEPRI
 800687e:	f04f 0120 	mov.w	r1, #32
 8006882:	f381 8811 	msr	BASEPRI, r1
 8006886:	607b      	str	r3, [r7, #4]
 8006888:	4807      	ldr	r0, [pc, #28]	; (80068a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800688a:	f7ff f94d 	bl	8005b28 <_PreparePacket>
 800688e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006890:	2211      	movs	r2, #17
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	6838      	ldr	r0, [r7, #0]
 8006896:	f7ff fa31 	bl	8005cfc <_SendPacket>
  RECORD_END();
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f383 8811 	msr	BASEPRI, r3
}
 80068a0:	bf00      	nop
 80068a2:	3708      	adds	r7, #8
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	2000519c 	.word	0x2000519c

080068ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b088      	sub	sp, #32
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068b4:	f3ef 8311 	mrs	r3, BASEPRI
 80068b8:	f04f 0120 	mov.w	r1, #32
 80068bc:	f381 8811 	msr	BASEPRI, r1
 80068c0:	617b      	str	r3, [r7, #20]
 80068c2:	4819      	ldr	r0, [pc, #100]	; (8006928 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80068c4:	f7ff f930 	bl	8005b28 <_PreparePacket>
 80068c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068ce:	4b17      	ldr	r3, [pc, #92]	; (800692c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	61bb      	str	r3, [r7, #24]
 80068e0:	e00b      	b.n	80068fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	1c59      	adds	r1, r3, #1
 80068ea:	61f9      	str	r1, [r7, #28]
 80068ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	69bb      	ldr	r3, [r7, #24]
 80068f6:	09db      	lsrs	r3, r3, #7
 80068f8:	61bb      	str	r3, [r7, #24]
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	2b7f      	cmp	r3, #127	; 0x7f
 80068fe:	d8f0      	bhi.n	80068e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	61fa      	str	r2, [r7, #28]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006910:	2208      	movs	r2, #8
 8006912:	68f9      	ldr	r1, [r7, #12]
 8006914:	6938      	ldr	r0, [r7, #16]
 8006916:	f7ff f9f1 	bl	8005cfc <_SendPacket>
  RECORD_END();
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f383 8811 	msr	BASEPRI, r3
}
 8006920:	bf00      	nop
 8006922:	3720      	adds	r7, #32
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}
 8006928:	2000519c 	.word	0x2000519c
 800692c:	2000516c 	.word	0x2000516c

08006930 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006930:	b580      	push	{r7, lr}
 8006932:	b088      	sub	sp, #32
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006938:	f3ef 8311 	mrs	r3, BASEPRI
 800693c:	f04f 0120 	mov.w	r1, #32
 8006940:	f381 8811 	msr	BASEPRI, r1
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	4819      	ldr	r0, [pc, #100]	; (80069ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006948:	f7ff f8ee 	bl	8005b28 <_PreparePacket>
 800694c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006952:	4b17      	ldr	r3, [pc, #92]	; (80069b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	1ad3      	subs	r3, r2, r3
 800695a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	61fb      	str	r3, [r7, #28]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	61bb      	str	r3, [r7, #24]
 8006964:	e00b      	b.n	800697e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	b2da      	uxtb	r2, r3
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	1c59      	adds	r1, r3, #1
 800696e:	61f9      	str	r1, [r7, #28]
 8006970:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006974:	b2d2      	uxtb	r2, r2
 8006976:	701a      	strb	r2, [r3, #0]
 8006978:	69bb      	ldr	r3, [r7, #24]
 800697a:	09db      	lsrs	r3, r3, #7
 800697c:	61bb      	str	r3, [r7, #24]
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b7f      	cmp	r3, #127	; 0x7f
 8006982:	d8f0      	bhi.n	8006966 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	1c5a      	adds	r2, r3, #1
 8006988:	61fa      	str	r2, [r7, #28]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006994:	2204      	movs	r2, #4
 8006996:	68f9      	ldr	r1, [r7, #12]
 8006998:	6938      	ldr	r0, [r7, #16]
 800699a:	f7ff f9af 	bl	8005cfc <_SendPacket>
  RECORD_END();
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f383 8811 	msr	BASEPRI, r3
}
 80069a4:	bf00      	nop
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	2000519c 	.word	0x2000519c
 80069b0:	2000516c 	.word	0x2000516c

080069b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80069bc:	f3ef 8311 	mrs	r3, BASEPRI
 80069c0:	f04f 0120 	mov.w	r1, #32
 80069c4:	f381 8811 	msr	BASEPRI, r1
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	4819      	ldr	r0, [pc, #100]	; (8006a30 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80069cc:	f7ff f8ac 	bl	8005b28 <_PreparePacket>
 80069d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80069d6:	4b17      	ldr	r3, [pc, #92]	; (8006a34 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	61fb      	str	r3, [r7, #28]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	61bb      	str	r3, [r7, #24]
 80069e8:	e00b      	b.n	8006a02 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	69fb      	ldr	r3, [r7, #28]
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	61f9      	str	r1, [r7, #28]
 80069f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	09db      	lsrs	r3, r3, #7
 8006a00:	61bb      	str	r3, [r7, #24]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b7f      	cmp	r3, #127	; 0x7f
 8006a06:	d8f0      	bhi.n	80069ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	61fa      	str	r2, [r7, #28]
 8006a0e:	69ba      	ldr	r2, [r7, #24]
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006a18:	2206      	movs	r2, #6
 8006a1a:	68f9      	ldr	r1, [r7, #12]
 8006a1c:	6938      	ldr	r0, [r7, #16]
 8006a1e:	f7ff f96d 	bl	8005cfc <_SendPacket>
  RECORD_END();
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f383 8811 	msr	BASEPRI, r3
}
 8006a28:	bf00      	nop
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	2000519c 	.word	0x2000519c
 8006a34:	2000516c 	.word	0x2000516c

08006a38 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006a40:	4b04      	ldr	r3, [pc, #16]	; (8006a54 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	1ad3      	subs	r3, r2, r3
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	2000516c 	.word	0x2000516c

08006a58 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08c      	sub	sp, #48	; 0x30
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	4603      	mov	r3, r0
 8006a60:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006a62:	4b3b      	ldr	r3, [pc, #236]	; (8006b50 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d06d      	beq.n	8006b46 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006a6a:	4b39      	ldr	r3, [pc, #228]	; (8006b50 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006a70:	2300      	movs	r3, #0
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a74:	e008      	b.n	8006a88 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a78:	691b      	ldr	r3, [r3, #16]
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	3301      	adds	r3, #1
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d3f2      	bcc.n	8006a76 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006a90:	e000      	b.n	8006a94 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006a92:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d055      	beq.n	8006b46 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9e:	f04f 0120 	mov.w	r1, #32
 8006aa2:	f381 8811 	msr	BASEPRI, r1
 8006aa6:	617b      	str	r3, [r7, #20]
 8006aa8:	482a      	ldr	r0, [pc, #168]	; (8006b54 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006aaa:	f7ff f83d 	bl	8005b28 <_PreparePacket>
 8006aae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab8:	79fb      	ldrb	r3, [r7, #7]
 8006aba:	623b      	str	r3, [r7, #32]
 8006abc:	e00b      	b.n	8006ad6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	b2da      	uxtb	r2, r3
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	1c59      	adds	r1, r3, #1
 8006ac6:	6279      	str	r1, [r7, #36]	; 0x24
 8006ac8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	701a      	strb	r2, [r3, #0]
 8006ad0:	6a3b      	ldr	r3, [r7, #32]
 8006ad2:	09db      	lsrs	r3, r3, #7
 8006ad4:	623b      	str	r3, [r7, #32]
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	2b7f      	cmp	r3, #127	; 0x7f
 8006ada:	d8f0      	bhi.n	8006abe <SEGGER_SYSVIEW_SendModule+0x66>
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	1c5a      	adds	r2, r3, #1
 8006ae0:	627a      	str	r2, [r7, #36]	; 0x24
 8006ae2:	6a3a      	ldr	r2, [r7, #32]
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	61bb      	str	r3, [r7, #24]
 8006af6:	e00b      	b.n	8006b10 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	1c59      	adds	r1, r3, #1
 8006b00:	61f9      	str	r1, [r7, #28]
 8006b02:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b06:	b2d2      	uxtb	r2, r2
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	09db      	lsrs	r3, r3, #7
 8006b0e:	61bb      	str	r3, [r7, #24]
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2b7f      	cmp	r3, #127	; 0x7f
 8006b14:	d8f0      	bhi.n	8006af8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	1c5a      	adds	r2, r3, #1
 8006b1a:	61fa      	str	r2, [r7, #28]
 8006b1c:	69ba      	ldr	r2, [r7, #24]
 8006b1e:	b2d2      	uxtb	r2, r2
 8006b20:	701a      	strb	r2, [r3, #0]
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2280      	movs	r2, #128	; 0x80
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f7fe ffaa 	bl	8005a88 <_EncodeStr>
 8006b34:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006b36:	2216      	movs	r2, #22
 8006b38:	68f9      	ldr	r1, [r7, #12]
 8006b3a:	6938      	ldr	r0, [r7, #16]
 8006b3c:	f7ff f8de 	bl	8005cfc <_SendPacket>
      RECORD_END();
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006b46:	bf00      	nop
 8006b48:	3730      	adds	r7, #48	; 0x30
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20005194 	.word	0x20005194
 8006b54:	2000519c 	.word	0x2000519c

08006b58 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006b5e:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00f      	beq.n	8006b86 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006b66:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1f2      	bne.n	8006b6c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	20005194 	.word	0x20005194

08006b94 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006b9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b9e:	f04f 0120 	mov.w	r1, #32
 8006ba2:	f381 8811 	msr	BASEPRI, r1
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	4817      	ldr	r0, [pc, #92]	; (8006c08 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006baa:	f7fe ffbd 	bl	8005b28 <_PreparePacket>
 8006bae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	617b      	str	r3, [r7, #20]
 8006bb8:	4b14      	ldr	r3, [pc, #80]	; (8006c0c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	613b      	str	r3, [r7, #16]
 8006bbe:	e00b      	b.n	8006bd8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	1c59      	adds	r1, r3, #1
 8006bc8:	6179      	str	r1, [r7, #20]
 8006bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	09db      	lsrs	r3, r3, #7
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b7f      	cmp	r3, #127	; 0x7f
 8006bdc:	d8f0      	bhi.n	8006bc0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	617a      	str	r2, [r7, #20]
 8006be4:	693a      	ldr	r2, [r7, #16]
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006bee:	221b      	movs	r2, #27
 8006bf0:	6879      	ldr	r1, [r7, #4]
 8006bf2:	68b8      	ldr	r0, [r7, #8]
 8006bf4:	f7ff f882 	bl	8005cfc <_SendPacket>
  RECORD_END();
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f383 8811 	msr	BASEPRI, r3
}
 8006bfe:	bf00      	nop
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	2000519c 	.word	0x2000519c
 8006c0c:	20005198 	.word	0x20005198

08006c10 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b08a      	sub	sp, #40	; 0x28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c18:	f3ef 8311 	mrs	r3, BASEPRI
 8006c1c:	f04f 0120 	mov.w	r1, #32
 8006c20:	f381 8811 	msr	BASEPRI, r1
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	4827      	ldr	r0, [pc, #156]	; (8006cc4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006c28:	f7fe ff7e 	bl	8005b28 <_PreparePacket>
 8006c2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c2e:	2280      	movs	r2, #128	; 0x80
 8006c30:	6879      	ldr	r1, [r7, #4]
 8006c32:	6938      	ldr	r0, [r7, #16]
 8006c34:	f7fe ff28 	bl	8005a88 <_EncodeStr>
 8006c38:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c3e:	2301      	movs	r3, #1
 8006c40:	623b      	str	r3, [r7, #32]
 8006c42:	e00b      	b.n	8006c5c <SEGGER_SYSVIEW_Warn+0x4c>
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	1c59      	adds	r1, r3, #1
 8006c4c:	6279      	str	r1, [r7, #36]	; 0x24
 8006c4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c52:	b2d2      	uxtb	r2, r2
 8006c54:	701a      	strb	r2, [r3, #0]
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	09db      	lsrs	r3, r3, #7
 8006c5a:	623b      	str	r3, [r7, #32]
 8006c5c:	6a3b      	ldr	r3, [r7, #32]
 8006c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c60:	d8f0      	bhi.n	8006c44 <SEGGER_SYSVIEW_Warn+0x34>
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	1c5a      	adds	r2, r3, #1
 8006c66:	627a      	str	r2, [r7, #36]	; 0x24
 8006c68:	6a3a      	ldr	r2, [r7, #32]
 8006c6a:	b2d2      	uxtb	r2, r2
 8006c6c:	701a      	strb	r2, [r3, #0]
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	61fb      	str	r3, [r7, #28]
 8006c76:	2300      	movs	r3, #0
 8006c78:	61bb      	str	r3, [r7, #24]
 8006c7a:	e00b      	b.n	8006c94 <SEGGER_SYSVIEW_Warn+0x84>
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	b2da      	uxtb	r2, r3
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	1c59      	adds	r1, r3, #1
 8006c84:	61f9      	str	r1, [r7, #28]
 8006c86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c8a:	b2d2      	uxtb	r2, r2
 8006c8c:	701a      	strb	r2, [r3, #0]
 8006c8e:	69bb      	ldr	r3, [r7, #24]
 8006c90:	09db      	lsrs	r3, r3, #7
 8006c92:	61bb      	str	r3, [r7, #24]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2b7f      	cmp	r3, #127	; 0x7f
 8006c98:	d8f0      	bhi.n	8006c7c <SEGGER_SYSVIEW_Warn+0x6c>
 8006c9a:	69fb      	ldr	r3, [r7, #28]
 8006c9c:	1c5a      	adds	r2, r3, #1
 8006c9e:	61fa      	str	r2, [r7, #28]
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006caa:	221a      	movs	r2, #26
 8006cac:	68f9      	ldr	r1, [r7, #12]
 8006cae:	6938      	ldr	r0, [r7, #16]
 8006cb0:	f7ff f824 	bl	8005cfc <_SendPacket>
  RECORD_END();
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f383 8811 	msr	BASEPRI, r3
}
 8006cba:	bf00      	nop
 8006cbc:	3728      	adds	r7, #40	; 0x28
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	2000519c 	.word	0x2000519c

08006cc8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006ccc:	4803      	ldr	r0, [pc, #12]	; (8006cdc <_cbSendSystemDesc+0x14>)
 8006cce:	f7ff fd7d 	bl	80067cc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006cd2:	4803      	ldr	r0, [pc, #12]	; (8006ce0 <_cbSendSystemDesc+0x18>)
 8006cd4:	f7ff fd7a 	bl	80067cc <SEGGER_SYSVIEW_SendSysDesc>
}
 8006cd8:	bf00      	nop
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	080070b4 	.word	0x080070b4
 8006ce0:	080070e8 	.word	0x080070e8

08006ce4 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <SEGGER_SYSVIEW_Conf+0x20>)
 8006cea:	6818      	ldr	r0, [r3, #0]
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <SEGGER_SYSVIEW_Conf+0x20>)
 8006cee:	6819      	ldr	r1, [r3, #0]
 8006cf0:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <SEGGER_SYSVIEW_Conf+0x24>)
 8006cf2:	4a06      	ldr	r2, [pc, #24]	; (8006d0c <SEGGER_SYSVIEW_Conf+0x28>)
 8006cf4:	f7ff f8e8 	bl	8005ec8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006cf8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006cfc:	f7ff f928 	bl	8005f50 <SEGGER_SYSVIEW_SetRAMBase>
}
 8006d00:	bf00      	nop
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	20000010 	.word	0x20000010
 8006d08:	08006cc9 	.word	0x08006cc9
 8006d0c:	080071cc 	.word	0x080071cc

08006d10 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8006d10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8006d16:	2300      	movs	r3, #0
 8006d18:	607b      	str	r3, [r7, #4]
 8006d1a:	e048      	b.n	8006dae <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8006d1c:	4928      	ldr	r1, [pc, #160]	; (8006dc0 <_cbSendTaskList+0xb0>)
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fd fc53 	bl	80045d8 <uxTaskGetStackHighWaterMark>
 8006d32:	4923      	ldr	r1, [pc, #140]	; (8006dc0 <_cbSendTaskList+0xb0>)
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	3310      	adds	r3, #16
 8006d42:	6018      	str	r0, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8006d44:	491e      	ldr	r1, [pc, #120]	; (8006dc0 <_cbSendTaskList+0xb0>)
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	6818      	ldr	r0, [r3, #0]
 8006d54:	491a      	ldr	r1, [pc, #104]	; (8006dc0 <_cbSendTaskList+0xb0>)
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	3304      	adds	r3, #4
 8006d64:	681c      	ldr	r4, [r3, #0]
 8006d66:	4916      	ldr	r1, [pc, #88]	; (8006dc0 <_cbSendTaskList+0xb0>)
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	440b      	add	r3, r1
 8006d74:	3308      	adds	r3, #8
 8006d76:	681d      	ldr	r5, [r3, #0]
 8006d78:	4911      	ldr	r1, [pc, #68]	; (8006dc0 <_cbSendTaskList+0xb0>)
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	330c      	adds	r3, #12
 8006d88:	681e      	ldr	r6, [r3, #0]
 8006d8a:	490d      	ldr	r1, [pc, #52]	; (8006dc0 <_cbSendTaskList+0xb0>)
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4613      	mov	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	4413      	add	r3, r2
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	440b      	add	r3, r1
 8006d98:	3310      	adds	r3, #16
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	4633      	mov	r3, r6
 8006da0:	462a      	mov	r2, r5
 8006da2:	4621      	mov	r1, r4
 8006da4:	f000 f8b4 	bl	8006f10 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	3301      	adds	r3, #1
 8006dac:	607b      	str	r3, [r7, #4]
 8006dae:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <_cbSendTaskList+0xb4>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d3b1      	bcc.n	8006d1c <_cbSendTaskList+0xc>
  }
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dc0:	20005280 	.word	0x20005280
 8006dc4:	20005320 	.word	0x20005320

08006dc8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8006dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8006dce:	f7fd f8cf 	bl	8003f70 <xTaskGetTickCountFromISR>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f04f 0400 	mov.w	r4, #0
 8006dd8:	e9c7 3400 	strd	r3, r4, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8006ddc:	e9d7 5600 	ldrd	r5, r6, [r7]
 8006de0:	462b      	mov	r3, r5
 8006de2:	4634      	mov	r4, r6
 8006de4:	f04f 0100 	mov.w	r1, #0
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	0162      	lsls	r2, r4, #5
 8006dee:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8006df2:	0159      	lsls	r1, r3, #5
 8006df4:	460b      	mov	r3, r1
 8006df6:	4614      	mov	r4, r2
 8006df8:	1b5b      	subs	r3, r3, r5
 8006dfa:	eb64 0406 	sbc.w	r4, r4, r6
 8006dfe:	f04f 0100 	mov.w	r1, #0
 8006e02:	f04f 0200 	mov.w	r2, #0
 8006e06:	00a2      	lsls	r2, r4, #2
 8006e08:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8006e0c:	0099      	lsls	r1, r3, #2
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4614      	mov	r4, r2
 8006e12:	195b      	adds	r3, r3, r5
 8006e14:	eb44 0406 	adc.w	r4, r4, r6
 8006e18:	f04f 0100 	mov.w	r1, #0
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	00e2      	lsls	r2, r4, #3
 8006e22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006e26:	00d9      	lsls	r1, r3, #3
 8006e28:	460b      	mov	r3, r1
 8006e2a:	4614      	mov	r4, r2
 8006e2c:	e9c7 3400 	strd	r3, r4, [r7]
  return Time;
 8006e30:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	4621      	mov	r1, r4
 8006e38:	370c      	adds	r7, #12
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08006e40 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af02      	add	r7, sp, #8
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8006e4e:	2205      	movs	r2, #5
 8006e50:	492b      	ldr	r1, [pc, #172]	; (8006f00 <SYSVIEW_AddTask+0xc0>)
 8006e52:	68b8      	ldr	r0, [r7, #8]
 8006e54:	f000 f8a2 	bl	8006f9c <memcmp>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d04b      	beq.n	8006ef6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8006e5e:	4b29      	ldr	r3, [pc, #164]	; (8006f04 <SYSVIEW_AddTask+0xc4>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2b07      	cmp	r3, #7
 8006e64:	d903      	bls.n	8006e6e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8006e66:	4828      	ldr	r0, [pc, #160]	; (8006f08 <SYSVIEW_AddTask+0xc8>)
 8006e68:	f7ff fed2 	bl	8006c10 <SEGGER_SYSVIEW_Warn>
    return;
 8006e6c:	e044      	b.n	8006ef8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8006e6e:	4b25      	ldr	r3, [pc, #148]	; (8006f04 <SYSVIEW_AddTask+0xc4>)
 8006e70:	681a      	ldr	r2, [r3, #0]
 8006e72:	4926      	ldr	r1, [pc, #152]	; (8006f0c <SYSVIEW_AddTask+0xcc>)
 8006e74:	4613      	mov	r3, r2
 8006e76:	009b      	lsls	r3, r3, #2
 8006e78:	4413      	add	r3, r2
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	440b      	add	r3, r1
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8006e82:	4b20      	ldr	r3, [pc, #128]	; (8006f04 <SYSVIEW_AddTask+0xc4>)
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	4921      	ldr	r1, [pc, #132]	; (8006f0c <SYSVIEW_AddTask+0xcc>)
 8006e88:	4613      	mov	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	4413      	add	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	440b      	add	r3, r1
 8006e92:	3304      	adds	r3, #4
 8006e94:	68ba      	ldr	r2, [r7, #8]
 8006e96:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8006e98:	4b1a      	ldr	r3, [pc, #104]	; (8006f04 <SYSVIEW_AddTask+0xc4>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	491b      	ldr	r1, [pc, #108]	; (8006f0c <SYSVIEW_AddTask+0xcc>)
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	009b      	lsls	r3, r3, #2
 8006ea2:	4413      	add	r3, r2
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	440b      	add	r3, r1
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	687a      	ldr	r2, [r7, #4]
 8006eac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8006eae:	4b15      	ldr	r3, [pc, #84]	; (8006f04 <SYSVIEW_AddTask+0xc4>)
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4916      	ldr	r1, [pc, #88]	; (8006f0c <SYSVIEW_AddTask+0xcc>)
 8006eb4:	4613      	mov	r3, r2
 8006eb6:	009b      	lsls	r3, r3, #2
 8006eb8:	4413      	add	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	440b      	add	r3, r1
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	683a      	ldr	r2, [r7, #0]
 8006ec2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8006ec4:	4b0f      	ldr	r3, [pc, #60]	; (8006f04 <SYSVIEW_AddTask+0xc4>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	4910      	ldr	r1, [pc, #64]	; (8006f0c <SYSVIEW_AddTask+0xcc>)
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	3310      	adds	r3, #16
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8006eda:	4b0a      	ldr	r3, [pc, #40]	; (8006f04 <SYSVIEW_AddTask+0xc4>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	4a08      	ldr	r2, [pc, #32]	; (8006f04 <SYSVIEW_AddTask+0xc4>)
 8006ee2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	687a      	ldr	r2, [r7, #4]
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 f80e 	bl	8006f10 <SYSVIEW_SendTaskInfo>
 8006ef4:	e000      	b.n	8006ef8 <SYSVIEW_AddTask+0xb8>
    return;
 8006ef6:	bf00      	nop

}
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}
 8006efe:	bf00      	nop
 8006f00:	080070f8 	.word	0x080070f8
 8006f04:	20005320 	.word	0x20005320
 8006f08:	08007100 	.word	0x08007100
 8006f0c:	20005280 	.word	0x20005280

08006f10 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b08a      	sub	sp, #40	; 0x28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]
 8006f1c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8006f1e:	f107 0314 	add.w	r3, r7, #20
 8006f22:	2214      	movs	r2, #20
 8006f24:	2100      	movs	r1, #0
 8006f26:	4618      	mov	r0, r3
 8006f28:	f000 f852 	bl	8006fd0 <memset>
  TaskInfo.TaskID     = TaskID;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8006f40:	f107 0314 	add.w	r3, r7, #20
 8006f44:	4618      	mov	r0, r3
 8006f46:	f7ff fb49 	bl	80065dc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8006f4a:	bf00      	nop
 8006f4c:	3728      	adds	r7, #40	; 0x28
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <__libc_init_array>:
 8006f54:	b570      	push	{r4, r5, r6, lr}
 8006f56:	4e0d      	ldr	r6, [pc, #52]	; (8006f8c <__libc_init_array+0x38>)
 8006f58:	4c0d      	ldr	r4, [pc, #52]	; (8006f90 <__libc_init_array+0x3c>)
 8006f5a:	1ba4      	subs	r4, r4, r6
 8006f5c:	10a4      	asrs	r4, r4, #2
 8006f5e:	2500      	movs	r5, #0
 8006f60:	42a5      	cmp	r5, r4
 8006f62:	d109      	bne.n	8006f78 <__libc_init_array+0x24>
 8006f64:	4e0b      	ldr	r6, [pc, #44]	; (8006f94 <__libc_init_array+0x40>)
 8006f66:	4c0c      	ldr	r4, [pc, #48]	; (8006f98 <__libc_init_array+0x44>)
 8006f68:	f000 f83a 	bl	8006fe0 <_init>
 8006f6c:	1ba4      	subs	r4, r4, r6
 8006f6e:	10a4      	asrs	r4, r4, #2
 8006f70:	2500      	movs	r5, #0
 8006f72:	42a5      	cmp	r5, r4
 8006f74:	d105      	bne.n	8006f82 <__libc_init_array+0x2e>
 8006f76:	bd70      	pop	{r4, r5, r6, pc}
 8006f78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f7c:	4798      	blx	r3
 8006f7e:	3501      	adds	r5, #1
 8006f80:	e7ee      	b.n	8006f60 <__libc_init_array+0xc>
 8006f82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f86:	4798      	blx	r3
 8006f88:	3501      	adds	r5, #1
 8006f8a:	e7f2      	b.n	8006f72 <__libc_init_array+0x1e>
 8006f8c:	080071dc 	.word	0x080071dc
 8006f90:	080071dc 	.word	0x080071dc
 8006f94:	080071dc 	.word	0x080071dc
 8006f98:	080071e0 	.word	0x080071e0

08006f9c <memcmp>:
 8006f9c:	b530      	push	{r4, r5, lr}
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	42a2      	cmp	r2, r4
 8006fa2:	d101      	bne.n	8006fa8 <memcmp+0xc>
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e007      	b.n	8006fb8 <memcmp+0x1c>
 8006fa8:	5d03      	ldrb	r3, [r0, r4]
 8006faa:	3401      	adds	r4, #1
 8006fac:	190d      	adds	r5, r1, r4
 8006fae:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8006fb2:	42ab      	cmp	r3, r5
 8006fb4:	d0f4      	beq.n	8006fa0 <memcmp+0x4>
 8006fb6:	1b58      	subs	r0, r3, r5
 8006fb8:	bd30      	pop	{r4, r5, pc}

08006fba <memcpy>:
 8006fba:	b510      	push	{r4, lr}
 8006fbc:	1e43      	subs	r3, r0, #1
 8006fbe:	440a      	add	r2, r1
 8006fc0:	4291      	cmp	r1, r2
 8006fc2:	d100      	bne.n	8006fc6 <memcpy+0xc>
 8006fc4:	bd10      	pop	{r4, pc}
 8006fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fce:	e7f7      	b.n	8006fc0 <memcpy+0x6>

08006fd0 <memset>:
 8006fd0:	4402      	add	r2, r0
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d100      	bne.n	8006fda <memset+0xa>
 8006fd8:	4770      	bx	lr
 8006fda:	f803 1b01 	strb.w	r1, [r3], #1
 8006fde:	e7f9      	b.n	8006fd4 <memset+0x4>

08006fe0 <_init>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	bf00      	nop
 8006fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe6:	bc08      	pop	{r3}
 8006fe8:	469e      	mov	lr, r3
 8006fea:	4770      	bx	lr

08006fec <_fini>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	bf00      	nop
 8006ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff2:	bc08      	pop	{r3}
 8006ff4:	469e      	mov	lr, r3
 8006ff6:	4770      	bx	lr
