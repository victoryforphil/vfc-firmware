
VFC-Flight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006204  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006464  08006464  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006464  08006464  00016464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800646c  0800646c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006470  08006470  00016470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006474  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e44  20000010  08006484  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e54  08006484  00024e54  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a37  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002efe  00000000  00000000  00039a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001450  00000000  00000000  0003c978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012f8  00000000  00000000  0003ddc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000031c2  00000000  00000000  0003f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000106b1  00000000  00000000  00042282  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fef72  00000000  00000000  00052933  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001518a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055b8  00000000  00000000  00151920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	080063ec 	.word	0x080063ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	080063ec 	.word	0x080063ec

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b972 	b.w	800053c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9e08      	ldr	r6, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	4688      	mov	r8, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14b      	bne.n	8000316 <__udivmoddi4+0xa6>
 800027e:	428a      	cmp	r2, r1
 8000280:	4615      	mov	r5, r2
 8000282:	d967      	bls.n	8000354 <__udivmoddi4+0xe4>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b14a      	cbz	r2, 800029e <__udivmoddi4+0x2e>
 800028a:	f1c2 0720 	rsb	r7, r2, #32
 800028e:	fa01 f302 	lsl.w	r3, r1, r2
 8000292:	fa20 f707 	lsr.w	r7, r0, r7
 8000296:	4095      	lsls	r5, r2
 8000298:	ea47 0803 	orr.w	r8, r7, r3
 800029c:	4094      	lsls	r4, r2
 800029e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a8:	fa1f fc85 	uxth.w	ip, r5
 80002ac:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002b4:	fb07 f10c 	mul.w	r1, r7, ip
 80002b8:	4299      	cmp	r1, r3
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x60>
 80002bc:	18eb      	adds	r3, r5, r3
 80002be:	f107 30ff 	add.w	r0, r7, #4294967295
 80002c2:	f080 811b 	bcs.w	80004fc <__udivmoddi4+0x28c>
 80002c6:	4299      	cmp	r1, r3
 80002c8:	f240 8118 	bls.w	80004fc <__udivmoddi4+0x28c>
 80002cc:	3f02      	subs	r7, #2
 80002ce:	442b      	add	r3, r5
 80002d0:	1a5b      	subs	r3, r3, r1
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002e4:	45a4      	cmp	ip, r4
 80002e6:	d909      	bls.n	80002fc <__udivmoddi4+0x8c>
 80002e8:	192c      	adds	r4, r5, r4
 80002ea:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x290>
 80002f2:	45a4      	cmp	ip, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x290>
 80002f8:	3802      	subs	r0, #2
 80002fa:	442c      	add	r4, r5
 80002fc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000300:	eba4 040c 	sub.w	r4, r4, ip
 8000304:	2700      	movs	r7, #0
 8000306:	b11e      	cbz	r6, 8000310 <__udivmoddi4+0xa0>
 8000308:	40d4      	lsrs	r4, r2
 800030a:	2300      	movs	r3, #0
 800030c:	e9c6 4300 	strd	r4, r3, [r6]
 8000310:	4639      	mov	r1, r7
 8000312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0xbe>
 800031a:	2e00      	cmp	r6, #0
 800031c:	f000 80eb 	beq.w	80004f6 <__udivmoddi4+0x286>
 8000320:	2700      	movs	r7, #0
 8000322:	e9c6 0100 	strd	r0, r1, [r6]
 8000326:	4638      	mov	r0, r7
 8000328:	4639      	mov	r1, r7
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f783 	clz	r7, r3
 8000332:	2f00      	cmp	r7, #0
 8000334:	d147      	bne.n	80003c6 <__udivmoddi4+0x156>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0xd0>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80fa 	bhi.w	8000534 <__udivmoddi4+0x2c4>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0303 	sbc.w	r3, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	4698      	mov	r8, r3
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e0      	beq.n	8000310 <__udivmoddi4+0xa0>
 800034e:	e9c6 4800 	strd	r4, r8, [r6]
 8000352:	e7dd      	b.n	8000310 <__udivmoddi4+0xa0>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xe8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f282 	clz	r2, r2
 800035c:	2a00      	cmp	r2, #0
 800035e:	f040 808f 	bne.w	8000480 <__udivmoddi4+0x210>
 8000362:	1b49      	subs	r1, r1, r5
 8000364:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000368:	fa1f f885 	uxth.w	r8, r5
 800036c:	2701      	movs	r7, #1
 800036e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000372:	0c23      	lsrs	r3, r4, #16
 8000374:	fb0e 111c 	mls	r1, lr, ip, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb08 f10c 	mul.w	r1, r8, ip
 8000380:	4299      	cmp	r1, r3
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x124>
 8000384:	18eb      	adds	r3, r5, r3
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x122>
 800038c:	4299      	cmp	r1, r3
 800038e:	f200 80cd 	bhi.w	800052c <__udivmoddi4+0x2bc>
 8000392:	4684      	mov	ip, r0
 8000394:	1a59      	subs	r1, r3, r1
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x14c>
 80003ac:	192c      	adds	r4, r5, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x14a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80b6 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e79f      	b.n	8000306 <__udivmoddi4+0x96>
 80003c6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ca:	40bb      	lsls	r3, r7
 80003cc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003d4:	fa01 f407 	lsl.w	r4, r1, r7
 80003d8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003dc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003e4:	4325      	orrs	r5, r4
 80003e6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ea:	0c2c      	lsrs	r4, r5, #16
 80003ec:	fb08 3319 	mls	r3, r8, r9, r3
 80003f0:	fa1f fa8e 	uxth.w	sl, lr
 80003f4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f8:	fb09 f40a 	mul.w	r4, r9, sl
 80003fc:	429c      	cmp	r4, r3
 80003fe:	fa02 f207 	lsl.w	r2, r2, r7
 8000402:	fa00 f107 	lsl.w	r1, r0, r7
 8000406:	d90b      	bls.n	8000420 <__udivmoddi4+0x1b0>
 8000408:	eb1e 0303 	adds.w	r3, lr, r3
 800040c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000410:	f080 8087 	bcs.w	8000522 <__udivmoddi4+0x2b2>
 8000414:	429c      	cmp	r4, r3
 8000416:	f240 8084 	bls.w	8000522 <__udivmoddi4+0x2b2>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4473      	add	r3, lr
 8000420:	1b1b      	subs	r3, r3, r4
 8000422:	b2ad      	uxth	r5, r5
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000430:	fb00 fa0a 	mul.w	sl, r0, sl
 8000434:	45a2      	cmp	sl, r4
 8000436:	d908      	bls.n	800044a <__udivmoddi4+0x1da>
 8000438:	eb1e 0404 	adds.w	r4, lr, r4
 800043c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000440:	d26b      	bcs.n	800051a <__udivmoddi4+0x2aa>
 8000442:	45a2      	cmp	sl, r4
 8000444:	d969      	bls.n	800051a <__udivmoddi4+0x2aa>
 8000446:	3802      	subs	r0, #2
 8000448:	4474      	add	r4, lr
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	fba0 8902 	umull	r8, r9, r0, r2
 8000452:	eba4 040a 	sub.w	r4, r4, sl
 8000456:	454c      	cmp	r4, r9
 8000458:	46c2      	mov	sl, r8
 800045a:	464b      	mov	r3, r9
 800045c:	d354      	bcc.n	8000508 <__udivmoddi4+0x298>
 800045e:	d051      	beq.n	8000504 <__udivmoddi4+0x294>
 8000460:	2e00      	cmp	r6, #0
 8000462:	d069      	beq.n	8000538 <__udivmoddi4+0x2c8>
 8000464:	ebb1 050a 	subs.w	r5, r1, sl
 8000468:	eb64 0403 	sbc.w	r4, r4, r3
 800046c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000470:	40fd      	lsrs	r5, r7
 8000472:	40fc      	lsrs	r4, r7
 8000474:	ea4c 0505 	orr.w	r5, ip, r5
 8000478:	e9c6 5400 	strd	r5, r4, [r6]
 800047c:	2700      	movs	r7, #0
 800047e:	e747      	b.n	8000310 <__udivmoddi4+0xa0>
 8000480:	f1c2 0320 	rsb	r3, r2, #32
 8000484:	fa20 f703 	lsr.w	r7, r0, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	fa01 f002 	lsl.w	r0, r1, r2
 800048e:	fa21 f303 	lsr.w	r3, r1, r3
 8000492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000496:	4338      	orrs	r0, r7
 8000498:	0c01      	lsrs	r1, r0, #16
 800049a:	fbb3 f7fe 	udiv	r7, r3, lr
 800049e:	fa1f f885 	uxth.w	r8, r5
 80004a2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004aa:	fb07 f308 	mul.w	r3, r7, r8
 80004ae:	428b      	cmp	r3, r1
 80004b0:	fa04 f402 	lsl.w	r4, r4, r2
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x256>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004bc:	d22f      	bcs.n	800051e <__udivmoddi4+0x2ae>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d92d      	bls.n	800051e <__udivmoddi4+0x2ae>
 80004c2:	3f02      	subs	r7, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1acb      	subs	r3, r1, r3
 80004c8:	b281      	uxth	r1, r0
 80004ca:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ce:	fb0e 3310 	mls	r3, lr, r0, r3
 80004d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004d6:	fb00 f308 	mul.w	r3, r0, r8
 80004da:	428b      	cmp	r3, r1
 80004dc:	d907      	bls.n	80004ee <__udivmoddi4+0x27e>
 80004de:	1869      	adds	r1, r5, r1
 80004e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004e4:	d217      	bcs.n	8000516 <__udivmoddi4+0x2a6>
 80004e6:	428b      	cmp	r3, r1
 80004e8:	d915      	bls.n	8000516 <__udivmoddi4+0x2a6>
 80004ea:	3802      	subs	r0, #2
 80004ec:	4429      	add	r1, r5
 80004ee:	1ac9      	subs	r1, r1, r3
 80004f0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004f4:	e73b      	b.n	800036e <__udivmoddi4+0xfe>
 80004f6:	4637      	mov	r7, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e709      	b.n	8000310 <__udivmoddi4+0xa0>
 80004fc:	4607      	mov	r7, r0
 80004fe:	e6e7      	b.n	80002d0 <__udivmoddi4+0x60>
 8000500:	4618      	mov	r0, r3
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x8c>
 8000504:	4541      	cmp	r1, r8
 8000506:	d2ab      	bcs.n	8000460 <__udivmoddi4+0x1f0>
 8000508:	ebb8 0a02 	subs.w	sl, r8, r2
 800050c:	eb69 020e 	sbc.w	r2, r9, lr
 8000510:	3801      	subs	r0, #1
 8000512:	4613      	mov	r3, r2
 8000514:	e7a4      	b.n	8000460 <__udivmoddi4+0x1f0>
 8000516:	4660      	mov	r0, ip
 8000518:	e7e9      	b.n	80004ee <__udivmoddi4+0x27e>
 800051a:	4618      	mov	r0, r3
 800051c:	e795      	b.n	800044a <__udivmoddi4+0x1da>
 800051e:	4667      	mov	r7, ip
 8000520:	e7d1      	b.n	80004c6 <__udivmoddi4+0x256>
 8000522:	4681      	mov	r9, r0
 8000524:	e77c      	b.n	8000420 <__udivmoddi4+0x1b0>
 8000526:	3802      	subs	r0, #2
 8000528:	442c      	add	r4, r5
 800052a:	e747      	b.n	80003bc <__udivmoddi4+0x14c>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	442b      	add	r3, r5
 8000532:	e72f      	b.n	8000394 <__udivmoddi4+0x124>
 8000534:	4638      	mov	r0, r7
 8000536:	e708      	b.n	800034a <__udivmoddi4+0xda>
 8000538:	4637      	mov	r7, r6
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0xa0>

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fecf 	bl	80012e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f82e 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 fb04 	bl	8000b58 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000550:	f000 f8c8 	bl	80006e4 <MX_CAN1_Init>
  MX_I2C1_Init();
 8000554:	f000 f8fa 	bl	800074c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000558:	f000 f938 	bl	80007cc <MX_SPI1_Init>
  MX_UART4_Init();
 800055c:	f000 f974 	bl	8000848 <MX_UART4_Init>
  MX_UART5_Init();
 8000560:	f000 f9a2 	bl	80008a8 <MX_UART5_Init>
  MX_UART7_Init();
 8000564:	f000 f9d0 	bl	8000908 <MX_UART7_Init>
  MX_UART8_Init();
 8000568:	f000 f9fe 	bl	8000968 <MX_UART8_Init>
  MX_USART1_UART_Init();
 800056c:	f000 fa2c 	bl	80009c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000570:	f000 fa5a 	bl	8000a28 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000574:	f000 fa88 	bl	8000a88 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8000578:	f000 fab6 	bl	8000ae8 <MX_USART6_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 800057c:	f000 fae4 	bl	8000b48 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000580:	f003 f976 	bl	8003870 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000584:	4a05      	ldr	r2, [pc, #20]	; (800059c <main+0x5c>)
 8000586:	2100      	movs	r1, #0
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <main+0x60>)
 800058a:	f003 f9db 	bl	8003944 <osThreadNew>
 800058e:	4602      	mov	r2, r0
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <main+0x64>)
 8000592:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000594:	f003 f9a0 	bl	80038d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000598:	e7fe      	b.n	8000598 <main+0x58>
 800059a:	bf00      	nop
 800059c:	08006428 	.word	0x08006428
 80005a0:	08000c91 	.word	0x08000c91
 80005a4:	20004934 	.word	0x20004934

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b0b8      	sub	sp, #224	; 0xe0
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f005 ff0f 	bl	80063da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005cc:	f107 0308 	add.w	r3, r7, #8
 80005d0:	2290      	movs	r2, #144	; 0x90
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f005 ff00 	bl	80063da <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005da:	4b3f      	ldr	r3, [pc, #252]	; (80006d8 <SystemClock_Config+0x130>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005de:	4a3e      	ldr	r2, [pc, #248]	; (80006d8 <SystemClock_Config+0x130>)
 80005e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e4:	6413      	str	r3, [r2, #64]	; 0x40
 80005e6:	4b3c      	ldr	r3, [pc, #240]	; (80006d8 <SystemClock_Config+0x130>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005f2:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <SystemClock_Config+0x134>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005fa:	4a38      	ldr	r2, [pc, #224]	; (80006dc <SystemClock_Config+0x134>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6013      	str	r3, [r2, #0]
 8000602:	4b36      	ldr	r3, [pc, #216]	; (80006dc <SystemClock_Config+0x134>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800060a:	603b      	str	r3, [r7, #0]
 800060c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	2300      	movs	r3, #0
 8000628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 16;
 800062c:	2310      	movs	r3, #16
 800062e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000632:	23c0      	movs	r3, #192	; 0xc0
 8000634:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800063e:	2302      	movs	r3, #2
 8000640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fb77 	bl	8001d3c <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000654:	f000 fb24 	bl	8000ca0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000676:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fe0b 	bl	8002298 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000688:	f000 fb0a 	bl	8000ca0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemClock_Config+0x138>)
 800068e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART4|RCC_PERIPHCLK_UART5
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000690:	2300      	movs	r3, #0
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000694:	2300      	movs	r3, #0
 8000696:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000698:	2300      	movs	r3, #0
 800069a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800069c:	2300      	movs	r3, #0
 800069e:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80006a0:	2300      	movs	r3, #0
 80006a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80006a4:	2300      	movs	r3, #0
 80006a6:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	66bb      	str	r3, [r7, #104]	; 0x68
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 ffbc 	bl	800263c <HAL_RCCEx_PeriphCLKConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x126>
  {
    Error_Handler();
 80006ca:	f000 fae9 	bl	8000ca0 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	37e0      	adds	r7, #224	; 0xe0
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40007000 	.word	0x40007000
 80006e0:	00207fc0 	.word	0x00207fc0

080006e4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80006e8:	4b16      	ldr	r3, [pc, #88]	; (8000744 <MX_CAN1_Init+0x60>)
 80006ea:	4a17      	ldr	r2, [pc, #92]	; (8000748 <MX_CAN1_Init+0x64>)
 80006ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80006ee:	4b15      	ldr	r3, [pc, #84]	; (8000744 <MX_CAN1_Init+0x60>)
 80006f0:	2210      	movs	r2, #16
 80006f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80006f4:	4b13      	ldr	r3, [pc, #76]	; (8000744 <MX_CAN1_Init+0x60>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_CAN1_Init+0x60>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_CAN1_Init+0x60>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_CAN1_Init+0x60>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800070c:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <MX_CAN1_Init+0x60>)
 800070e:	2200      	movs	r2, #0
 8000710:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_CAN1_Init+0x60>)
 8000714:	2200      	movs	r2, #0
 8000716:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000718:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <MX_CAN1_Init+0x60>)
 800071a:	2200      	movs	r2, #0
 800071c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_CAN1_Init+0x60>)
 8000720:	2200      	movs	r2, #0
 8000722:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	; (8000744 <MX_CAN1_Init+0x60>)
 8000726:	2200      	movs	r2, #0
 8000728:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_CAN1_Init+0x60>)
 800072c:	2200      	movs	r2, #0
 800072e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	; (8000744 <MX_CAN1_Init+0x60>)
 8000732:	f000 fe35 	bl	80013a0 <HAL_CAN_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800073c:	f000 fab0 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20004de8 	.word	0x20004de8
 8000748:	40006400 	.word	0x40006400

0800074c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <MX_I2C1_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000758:	4a1b      	ldr	r2, [pc, #108]	; (80007c8 <MX_I2C1_Init+0x7c>)
 800075a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_I2C1_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000764:	2201      	movs	r2, #1
 8000766:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_I2C1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800076e:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_I2C1_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000786:	480e      	ldr	r0, [pc, #56]	; (80007c0 <MX_I2C1_Init+0x74>)
 8000788:	f001 f9b0 	bl	8001aec <HAL_I2C_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000792:	f000 fa85 	bl	8000ca0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000796:	2100      	movs	r1, #0
 8000798:	4809      	ldr	r0, [pc, #36]	; (80007c0 <MX_I2C1_Init+0x74>)
 800079a:	f001 fa37 	bl	8001c0c <HAL_I2CEx_ConfigAnalogFilter>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 fa7c 	bl	8000ca0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a8:	2100      	movs	r1, #0
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_I2C1_Init+0x74>)
 80007ac:	f001 fa79 	bl	8001ca2 <HAL_I2CEx_ConfigDigitalFilter>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 fa73 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20004a38 	.word	0x20004a38
 80007c4:	40005400 	.word	0x40005400
 80007c8:	00303d5b 	.word	0x00303d5b

080007cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007d0:	4b1b      	ldr	r3, [pc, #108]	; (8000840 <MX_SPI1_Init+0x74>)
 80007d2:	4a1c      	ldr	r2, [pc, #112]	; (8000844 <MX_SPI1_Init+0x78>)
 80007d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <MX_SPI1_Init+0x74>)
 80007d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007de:	4b18      	ldr	r3, [pc, #96]	; (8000840 <MX_SPI1_Init+0x74>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80007e4:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_SPI1_Init+0x74>)
 80007e6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80007ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <MX_SPI1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <MX_SPI1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_SPI1_Init+0x74>)
 80007fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <MX_SPI1_Init+0x74>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_SPI1_Init+0x74>)
 8000808:	2200      	movs	r2, #0
 800080a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_SPI1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_SPI1_Init+0x74>)
 8000814:	2200      	movs	r2, #0
 8000816:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_SPI1_Init+0x74>)
 800081a:	2207      	movs	r2, #7
 800081c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_SPI1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_SPI1_Init+0x74>)
 8000826:	2208      	movs	r2, #8
 8000828:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_SPI1_Init+0x74>)
 800082c:	f002 fb2c 	bl	8002e88 <HAL_SPI_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000836:	f000 fa33 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20004d04 	.word	0x20004d04
 8000844:	40013000 	.word	0x40013000

08000848 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <MX_UART4_Init+0x58>)
 800084e:	4a15      	ldr	r2, [pc, #84]	; (80008a4 <MX_UART4_Init+0x5c>)
 8000850:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <MX_UART4_Init+0x58>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <MX_UART4_Init+0x58>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <MX_UART4_Init+0x58>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <MX_UART4_Init+0x58>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <MX_UART4_Init+0x58>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <MX_UART4_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <MX_UART4_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <MX_UART4_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000884:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <MX_UART4_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_UART4_Init+0x58>)
 800088c:	f002 fb8e 	bl	8002fac <HAL_UART_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000896:	f000 fa03 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	20004c84 	.word	0x20004c84
 80008a4:	40004c00 	.word	0x40004c00

080008a8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_UART5_Init+0x58>)
 80008ae:	4a15      	ldr	r2, [pc, #84]	; (8000904 <MX_UART5_Init+0x5c>)
 80008b0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_UART5_Init+0x58>)
 80008b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_UART5_Init+0x58>)
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_UART5_Init+0x58>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_UART5_Init+0x58>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80008cc:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_UART5_Init+0x58>)
 80008ce:	220c      	movs	r2, #12
 80008d0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d2:	4b0b      	ldr	r3, [pc, #44]	; (8000900 <MX_UART5_Init+0x58>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_UART5_Init+0x58>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008de:	4b08      	ldr	r3, [pc, #32]	; (8000900 <MX_UART5_Init+0x58>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_UART5_Init+0x58>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80008ea:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_UART5_Init+0x58>)
 80008ec:	f002 fb5e 	bl	8002fac <HAL_UART_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80008f6:	f000 f9d3 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20004a84 	.word	0x20004a84
 8000904:	40005000 	.word	0x40005000

08000908 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800090c:	4b14      	ldr	r3, [pc, #80]	; (8000960 <MX_UART7_Init+0x58>)
 800090e:	4a15      	ldr	r2, [pc, #84]	; (8000964 <MX_UART7_Init+0x5c>)
 8000910:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000912:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_UART7_Init+0x58>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_UART7_Init+0x58>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MX_UART7_Init+0x58>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_UART7_Init+0x58>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_UART7_Init+0x58>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_UART7_Init+0x58>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_UART7_Init+0x58>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_UART7_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_UART7_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_UART7_Init+0x58>)
 800094c:	f002 fb2e 	bl	8002fac <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000956:	f000 f9a3 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20004938 	.word	0x20004938
 8000964:	40007800 	.word	0x40007800

08000968 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_UART8_Init+0x58>)
 800096e:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <MX_UART8_Init+0x5c>)
 8000970:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_UART8_Init+0x58>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_UART8_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_UART8_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_UART8_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_UART8_Init+0x58>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_UART8_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_UART8_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_UART8_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_UART8_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_UART8_Init+0x58>)
 80009ac:	f002 fafe 	bl	8002fac <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_UART8_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 f973 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20004b84 	.word	0x20004b84
 80009c4:	40007c00 	.word	0x40007c00

080009c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009ce:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <MX_USART1_UART_Init+0x5c>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009fe:	4b08      	ldr	r3, [pc, #32]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a0a:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_USART1_UART_Init+0x58>)
 8000a0c:	f002 face 	bl	8002fac <HAL_UART_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a16:	f000 f943 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20004b04 	.word	0x20004b04
 8000a24:	40011000 	.word	0x40011000

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <MX_USART2_UART_Init+0x5c>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b0b      	ldr	r3, [pc, #44]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b08      	ldr	r3, [pc, #32]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <MX_USART2_UART_Init+0x58>)
 8000a6c:	f002 fa9e 	bl	8002fac <HAL_UART_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a76:	f000 f913 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	20004d68 	.word	0x20004d68
 8000a84:	40004400 	.word	0x40004400

08000a88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000a8e:	4a15      	ldr	r2, [pc, #84]	; (8000ae4 <MX_USART3_UART_Init+0x5c>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a92:	4b13      	ldr	r3, [pc, #76]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_USART3_UART_Init+0x58>)
 8000acc:	f002 fa6e 	bl	8002fac <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ad6:	f000 f8e3 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200049b8 	.word	0x200049b8
 8000ae4:	40004800 	.word	0x40004800

08000ae8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000aec:	4b14      	ldr	r3, [pc, #80]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000aee:	4a15      	ldr	r2, [pc, #84]	; (8000b44 <MX_USART6_UART_Init+0x5c>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000af2:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USART6_UART_Init+0x58>)
 8000b2c:	f002 fa3e 	bl	8002fac <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000b36:	f000 f8b3 	bl	8000ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	20004c04 	.word	0x20004c04
 8000b44:	40011400 	.word	0x40011400

08000b48 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
	...

08000b58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08e      	sub	sp, #56	; 0x38
 8000b5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b6e:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a44      	ldr	r2, [pc, #272]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b74:	f043 0320 	orr.w	r3, r3, #32
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0320 	and.w	r3, r3, #32
 8000b82:	623b      	str	r3, [r7, #32]
 8000b84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b86:	4b3f      	ldr	r3, [pc, #252]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a3e      	ldr	r2, [pc, #248]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b3c      	ldr	r3, [pc, #240]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b9a:	61fb      	str	r3, [r7, #28]
 8000b9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	4b39      	ldr	r3, [pc, #228]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a38      	ldr	r2, [pc, #224]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bb6:	4b33      	ldr	r3, [pc, #204]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a32      	ldr	r2, [pc, #200]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b30      	ldr	r3, [pc, #192]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a2c      	ldr	r2, [pc, #176]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bd4:	f043 0302 	orr.w	r3, r3, #2
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a20      	ldr	r2, [pc, #128]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a1a      	ldr	r2, [pc, #104]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_GPIO_Init+0x12c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, Status_Erro_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c2e:	2200      	movs	r2, #0
 8000c30:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000c34:	4814      	ldr	r0, [pc, #80]	; (8000c88 <MX_GPIO_Init+0x130>)
 8000c36:	f000 ff3f 	bl	8001ab8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);

  /*Configure GPIO pins : Status_Erro_Pin PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11 */
  GPIO_InitStruct.Pin = Status_Erro_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000c3a:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c40:	2301      	movs	r3, #1
 8000c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_GPIO_Init+0x130>)
 8000c54:	f000 fd86 	bl	8001764 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000c58:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c6a:	230a      	movs	r3, #10
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_GPIO_Init+0x134>)
 8000c76:	f000 fd75 	bl	8001764 <HAL_GPIO_Init>

}
 8000c7a:	bf00      	nop
 8000c7c:	3738      	adds	r7, #56	; 0x38
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40021800 	.word	0x40021800
 8000c8c:	40020000 	.word	0x40020000

08000c90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f002 fef9 	bl	8003a90 <osDelay>
 8000c9e:	e7fb      	b.n	8000c98 <StartDefaultTask+0x8>

08000ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
	...

08000cb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a17      	ldr	r2, [pc, #92]	; (8000d74 <HAL_CAN_MspInit+0x7c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d127      	bne.n	8000d6a <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d1a:	4b17      	ldr	r3, [pc, #92]	; (8000d78 <HAL_CAN_MspInit+0x80>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <HAL_CAN_MspInit+0x80>)
 8000d20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d24:	6413      	str	r3, [r2, #64]	; 0x40
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <HAL_CAN_MspInit+0x80>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d2e:	613b      	str	r3, [r7, #16]
 8000d30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <HAL_CAN_MspInit+0x80>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a10      	ldr	r2, [pc, #64]	; (8000d78 <HAL_CAN_MspInit+0x80>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <HAL_CAN_MspInit+0x80>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d5a:	2309      	movs	r3, #9
 8000d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5e:	f107 0314 	add.w	r3, r7, #20
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <HAL_CAN_MspInit+0x84>)
 8000d66:	f000 fcfd 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	3728      	adds	r7, #40	; 0x28
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40006400 	.word	0x40006400
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020c00 	.word	0x40020c00

08000d80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	; 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a17      	ldr	r2, [pc, #92]	; (8000dfc <HAL_I2C_MspInit+0x7c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d127      	bne.n	8000df2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a16      	ldr	r2, [pc, #88]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000da8:	f043 0302 	orr.w	r3, r3, #2
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0302 	and.w	r3, r3, #2
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dba:	23c0      	movs	r3, #192	; 0xc0
 8000dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dbe:	2312      	movs	r3, #18
 8000dc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	480b      	ldr	r0, [pc, #44]	; (8000e04 <HAL_I2C_MspInit+0x84>)
 8000dd6:	f000 fcc5 	bl	8001764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_I2C_MspInit+0x80>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	; 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40005400 	.word	0x40005400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400

08000e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a17      	ldr	r2, [pc, #92]	; (8000e84 <HAL_SPI_MspInit+0x7c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d127      	bne.n	8000e7a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a16      	ldr	r2, [pc, #88]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e48:	f043 0301 	orr.w	r3, r3, #1
 8000e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <HAL_SPI_MspInit+0x80>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e5a:	23e0      	movs	r3, #224	; 0xe0
 8000e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6e:	f107 0314 	add.w	r3, r7, #20
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_SPI_MspInit+0x84>)
 8000e76:	f000 fc75 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40013000 	.word	0x40013000
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b098      	sub	sp, #96	; 0x60
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a98      	ldr	r2, [pc, #608]	; (8001110 <HAL_UART_MspInit+0x280>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d129      	bne.n	8000f06 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000eb2:	4b98      	ldr	r3, [pc, #608]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	4a97      	ldr	r2, [pc, #604]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ebe:	4b95      	ldr	r3, [pc, #596]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ec6:	64bb      	str	r3, [r7, #72]	; 0x48
 8000ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	4b92      	ldr	r3, [pc, #584]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a91      	ldr	r2, [pc, #580]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000ed0:	f043 0304 	orr.w	r3, r3, #4
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b8f      	ldr	r3, [pc, #572]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0304 	and.w	r3, r3, #4
 8000ede:	647b      	str	r3, [r7, #68]	; 0x44
 8000ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ee2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000efc:	4619      	mov	r1, r3
 8000efe:	4886      	ldr	r0, [pc, #536]	; (8001118 <HAL_UART_MspInit+0x288>)
 8000f00:	f000 fc30 	bl	8001764 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000f04:	e17a      	b.n	80011fc <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==UART5)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a84      	ldr	r2, [pc, #528]	; (800111c <HAL_UART_MspInit+0x28c>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d129      	bne.n	8000f64 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000f10:	4b80      	ldr	r3, [pc, #512]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f14:	4a7f      	ldr	r2, [pc, #508]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f1c:	4b7d      	ldr	r3, [pc, #500]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f24:	643b      	str	r3, [r7, #64]	; 0x40
 8000f26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b7a      	ldr	r3, [pc, #488]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2c:	4a79      	ldr	r2, [pc, #484]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f2e:	f043 0302 	orr.w	r3, r3, #2
 8000f32:	6313      	str	r3, [r2, #48]	; 0x30
 8000f34:	4b77      	ldr	r3, [pc, #476]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f40:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f44:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000f52:	2308      	movs	r3, #8
 8000f54:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4870      	ldr	r0, [pc, #448]	; (8001120 <HAL_UART_MspInit+0x290>)
 8000f5e:	f000 fc01 	bl	8001764 <HAL_GPIO_Init>
}
 8000f62:	e14b      	b.n	80011fc <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==UART7)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a6e      	ldr	r2, [pc, #440]	; (8001124 <HAL_UART_MspInit+0x294>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d128      	bne.n	8000fc0 <HAL_UART_MspInit+0x130>
    __HAL_RCC_UART7_CLK_ENABLE();
 8000f6e:	4b69      	ldr	r3, [pc, #420]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	4a68      	ldr	r2, [pc, #416]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
 8000f7a:	4b66      	ldr	r3, [pc, #408]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f86:	4b63      	ldr	r3, [pc, #396]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a62      	ldr	r2, [pc, #392]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f8c:	f043 0320 	orr.w	r3, r3, #32
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b60      	ldr	r3, [pc, #384]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0320 	and.w	r3, r3, #32
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8000f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f9e:	23c0      	movs	r3, #192	; 0xc0
 8000fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000faa:	2303      	movs	r3, #3
 8000fac:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8000fae:	2308      	movs	r3, #8
 8000fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fb2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	485b      	ldr	r0, [pc, #364]	; (8001128 <HAL_UART_MspInit+0x298>)
 8000fba:	f000 fbd3 	bl	8001764 <HAL_GPIO_Init>
}
 8000fbe:	e11d      	b.n	80011fc <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==UART8)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a59      	ldr	r2, [pc, #356]	; (800112c <HAL_UART_MspInit+0x29c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d128      	bne.n	800101c <HAL_UART_MspInit+0x18c>
    __HAL_RCC_UART8_CLK_ENABLE();
 8000fca:	4b52      	ldr	r3, [pc, #328]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a51      	ldr	r2, [pc, #324]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000fd0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd6:	4b4f      	ldr	r3, [pc, #316]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000fde:	633b      	str	r3, [r7, #48]	; 0x30
 8000fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fe2:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a4b      	ldr	r2, [pc, #300]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000fe8:	f043 0310 	orr.w	r3, r3, #16
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <HAL_UART_MspInit+0x284>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0310 	and.w	r3, r3, #16
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800100a:	2308      	movs	r3, #8
 800100c:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800100e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001012:	4619      	mov	r1, r3
 8001014:	4846      	ldr	r0, [pc, #280]	; (8001130 <HAL_UART_MspInit+0x2a0>)
 8001016:	f000 fba5 	bl	8001764 <HAL_GPIO_Init>
}
 800101a:	e0ef      	b.n	80011fc <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==USART1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a44      	ldr	r2, [pc, #272]	; (8001134 <HAL_UART_MspInit+0x2a4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d129      	bne.n	800107a <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001026:	4b3b      	ldr	r3, [pc, #236]	; (8001114 <HAL_UART_MspInit+0x284>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102a:	4a3a      	ldr	r2, [pc, #232]	; (8001114 <HAL_UART_MspInit+0x284>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6453      	str	r3, [r2, #68]	; 0x44
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <HAL_UART_MspInit+0x284>)
 8001034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
 800103c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4b35      	ldr	r3, [pc, #212]	; (8001114 <HAL_UART_MspInit+0x284>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a34      	ldr	r2, [pc, #208]	; (8001114 <HAL_UART_MspInit+0x284>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b32      	ldr	r3, [pc, #200]	; (8001114 <HAL_UART_MspInit+0x284>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001056:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105c:	2302      	movs	r3, #2
 800105e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001068:	2304      	movs	r3, #4
 800106a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001070:	4619      	mov	r1, r3
 8001072:	482b      	ldr	r0, [pc, #172]	; (8001120 <HAL_UART_MspInit+0x290>)
 8001074:	f000 fb76 	bl	8001764 <HAL_GPIO_Init>
}
 8001078:	e0c0      	b.n	80011fc <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==USART2)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a2e      	ldr	r2, [pc, #184]	; (8001138 <HAL_UART_MspInit+0x2a8>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d15f      	bne.n	8001144 <HAL_UART_MspInit+0x2b4>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001084:	4b23      	ldr	r3, [pc, #140]	; (8001114 <HAL_UART_MspInit+0x284>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001088:	4a22      	ldr	r2, [pc, #136]	; (8001114 <HAL_UART_MspInit+0x284>)
 800108a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800108e:	6413      	str	r3, [r2, #64]	; 0x40
 8001090:	4b20      	ldr	r3, [pc, #128]	; (8001114 <HAL_UART_MspInit+0x284>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001098:	623b      	str	r3, [r7, #32]
 800109a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_UART_MspInit+0x284>)
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_UART_MspInit+0x284>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6313      	str	r3, [r2, #48]	; 0x30
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_UART_MspInit+0x284>)
 80010aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	61fb      	str	r3, [r7, #28]
 80010b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_UART_MspInit+0x284>)
 80010b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b8:	4a16      	ldr	r2, [pc, #88]	; (8001114 <HAL_UART_MspInit+0x284>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6313      	str	r3, [r2, #48]	; 0x30
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_UART_MspInit+0x284>)
 80010c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010cc:	2308      	movs	r3, #8
 80010ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d0:	2302      	movs	r3, #2
 80010d2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d8:	2303      	movs	r3, #3
 80010da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010dc:	2307      	movs	r3, #7
 80010de:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010e4:	4619      	mov	r1, r3
 80010e6:	4815      	ldr	r0, [pc, #84]	; (800113c <HAL_UART_MspInit+0x2ac>)
 80010e8:	f000 fb3c 	bl	8001764 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010ec:	2320      	movs	r3, #32
 80010ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	2302      	movs	r3, #2
 80010f2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f8:	2303      	movs	r3, #3
 80010fa:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010fc:	2307      	movs	r3, #7
 80010fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001100:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001104:	4619      	mov	r1, r3
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <HAL_UART_MspInit+0x2b0>)
 8001108:	f000 fb2c 	bl	8001764 <HAL_GPIO_Init>
}
 800110c:	e076      	b.n	80011fc <HAL_UART_MspInit+0x36c>
 800110e:	bf00      	nop
 8001110:	40004c00 	.word	0x40004c00
 8001114:	40023800 	.word	0x40023800
 8001118:	40020800 	.word	0x40020800
 800111c:	40005000 	.word	0x40005000
 8001120:	40020400 	.word	0x40020400
 8001124:	40007800 	.word	0x40007800
 8001128:	40021400 	.word	0x40021400
 800112c:	40007c00 	.word	0x40007c00
 8001130:	40021000 	.word	0x40021000
 8001134:	40011000 	.word	0x40011000
 8001138:	40004400 	.word	0x40004400
 800113c:	40020000 	.word	0x40020000
 8001140:	40020c00 	.word	0x40020c00
  else if(huart->Instance==USART3)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a2e      	ldr	r2, [pc, #184]	; (8001204 <HAL_UART_MspInit+0x374>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d129      	bne.n	80011a2 <HAL_UART_MspInit+0x312>
    __HAL_RCC_USART3_CLK_ENABLE();
 800114e:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_UART_MspInit+0x378>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <HAL_UART_MspInit+0x378>)
 8001154:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001158:	6413      	str	r3, [r2, #64]	; 0x40
 800115a:	4b2b      	ldr	r3, [pc, #172]	; (8001208 <HAL_UART_MspInit+0x378>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <HAL_UART_MspInit+0x378>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a27      	ldr	r2, [pc, #156]	; (8001208 <HAL_UART_MspInit+0x378>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <HAL_UART_MspInit+0x378>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800117e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001182:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001190:	2307      	movs	r3, #7
 8001192:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001198:	4619      	mov	r1, r3
 800119a:	481c      	ldr	r0, [pc, #112]	; (800120c <HAL_UART_MspInit+0x37c>)
 800119c:	f000 fae2 	bl	8001764 <HAL_GPIO_Init>
}
 80011a0:	e02c      	b.n	80011fc <HAL_UART_MspInit+0x36c>
  else if(huart->Instance==USART6)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a1a      	ldr	r2, [pc, #104]	; (8001210 <HAL_UART_MspInit+0x380>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d127      	bne.n	80011fc <HAL_UART_MspInit+0x36c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80011ac:	4b16      	ldr	r3, [pc, #88]	; (8001208 <HAL_UART_MspInit+0x378>)
 80011ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b0:	4a15      	ldr	r2, [pc, #84]	; (8001208 <HAL_UART_MspInit+0x378>)
 80011b2:	f043 0320 	orr.w	r3, r3, #32
 80011b6:	6453      	str	r3, [r2, #68]	; 0x44
 80011b8:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_UART_MspInit+0x378>)
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	f003 0320 	and.w	r3, r3, #32
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c4:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_UART_MspInit+0x378>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c8:	4a0f      	ldr	r2, [pc, #60]	; (8001208 <HAL_UART_MspInit+0x378>)
 80011ca:	f043 0304 	orr.w	r3, r3, #4
 80011ce:	6313      	str	r3, [r2, #48]	; 0x30
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_UART_MspInit+0x378>)
 80011d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d4:	f003 0304 	and.w	r3, r3, #4
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011dc:	23c0      	movs	r3, #192	; 0xc0
 80011de:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e8:	2303      	movs	r3, #3
 80011ea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80011ec:	2308      	movs	r3, #8
 80011ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80011f4:	4619      	mov	r1, r3
 80011f6:	4807      	ldr	r0, [pc, #28]	; (8001214 <HAL_UART_MspInit+0x384>)
 80011f8:	f000 fab4 	bl	8001764 <HAL_GPIO_Init>
}
 80011fc:	bf00      	nop
 80011fe:	3760      	adds	r7, #96	; 0x60
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40004800 	.word	0x40004800
 8001208:	40023800 	.word	0x40023800
 800120c:	40020400 	.word	0x40020400
 8001210:	40011400 	.word	0x40011400
 8001214:	40020800 	.word	0x40020800

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122a:	e7fe      	b.n	800122a <HardFault_Handler+0x4>

0800122c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <MemManage_Handler+0x4>

08001232 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <UsageFault_Handler+0x4>

0800123e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001250:	f000 f886 	bl	8001360 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001254:	f004 f850 	bl	80052f8 <xTaskGetSchedulerState>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d001      	beq.n	8001262 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800125e:	f004 fe1b 	bl	8005e98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800126c:	4b08      	ldr	r3, [pc, #32]	; (8001290 <SystemInit+0x28>)
 800126e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <SystemInit+0x28>)
 8001274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <SystemInit+0x28>)
 800127e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001282:	609a      	str	r2, [r3, #8]
#endif
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001298:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800129a:	e003      	b.n	80012a4 <LoopCopyDataInit>

0800129c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800129e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012a2:	3104      	adds	r1, #4

080012a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012a4:	480b      	ldr	r0, [pc, #44]	; (80012d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012ac:	d3f6      	bcc.n	800129c <CopyDataInit>
  ldr  r2, =_sbss
 80012ae:	4a0b      	ldr	r2, [pc, #44]	; (80012dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012b0:	e002      	b.n	80012b8 <LoopFillZerobss>

080012b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012b4:	f842 3b04 	str.w	r3, [r2], #4

080012b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012b8:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012bc:	d3f9      	bcc.n	80012b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012be:	f7ff ffd3 	bl	8001268 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012c2:	f005 f85b 	bl	800637c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c6:	f7ff f93b 	bl	8000540 <main>
  bx  lr    
 80012ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012cc:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80012d0:	08006474 	.word	0x08006474
  ldr  r0, =_sdata
 80012d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012d8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80012dc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80012e0:	20004e54 	.word	0x20004e54

080012e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC_IRQHandler>

080012e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ea:	2003      	movs	r0, #3
 80012ec:	f000 fa06 	bl	80016fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f0:	2000      	movs	r0, #0
 80012f2:	f000 f805 	bl	8001300 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80012f6:	f7ff fcdb 	bl	8000cb0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	bd80      	pop	{r7, pc}

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <HAL_InitTick+0x54>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <HAL_InitTick+0x58>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4619      	mov	r1, r3
 8001312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001316:	fbb3 f3f1 	udiv	r3, r3, r1
 800131a:	fbb2 f3f3 	udiv	r3, r2, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f000 fa13 	bl	800174a <HAL_SYSTICK_Config>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e00e      	b.n	800134c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b0f      	cmp	r3, #15
 8001332:	d80a      	bhi.n	800134a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001334:	2200      	movs	r2, #0
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f000 f9e9 	bl	8001712 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001340:	4a06      	ldr	r2, [pc, #24]	; (800135c <HAL_InitTick+0x5c>)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e000      	b.n	800134c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000000 	.word	0x20000000
 8001358:	20000008 	.word	0x20000008
 800135c:	20000004 	.word	0x20000004

08001360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x20>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	461a      	mov	r2, r3
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <HAL_IncTick+0x24>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4413      	add	r3, r2
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <HAL_IncTick+0x24>)
 8001372:	6013      	str	r3, [r2, #0]
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000008 	.word	0x20000008
 8001384:	20004e10 	.word	0x20004e10

08001388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return uwTick;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <HAL_GetTick+0x14>)
 800138e:	681b      	ldr	r3, [r3, #0]
}
 8001390:	4618      	mov	r0, r3
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20004e10 	.word	0x20004e10

080013a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e0ed      	b.n	800158e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d102      	bne.n	80013c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fc9a 	bl	8000cf8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f022 0202 	bic.w	r2, r2, #2
 80013d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013d4:	f7ff ffd8 	bl	8001388 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013da:	e012      	b.n	8001402 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013dc:	f7ff ffd4 	bl	8001388 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b0a      	cmp	r3, #10
 80013e8:	d90b      	bls.n	8001402 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2205      	movs	r2, #5
 80013fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0c5      	b.n	800158e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f003 0302 	and.w	r3, r3, #2
 800140c:	2b00      	cmp	r3, #0
 800140e:	d1e5      	bne.n	80013dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0201 	orr.w	r2, r2, #1
 800141e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001420:	f7ff ffb2 	bl	8001388 <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001426:	e012      	b.n	800144e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001428:	f7ff ffae 	bl	8001388 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b0a      	cmp	r3, #10
 8001434:	d90b      	bls.n	800144e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800143a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2205      	movs	r2, #5
 8001446:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e09f      	b.n	800158e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	d0e5      	beq.n	8001428 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7e1b      	ldrb	r3, [r3, #24]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e007      	b.n	8001486 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7e5b      	ldrb	r3, [r3, #25]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d108      	bne.n	80014a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e007      	b.n	80014b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80014ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7e9b      	ldrb	r3, [r3, #26]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0220 	orr.w	r2, r2, #32
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e007      	b.n	80014da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0220 	bic.w	r2, r2, #32
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7edb      	ldrb	r3, [r3, #27]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d108      	bne.n	80014f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 0210 	bic.w	r2, r2, #16
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	e007      	b.n	8001504 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 0210 	orr.w	r2, r2, #16
 8001502:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	7f1b      	ldrb	r3, [r3, #28]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d108      	bne.n	800151e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f042 0208 	orr.w	r2, r2, #8
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	e007      	b.n	800152e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f022 0208 	bic.w	r2, r2, #8
 800152c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	7f5b      	ldrb	r3, [r3, #29]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d108      	bne.n	8001548 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0204 	orr.w	r2, r2, #4
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	e007      	b.n	8001558 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0204 	bic.w	r2, r2, #4
 8001556:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	691b      	ldr	r3, [r3, #16]
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	695b      	ldr	r3, [r3, #20]
 800156c:	ea42 0103 	orr.w	r1, r2, r3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
	...

08001598 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001598:	b480      	push	{r7}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <__NVIC_SetPriorityGrouping+0x40>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b4:	4013      	ands	r3, r2
 80015b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015c0:	4b06      	ldr	r3, [pc, #24]	; (80015dc <__NVIC_SetPriorityGrouping+0x44>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x40>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00
 80015dc:	05fa0000 	.word	0x05fa0000

080015e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <__NVIC_GetPriorityGrouping+0x18>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0a1b      	lsrs	r3, r3, #8
 80015ea:	f003 0307 	and.w	r3, r3, #7
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	6039      	str	r1, [r7, #0]
 8001606:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160c:	2b00      	cmp	r3, #0
 800160e:	db0a      	blt.n	8001626 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	b2da      	uxtb	r2, r3
 8001614:	490c      	ldr	r1, [pc, #48]	; (8001648 <__NVIC_SetPriority+0x4c>)
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	0112      	lsls	r2, r2, #4
 800161c:	b2d2      	uxtb	r2, r2
 800161e:	440b      	add	r3, r1
 8001620:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001624:	e00a      	b.n	800163c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <__NVIC_SetPriority+0x50>)
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	f003 030f 	and.w	r3, r3, #15
 8001632:	3b04      	subs	r3, #4
 8001634:	0112      	lsls	r2, r2, #4
 8001636:	b2d2      	uxtb	r2, r2
 8001638:	440b      	add	r3, r1
 800163a:	761a      	strb	r2, [r3, #24]
}
 800163c:	bf00      	nop
 800163e:	370c      	adds	r7, #12
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000e100 	.word	0xe000e100
 800164c:	e000ed00 	.word	0xe000ed00

08001650 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001650:	b480      	push	{r7}
 8001652:	b089      	sub	sp, #36	; 0x24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	f003 0307 	and.w	r3, r3, #7
 8001662:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f1c3 0307 	rsb	r3, r3, #7
 800166a:	2b04      	cmp	r3, #4
 800166c:	bf28      	it	cs
 800166e:	2304      	movcs	r3, #4
 8001670:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3304      	adds	r3, #4
 8001676:	2b06      	cmp	r3, #6
 8001678:	d902      	bls.n	8001680 <NVIC_EncodePriority+0x30>
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3b03      	subs	r3, #3
 800167e:	e000      	b.n	8001682 <NVIC_EncodePriority+0x32>
 8001680:	2300      	movs	r3, #0
 8001682:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	f04f 32ff 	mov.w	r2, #4294967295
 8001688:	69bb      	ldr	r3, [r7, #24]
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43da      	mvns	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001698:	f04f 31ff 	mov.w	r1, #4294967295
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa01 f303 	lsl.w	r3, r1, r3
 80016a2:	43d9      	mvns	r1, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	4313      	orrs	r3, r2
         );
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c8:	d301      	bcc.n	80016ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00f      	b.n	80016ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <SysTick_Config+0x40>)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016d6:	210f      	movs	r1, #15
 80016d8:	f04f 30ff 	mov.w	r0, #4294967295
 80016dc:	f7ff ff8e 	bl	80015fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <SysTick_Config+0x40>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016e6:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <SysTick_Config+0x40>)
 80016e8:	2207      	movs	r2, #7
 80016ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	e000e010 	.word	0xe000e010

080016fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	f7ff ff47 	bl	8001598 <__NVIC_SetPriorityGrouping>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001712:	b580      	push	{r7, lr}
 8001714:	b086      	sub	sp, #24
 8001716:	af00      	add	r7, sp, #0
 8001718:	4603      	mov	r3, r0
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001724:	f7ff ff5c 	bl	80015e0 <__NVIC_GetPriorityGrouping>
 8001728:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	68b9      	ldr	r1, [r7, #8]
 800172e:	6978      	ldr	r0, [r7, #20]
 8001730:	f7ff ff8e 	bl	8001650 <NVIC_EncodePriority>
 8001734:	4602      	mov	r2, r0
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff5d 	bl	80015fc <__NVIC_SetPriority>
}
 8001742:	bf00      	nop
 8001744:	3718      	adds	r7, #24
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffb0 	bl	80016b8 <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	e175      	b.n	8001a70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001784:	2201      	movs	r2, #1
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4013      	ands	r3, r2
 8001796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	429a      	cmp	r2, r3
 800179e:	f040 8164 	bne.w	8001a6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d00b      	beq.n	80017c2 <HAL_GPIO_Init+0x5e>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d007      	beq.n	80017c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b6:	2b11      	cmp	r3, #17
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b12      	cmp	r3, #18
 80017c0:	d130      	bne.n	8001824 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	2203      	movs	r2, #3
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43db      	mvns	r3, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4013      	ands	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	69ba      	ldr	r2, [r7, #24]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69ba      	ldr	r2, [r7, #24]
 80017f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017f8:	2201      	movs	r2, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	4013      	ands	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 0201 	and.w	r2, r3, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	4313      	orrs	r3, r2
 800181c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	2b02      	cmp	r3, #2
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x100>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b12      	cmp	r3, #18
 8001862:	d123      	bne.n	80018ac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	08da      	lsrs	r2, r3, #3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3208      	adds	r2, #8
 800186c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	220f      	movs	r2, #15
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	691a      	ldr	r2, [r3, #16]
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	69b9      	ldr	r1, [r7, #24]
 80018a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	2203      	movs	r2, #3
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	4013      	ands	r3, r2
 80018c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	fa02 f303 	lsl.w	r3, r2, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4313      	orrs	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80be 	beq.w	8001a6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b65      	ldr	r3, [pc, #404]	; (8001a84 <HAL_GPIO_Init+0x320>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a64      	ldr	r2, [pc, #400]	; (8001a84 <HAL_GPIO_Init+0x320>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b62      	ldr	r3, [pc, #392]	; (8001a84 <HAL_GPIO_Init+0x320>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001906:	4a60      	ldr	r2, [pc, #384]	; (8001a88 <HAL_GPIO_Init+0x324>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a57      	ldr	r2, [pc, #348]	; (8001a8c <HAL_GPIO_Init+0x328>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d037      	beq.n	80019a2 <HAL_GPIO_Init+0x23e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a56      	ldr	r2, [pc, #344]	; (8001a90 <HAL_GPIO_Init+0x32c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d031      	beq.n	800199e <HAL_GPIO_Init+0x23a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a55      	ldr	r2, [pc, #340]	; (8001a94 <HAL_GPIO_Init+0x330>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d02b      	beq.n	800199a <HAL_GPIO_Init+0x236>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a54      	ldr	r2, [pc, #336]	; (8001a98 <HAL_GPIO_Init+0x334>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d025      	beq.n	8001996 <HAL_GPIO_Init+0x232>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a53      	ldr	r2, [pc, #332]	; (8001a9c <HAL_GPIO_Init+0x338>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d01f      	beq.n	8001992 <HAL_GPIO_Init+0x22e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a52      	ldr	r2, [pc, #328]	; (8001aa0 <HAL_GPIO_Init+0x33c>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d019      	beq.n	800198e <HAL_GPIO_Init+0x22a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a51      	ldr	r2, [pc, #324]	; (8001aa4 <HAL_GPIO_Init+0x340>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d013      	beq.n	800198a <HAL_GPIO_Init+0x226>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a50      	ldr	r2, [pc, #320]	; (8001aa8 <HAL_GPIO_Init+0x344>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d00d      	beq.n	8001986 <HAL_GPIO_Init+0x222>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4f      	ldr	r2, [pc, #316]	; (8001aac <HAL_GPIO_Init+0x348>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d007      	beq.n	8001982 <HAL_GPIO_Init+0x21e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4e      	ldr	r2, [pc, #312]	; (8001ab0 <HAL_GPIO_Init+0x34c>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d101      	bne.n	800197e <HAL_GPIO_Init+0x21a>
 800197a:	2309      	movs	r3, #9
 800197c:	e012      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800197e:	230a      	movs	r3, #10
 8001980:	e010      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001982:	2308      	movs	r3, #8
 8001984:	e00e      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001986:	2307      	movs	r3, #7
 8001988:	e00c      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800198a:	2306      	movs	r3, #6
 800198c:	e00a      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800198e:	2305      	movs	r3, #5
 8001990:	e008      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001992:	2304      	movs	r3, #4
 8001994:	e006      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 8001996:	2303      	movs	r3, #3
 8001998:	e004      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800199a:	2302      	movs	r3, #2
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <HAL_GPIO_Init+0x240>
 80019a2:	2300      	movs	r3, #0
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f002 0203 	and.w	r2, r2, #3
 80019aa:	0092      	lsls	r2, r2, #2
 80019ac:	4093      	lsls	r3, r2
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80019b4:	4934      	ldr	r1, [pc, #208]	; (8001a88 <HAL_GPIO_Init+0x324>)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	3302      	adds	r3, #2
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c2:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <HAL_GPIO_Init+0x350>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	43db      	mvns	r3, r3
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	4013      	ands	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e6:	4a33      	ldr	r2, [pc, #204]	; (8001ab4 <HAL_GPIO_Init+0x350>)
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019ec:	4b31      	ldr	r3, [pc, #196]	; (8001ab4 <HAL_GPIO_Init+0x350>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d003      	beq.n	8001a10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a10:	4a28      	ldr	r2, [pc, #160]	; (8001ab4 <HAL_GPIO_Init+0x350>)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a16:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_GPIO_Init+0x350>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a3a:	4a1e      	ldr	r2, [pc, #120]	; (8001ab4 <HAL_GPIO_Init+0x350>)
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a40:	4b1c      	ldr	r3, [pc, #112]	; (8001ab4 <HAL_GPIO_Init+0x350>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d003      	beq.n	8001a64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a64:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <HAL_GPIO_Init+0x350>)
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	2b0f      	cmp	r3, #15
 8001a74:	f67f ae86 	bls.w	8001784 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3724      	adds	r7, #36	; 0x24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	40023800 	.word	0x40023800
 8001a88:	40013800 	.word	0x40013800
 8001a8c:	40020000 	.word	0x40020000
 8001a90:	40020400 	.word	0x40020400
 8001a94:	40020800 	.word	0x40020800
 8001a98:	40020c00 	.word	0x40020c00
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40021400 	.word	0x40021400
 8001aa4:	40021800 	.word	0x40021800
 8001aa8:	40021c00 	.word	0x40021c00
 8001aac:	40022000 	.word	0x40022000
 8001ab0:	40022400 	.word	0x40022400
 8001ab4:	40013c00 	.word	0x40013c00

08001ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ac8:	787b      	ldrb	r3, [r7, #1]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ace:	887a      	ldrh	r2, [r7, #2]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ad4:	e003      	b.n	8001ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	041a      	lsls	r2, r3, #16
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	619a      	str	r2, [r3, #24]
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
	...

08001aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e07f      	b.n	8001bfe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d106      	bne.n	8001b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff f934 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2224      	movs	r2, #36	; 0x24
 8001b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b3c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b4c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b62:	609a      	str	r2, [r3, #8]
 8001b64:	e006      	b.n	8001b74 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b72:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d104      	bne.n	8001b86 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b1d      	ldr	r3, [pc, #116]	; (8001c08 <HAL_I2C_Init+0x11c>)
 8001b92:	430b      	orrs	r3, r1
 8001b94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ba4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	691a      	ldr	r2, [r3, #16]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	695b      	ldr	r3, [r3, #20]
 8001bae:	ea42 0103 	orr.w	r1, r2, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	021a      	lsls	r2, r3, #8
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69d9      	ldr	r1, [r3, #28]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a1a      	ldr	r2, [r3, #32]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	681a      	ldr	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f042 0201 	orr.w	r2, r2, #1
 8001bde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	02008000 	.word	0x02008000

08001c0c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d138      	bne.n	8001c94 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e032      	b.n	8001c96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2224      	movs	r2, #36	; 0x24
 8001c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 0201 	bic.w	r2, r2, #1
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c5e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6819      	ldr	r1, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2220      	movs	r2, #32
 8001c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	e000      	b.n	8001c96 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c94:	2302      	movs	r3, #2
  }
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b20      	cmp	r3, #32
 8001cb6:	d139      	bne.n	8001d2c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e033      	b.n	8001d2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2224      	movs	r2, #36	; 0x24
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f022 0201 	bic.w	r2, r2, #1
 8001ce4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cf4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	68fa      	ldr	r2, [r7, #12]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f042 0201 	orr.w	r2, r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	e000      	b.n	8001d2e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d2c:	2302      	movs	r3, #2
  }
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d44:	2300      	movs	r3, #0
 8001d46:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e29b      	b.n	800228a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8087 	beq.w	8001e6e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d60:	4b96      	ldr	r3, [pc, #600]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b04      	cmp	r3, #4
 8001d6a:	d00c      	beq.n	8001d86 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d6c:	4b93      	ldr	r3, [pc, #588]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d112      	bne.n	8001d9e <HAL_RCC_OscConfig+0x62>
 8001d78:	4b90      	ldr	r3, [pc, #576]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d84:	d10b      	bne.n	8001d9e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d86:	4b8d      	ldr	r3, [pc, #564]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d06c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x130>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d168      	bne.n	8001e6c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e275      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da6:	d106      	bne.n	8001db6 <HAL_RCC_OscConfig+0x7a>
 8001da8:	4b84      	ldr	r3, [pc, #528]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a83      	ldr	r2, [pc, #524]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001dae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	e02e      	b.n	8001e14 <HAL_RCC_OscConfig+0xd8>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d10c      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x9c>
 8001dbe:	4b7f      	ldr	r3, [pc, #508]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a7e      	ldr	r2, [pc, #504]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc8:	6013      	str	r3, [r2, #0]
 8001dca:	4b7c      	ldr	r3, [pc, #496]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a7b      	ldr	r2, [pc, #492]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001dd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	e01d      	b.n	8001e14 <HAL_RCC_OscConfig+0xd8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de0:	d10c      	bne.n	8001dfc <HAL_RCC_OscConfig+0xc0>
 8001de2:	4b76      	ldr	r3, [pc, #472]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a75      	ldr	r2, [pc, #468]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dec:	6013      	str	r3, [r2, #0]
 8001dee:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a72      	ldr	r2, [pc, #456]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001df4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	e00b      	b.n	8001e14 <HAL_RCC_OscConfig+0xd8>
 8001dfc:	4b6f      	ldr	r3, [pc, #444]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a6e      	ldr	r2, [pc, #440]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001e02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e06:	6013      	str	r3, [r2, #0]
 8001e08:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a6b      	ldr	r2, [pc, #428]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fab4 	bl	8001388 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e24:	f7ff fab0 	bl	8001388 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b64      	cmp	r3, #100	; 0x64
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e229      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e36:	4b61      	ldr	r3, [pc, #388]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0xe8>
 8001e42:	e014      	b.n	8001e6e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff faa0 	bl	8001388 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e4c:	f7ff fa9c 	bl	8001388 <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b64      	cmp	r3, #100	; 0x64
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e215      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e5e:	4b57      	ldr	r3, [pc, #348]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1f0      	bne.n	8001e4c <HAL_RCC_OscConfig+0x110>
 8001e6a:	e000      	b.n	8001e6e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d069      	beq.n	8001f4e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e7a:	4b50      	ldr	r3, [pc, #320]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f003 030c 	and.w	r3, r3, #12
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00b      	beq.n	8001e9e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e86:	4b4d      	ldr	r3, [pc, #308]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d11c      	bne.n	8001ecc <HAL_RCC_OscConfig+0x190>
 8001e92:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d116      	bne.n	8001ecc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e9e:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d005      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x17a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e1e9      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eb6:	4b41      	ldr	r3, [pc, #260]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	493d      	ldr	r1, [pc, #244]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eca:	e040      	b.n	8001f4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d023      	beq.n	8001f1c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ed4:	4b39      	ldr	r3, [pc, #228]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a38      	ldr	r2, [pc, #224]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fa52 	bl	8001388 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fa4e 	bl	8001388 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e1c7      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001efa:	4b30      	ldr	r3, [pc, #192]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d0f0      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4929      	ldr	r1, [pc, #164]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	600b      	str	r3, [r1, #0]
 8001f1a:	e018      	b.n	8001f4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f1c:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001f22:	f023 0301 	bic.w	r3, r3, #1
 8001f26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff fa2e 	bl	8001388 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f30:	f7ff fa2a 	bl	8001388 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e1a3      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d038      	beq.n	8001fcc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d019      	beq.n	8001f96 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f62:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001f64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f66:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001f68:	f043 0301 	orr.w	r3, r3, #1
 8001f6c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7ff fa0b 	bl	8001388 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f74:	e008      	b.n	8001f88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f76:	f7ff fa07 	bl	8001388 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d901      	bls.n	8001f88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e180      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0f0      	beq.n	8001f76 <HAL_RCC_OscConfig+0x23a>
 8001f94:	e01a      	b.n	8001fcc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f9a:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <HAL_RCC_OscConfig+0x280>)
 8001f9c:	f023 0301 	bic.w	r3, r3, #1
 8001fa0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7ff f9f1 	bl	8001388 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001faa:	f7ff f9ed 	bl	8001388 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d903      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e166      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
 8001fbc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fc0:	4b92      	ldr	r3, [pc, #584]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8001fc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d1ee      	bne.n	8001faa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 80a4 	beq.w	8002122 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fda:	4b8c      	ldr	r3, [pc, #560]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10d      	bne.n	8002002 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4b89      	ldr	r3, [pc, #548]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a88      	ldr	r2, [pc, #544]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b86      	ldr	r3, [pc, #536]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ffe:	2301      	movs	r3, #1
 8002000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002002:	4b83      	ldr	r3, [pc, #524]	; (8002210 <HAL_RCC_OscConfig+0x4d4>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800200a:	2b00      	cmp	r3, #0
 800200c:	d118      	bne.n	8002040 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800200e:	4b80      	ldr	r3, [pc, #512]	; (8002210 <HAL_RCC_OscConfig+0x4d4>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7f      	ldr	r2, [pc, #508]	; (8002210 <HAL_RCC_OscConfig+0x4d4>)
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800201a:	f7ff f9b5 	bl	8001388 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002022:	f7ff f9b1 	bl	8001388 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b64      	cmp	r3, #100	; 0x64
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e12a      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002034:	4b76      	ldr	r3, [pc, #472]	; (8002210 <HAL_RCC_OscConfig+0x4d4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203c:	2b00      	cmp	r3, #0
 800203e:	d0f0      	beq.n	8002022 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x31a>
 8002048:	4b70      	ldr	r3, [pc, #448]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 800204a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204c:	4a6f      	ldr	r2, [pc, #444]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6713      	str	r3, [r2, #112]	; 0x70
 8002054:	e02d      	b.n	80020b2 <HAL_RCC_OscConfig+0x376>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10c      	bne.n	8002078 <HAL_RCC_OscConfig+0x33c>
 800205e:	4b6b      	ldr	r3, [pc, #428]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	4a6a      	ldr	r2, [pc, #424]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002064:	f023 0301 	bic.w	r3, r3, #1
 8002068:	6713      	str	r3, [r2, #112]	; 0x70
 800206a:	4b68      	ldr	r3, [pc, #416]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 800206c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206e:	4a67      	ldr	r2, [pc, #412]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002070:	f023 0304 	bic.w	r3, r3, #4
 8002074:	6713      	str	r3, [r2, #112]	; 0x70
 8002076:	e01c      	b.n	80020b2 <HAL_RCC_OscConfig+0x376>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b05      	cmp	r3, #5
 800207e:	d10c      	bne.n	800209a <HAL_RCC_OscConfig+0x35e>
 8002080:	4b62      	ldr	r3, [pc, #392]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002084:	4a61      	ldr	r2, [pc, #388]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002086:	f043 0304 	orr.w	r3, r3, #4
 800208a:	6713      	str	r3, [r2, #112]	; 0x70
 800208c:	4b5f      	ldr	r3, [pc, #380]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 800208e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002090:	4a5e      	ldr	r2, [pc, #376]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	6713      	str	r3, [r2, #112]	; 0x70
 8002098:	e00b      	b.n	80020b2 <HAL_RCC_OscConfig+0x376>
 800209a:	4b5c      	ldr	r3, [pc, #368]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 800209c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800209e:	4a5b      	ldr	r2, [pc, #364]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 80020a0:	f023 0301 	bic.w	r3, r3, #1
 80020a4:	6713      	str	r3, [r2, #112]	; 0x70
 80020a6:	4b59      	ldr	r3, [pc, #356]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020aa:	4a58      	ldr	r2, [pc, #352]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 80020ac:	f023 0304 	bic.w	r3, r3, #4
 80020b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d015      	beq.n	80020e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ba:	f7ff f965 	bl	8001388 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c2:	f7ff f961 	bl	8001388 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d901      	bls.n	80020d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020d4:	2303      	movs	r3, #3
 80020d6:	e0d8      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d8:	4b4c      	ldr	r3, [pc, #304]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d0ee      	beq.n	80020c2 <HAL_RCC_OscConfig+0x386>
 80020e4:	e014      	b.n	8002110 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e6:	f7ff f94f 	bl	8001388 <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ec:	e00a      	b.n	8002104 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7ff f94b 	bl	8001388 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e0c2      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002104:	4b41      	ldr	r3, [pc, #260]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1ee      	bne.n	80020ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d105      	bne.n	8002122 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002116:	4b3d      	ldr	r3, [pc, #244]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a3c      	ldr	r2, [pc, #240]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 800211c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80ae 	beq.w	8002288 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800212c:	4b37      	ldr	r3, [pc, #220]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 030c 	and.w	r3, r3, #12
 8002134:	2b08      	cmp	r3, #8
 8002136:	d06d      	beq.n	8002214 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d14b      	bne.n	80021d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b32      	ldr	r3, [pc, #200]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a31      	ldr	r2, [pc, #196]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800214c:	f7ff f91c 	bl	8001388 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002154:	f7ff f918 	bl	8001388 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e091      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b29      	ldr	r3, [pc, #164]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69da      	ldr	r2, [r3, #28]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	019b      	lsls	r3, r3, #6
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	3b01      	subs	r3, #1
 800218c:	041b      	lsls	r3, r3, #16
 800218e:	431a      	orrs	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002194:	061b      	lsls	r3, r3, #24
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219c:	071b      	lsls	r3, r3, #28
 800219e:	491b      	ldr	r1, [pc, #108]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 80021a0:	4313      	orrs	r3, r2
 80021a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a18      	ldr	r2, [pc, #96]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 80021aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b0:	f7ff f8ea 	bl	8001388 <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b8:	f7ff f8e6 	bl	8001388 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e05f      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ca:	4b10      	ldr	r3, [pc, #64]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x47c>
 80021d6:	e057      	b.n	8002288 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0b      	ldr	r2, [pc, #44]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7ff f8d0 	bl	8001388 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff f8cc 	bl	8001388 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e045      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021fe:	4b03      	ldr	r3, [pc, #12]	; (800220c <HAL_RCC_OscConfig+0x4d0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x4b0>
 800220a:	e03d      	b.n	8002288 <HAL_RCC_OscConfig+0x54c>
 800220c:	40023800 	.word	0x40023800
 8002210:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002214:	4b1f      	ldr	r3, [pc, #124]	; (8002294 <HAL_RCC_OscConfig+0x558>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d030      	beq.n	8002284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d129      	bne.n	8002284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d122      	bne.n	8002284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002244:	4013      	ands	r3, r2
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800224a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800224c:	4293      	cmp	r3, r2
 800224e:	d119      	bne.n	8002284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225a:	085b      	lsrs	r3, r3, #1
 800225c:	3b01      	subs	r3, #1
 800225e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d10f      	bne.n	8002284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800226e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d107      	bne.n	8002284 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002280:	429a      	cmp	r2, r3
 8002282:	d001      	beq.n	8002288 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e000      	b.n	800228a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	40023800 	.word	0x40023800

08002298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80022a2:	2300      	movs	r3, #0
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0d0      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b0:	4b6a      	ldr	r3, [pc, #424]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 030f 	and.w	r3, r3, #15
 80022b8:	683a      	ldr	r2, [r7, #0]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d910      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022be:	4b67      	ldr	r3, [pc, #412]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 020f 	bic.w	r2, r3, #15
 80022c6:	4965      	ldr	r1, [pc, #404]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b63      	ldr	r3, [pc, #396]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0b8      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f8:	4b59      	ldr	r3, [pc, #356]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a58      	ldr	r2, [pc, #352]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 80022fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002302:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002310:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a52      	ldr	r2, [pc, #328]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 8002316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800231a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b50      	ldr	r3, [pc, #320]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	494d      	ldr	r1, [pc, #308]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d040      	beq.n	80023bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d115      	bne.n	800237a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e07f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d107      	bne.n	800236a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800235a:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e073      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	4b3d      	ldr	r3, [pc, #244]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e06b      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800237a:	4b39      	ldr	r3, [pc, #228]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f023 0203 	bic.w	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	4936      	ldr	r1, [pc, #216]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800238c:	f7fe fffc 	bl	8001388 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002392:	e00a      	b.n	80023aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7fe fff8 	bl	8001388 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e053      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023aa:	4b2d      	ldr	r3, [pc, #180]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 020c 	and.w	r2, r3, #12
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d1eb      	bne.n	8002394 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023bc:	4b27      	ldr	r3, [pc, #156]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d210      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f023 020f 	bic.w	r2, r3, #15
 80023d2:	4922      	ldr	r1, [pc, #136]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_RCC_ClockConfig+0x1c4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e032      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4916      	ldr	r1, [pc, #88]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	490e      	ldr	r1, [pc, #56]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800242a:	f000 f821 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 800242e:	4601      	mov	r1, r0
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_ClockConfig+0x1c8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x1cc>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	fa21 f303 	lsr.w	r3, r1, r3
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1d0>)
 8002444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1d4>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe ff58 	bl	8001300 <HAL_InitTick>

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023c00 	.word	0x40023c00
 8002460:	40023800 	.word	0x40023800
 8002464:	0800644c 	.word	0x0800644c
 8002468:	20000000 	.word	0x20000000
 800246c:	20000004 	.word	0x20000004

08002470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002486:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b04      	cmp	r3, #4
 8002490:	d007      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x32>
 8002492:	2b08      	cmp	r3, #8
 8002494:	d008      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x38>
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 808d 	bne.w	80025b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800249e:	60bb      	str	r3, [r7, #8]
      break;
 80024a0:	e08c      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024a2:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80024a4:	60bb      	str	r3, [r7, #8]
      break;
 80024a6:	e089      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a8:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80024b2:	4b45      	ldr	r3, [pc, #276]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d023      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024be:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	099b      	lsrs	r3, r3, #6
 80024c4:	f04f 0400 	mov.w	r4, #0
 80024c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	ea03 0501 	and.w	r5, r3, r1
 80024d4:	ea04 0602 	and.w	r6, r4, r2
 80024d8:	4a3d      	ldr	r2, [pc, #244]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80024da:	fb02 f106 	mul.w	r1, r2, r6
 80024de:	2200      	movs	r2, #0
 80024e0:	fb02 f205 	mul.w	r2, r2, r5
 80024e4:	440a      	add	r2, r1
 80024e6:	493a      	ldr	r1, [pc, #232]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80024e8:	fba5 0101 	umull	r0, r1, r5, r1
 80024ec:	1853      	adds	r3, r2, r1
 80024ee:	4619      	mov	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f04f 0400 	mov.w	r4, #0
 80024f6:	461a      	mov	r2, r3
 80024f8:	4623      	mov	r3, r4
 80024fa:	f7fd fea1 	bl	8000240 <__aeabi_uldivmod>
 80024fe:	4603      	mov	r3, r0
 8002500:	460c      	mov	r4, r1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e049      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	f04f 0400 	mov.w	r4, #0
 8002510:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	ea03 0501 	and.w	r5, r3, r1
 800251c:	ea04 0602 	and.w	r6, r4, r2
 8002520:	4629      	mov	r1, r5
 8002522:	4632      	mov	r2, r6
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	f04f 0400 	mov.w	r4, #0
 800252c:	0154      	lsls	r4, r2, #5
 800252e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002532:	014b      	lsls	r3, r1, #5
 8002534:	4619      	mov	r1, r3
 8002536:	4622      	mov	r2, r4
 8002538:	1b49      	subs	r1, r1, r5
 800253a:	eb62 0206 	sbc.w	r2, r2, r6
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	f04f 0400 	mov.w	r4, #0
 8002546:	0194      	lsls	r4, r2, #6
 8002548:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800254c:	018b      	lsls	r3, r1, #6
 800254e:	1a5b      	subs	r3, r3, r1
 8002550:	eb64 0402 	sbc.w	r4, r4, r2
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	00e2      	lsls	r2, r4, #3
 800255e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002562:	00d9      	lsls	r1, r3, #3
 8002564:	460b      	mov	r3, r1
 8002566:	4614      	mov	r4, r2
 8002568:	195b      	adds	r3, r3, r5
 800256a:	eb44 0406 	adc.w	r4, r4, r6
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	02a2      	lsls	r2, r4, #10
 8002578:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800257c:	0299      	lsls	r1, r3, #10
 800257e:	460b      	mov	r3, r1
 8002580:	4614      	mov	r4, r2
 8002582:	4618      	mov	r0, r3
 8002584:	4621      	mov	r1, r4
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f04f 0400 	mov.w	r4, #0
 800258c:	461a      	mov	r2, r3
 800258e:	4623      	mov	r3, r4
 8002590:	f7fd fe56 	bl	8000240 <__aeabi_uldivmod>
 8002594:	4603      	mov	r3, r0
 8002596:	460c      	mov	r4, r1
 8002598:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	3301      	adds	r3, #1
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	60bb      	str	r3, [r7, #8]
      break;
 80025b4:	e002      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80025b8:	60bb      	str	r3, [r7, #8]
      break;
 80025ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025bc:	68bb      	ldr	r3, [r7, #8]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	00f42400 	.word	0x00f42400
 80025d0:	017d7840 	.word	0x017d7840

080025d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000000 	.word	0x20000000

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f0:	f7ff fff0 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f4:	4601      	mov	r1, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0a9b      	lsrs	r3, r3, #10
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4a03      	ldr	r2, [pc, #12]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	0800645c 	.word	0x0800645c

08002614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002618:	f7ff ffdc 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 800261c:	4601      	mov	r1, r0
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	0b5b      	lsrs	r3, r3, #13
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4a03      	ldr	r2, [pc, #12]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	0800645c 	.word	0x0800645c

0800263c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b088      	sub	sp, #32
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d012      	beq.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002664:	4b69      	ldr	r3, [pc, #420]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	4a68      	ldr	r2, [pc, #416]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800266e:	6093      	str	r3, [r2, #8]
 8002670:	4b66      	ldr	r3, [pc, #408]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	4964      	ldr	r1, [pc, #400]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267a:	4313      	orrs	r3, r2
 800267c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002686:	2301      	movs	r3, #1
 8002688:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d017      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002696:	4b5d      	ldr	r3, [pc, #372]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002698:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800269c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a4:	4959      	ldr	r1, [pc, #356]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026b4:	d101      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026b6:	2301      	movs	r3, #1
 80026b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026c2:	2301      	movs	r3, #1
 80026c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d017      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026d2:	4b4e      	ldr	r3, [pc, #312]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	494a      	ldr	r1, [pc, #296]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f0:	d101      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d101      	bne.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80026fe:	2301      	movs	r3, #1
 8002700:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800270e:	2301      	movs	r3, #1
 8002710:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 808b 	beq.w	8002836 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002720:	4b3a      	ldr	r3, [pc, #232]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002724:	4a39      	ldr	r2, [pc, #228]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800272a:	6413      	str	r3, [r2, #64]	; 0x40
 800272c:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002738:	4b35      	ldr	r3, [pc, #212]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a34      	ldr	r2, [pc, #208]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800273e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002744:	f7fe fe20 	bl	8001388 <HAL_GetTick>
 8002748:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800274c:	f7fe fe1c 	bl	8001388 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	; 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e38d      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800275e:	4b2c      	ldr	r3, [pc, #176]	; (8002810 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800276a:	4b28      	ldr	r3, [pc, #160]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002772:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d035      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	429a      	cmp	r2, r3
 8002786:	d02e      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002788:	4b20      	ldr	r3, [pc, #128]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800278a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002790:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002792:	4b1e      	ldr	r3, [pc, #120]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a1d      	ldr	r2, [pc, #116]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a2:	4a1a      	ldr	r2, [pc, #104]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027aa:	4a18      	ldr	r2, [pc, #96]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027b0:	4b16      	ldr	r3, [pc, #88]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d114      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fde4 	bl	8001388 <HAL_GetTick>
 80027c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027c2:	e00a      	b.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c4:	f7fe fde0 	bl	8001388 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d901      	bls.n	80027da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e34f      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	f003 0302 	and.w	r3, r3, #2
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0ee      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027f2:	d111      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027f4:	4b05      	ldr	r3, [pc, #20]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002800:	4b04      	ldr	r3, [pc, #16]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002802:	400b      	ands	r3, r1
 8002804:	4901      	ldr	r1, [pc, #4]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
 800280a:	e00b      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800280c:	40023800 	.word	0x40023800
 8002810:	40007000 	.word	0x40007000
 8002814:	0ffffcff 	.word	0x0ffffcff
 8002818:	4bb3      	ldr	r3, [pc, #716]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	4ab2      	ldr	r2, [pc, #712]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800281e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002822:	6093      	str	r3, [r2, #8]
 8002824:	4bb0      	ldr	r3, [pc, #704]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002826:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002830:	49ad      	ldr	r1, [pc, #692]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002832:	4313      	orrs	r3, r2
 8002834:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0310 	and.w	r3, r3, #16
 800283e:	2b00      	cmp	r3, #0
 8002840:	d010      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002842:	4ba9      	ldr	r3, [pc, #676]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002844:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002848:	4aa7      	ldr	r2, [pc, #668]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800284a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800284e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002852:	4ba5      	ldr	r3, [pc, #660]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002854:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800285c:	49a2      	ldr	r1, [pc, #648]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00a      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002870:	4b9d      	ldr	r3, [pc, #628]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800287e:	499a      	ldr	r1, [pc, #616]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002892:	4b95      	ldr	r3, [pc, #596]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002898:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a0:	4991      	ldr	r1, [pc, #580]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00a      	beq.n	80028ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028b4:	4b8c      	ldr	r3, [pc, #560]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028c2:	4989      	ldr	r1, [pc, #548]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00a      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028d6:	4b84      	ldr	r3, [pc, #528]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e4:	4980      	ldr	r1, [pc, #512]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00a      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028f8:	4b7b      	ldr	r3, [pc, #492]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80028fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	4978      	ldr	r1, [pc, #480]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00a      	beq.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800291a:	4b73      	ldr	r3, [pc, #460]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800291c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002920:	f023 020c 	bic.w	r2, r3, #12
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002928:	496f      	ldr	r1, [pc, #444]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800292a:	4313      	orrs	r3, r2
 800292c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d00a      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800293c:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800293e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002942:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294a:	4967      	ldr	r1, [pc, #412]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800295e:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002964:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296c:	495e      	ldr	r1, [pc, #376]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002980:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298e:	4956      	ldr	r1, [pc, #344]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002990:	4313      	orrs	r3, r2
 8002992:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00a      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029a2:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b0:	494d      	ldr	r1, [pc, #308]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00a      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029c4:	4b48      	ldr	r3, [pc, #288]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	4945      	ldr	r1, [pc, #276]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00a      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029e6:	4b40      	ldr	r3, [pc, #256]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f4:	493c      	ldr	r1, [pc, #240]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a08:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a16:	4934      	ldr	r1, [pc, #208]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d011      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a30:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a38:	492b      	ldr	r1, [pc, #172]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a48:	d101      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	491b      	ldr	r1, [pc, #108]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00b      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a8c:	4b16      	ldr	r3, [pc, #88]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a9c:	4912      	ldr	r1, [pc, #72]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ab0:	4b0d      	ldr	r3, [pc, #52]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac0:	4909      	ldr	r1, [pc, #36]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00f      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ad4:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ada:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	e002      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002ae6:	bf00      	nop
 8002ae8:	40023800 	.word	0x40023800
 8002aec:	4985      	ldr	r1, [pc, #532]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00b      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b00:	4b80      	ldr	r3, [pc, #512]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b10:	497c      	ldr	r1, [pc, #496]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d005      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002b26:	f040 80d6 	bne.w	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b2a:	4b76      	ldr	r3, [pc, #472]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a75      	ldr	r2, [pc, #468]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b30:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b36:	f7fe fc27 	bl	8001388 <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b3e:	f7fe fc23 	bl	8001388 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b64      	cmp	r3, #100	; 0x64
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e194      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b50:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f0      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0301 	and.w	r3, r3, #1
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d021      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x570>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d11d      	bne.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b70:	4b64      	ldr	r3, [pc, #400]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b7e:	4b61      	ldr	r3, [pc, #388]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002b80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b84:	0e1b      	lsrs	r3, r3, #24
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	019a      	lsls	r2, r3, #6
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	061b      	lsls	r3, r3, #24
 8002b9c:	431a      	orrs	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	071b      	lsls	r3, r3, #28
 8002ba4:	4957      	ldr	r1, [pc, #348]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d004      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d02e      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bd6:	d129      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002bd8:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002be6:	4b47      	ldr	r3, [pc, #284]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bec:	0f1b      	lsrs	r3, r3, #28
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	019a      	lsls	r2, r3, #6
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	041b      	lsls	r3, r3, #16
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	061b      	lsls	r3, r3, #24
 8002c06:	431a      	orrs	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	071b      	lsls	r3, r3, #28
 8002c0c:	493d      	ldr	r1, [pc, #244]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c14:	4b3b      	ldr	r3, [pc, #236]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c1a:	f023 021f 	bic.w	r2, r3, #31
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c22:	3b01      	subs	r3, #1
 8002c24:	4937      	ldr	r1, [pc, #220]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d01d      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c38:	4b32      	ldr	r3, [pc, #200]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3e:	0e1b      	lsrs	r3, r3, #24
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c46:	4b2f      	ldr	r3, [pc, #188]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c4c:	0f1b      	lsrs	r3, r3, #28
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	019a      	lsls	r2, r3, #6
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	431a      	orrs	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	061b      	lsls	r3, r3, #24
 8002c66:	431a      	orrs	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	071b      	lsls	r3, r3, #28
 8002c6c:	4925      	ldr	r1, [pc, #148]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d011      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	019a      	lsls	r2, r3, #6
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	041b      	lsls	r3, r3, #16
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	061b      	lsls	r3, r3, #24
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	071b      	lsls	r3, r3, #28
 8002c9c:	4919      	ldr	r1, [pc, #100]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a16      	ldr	r2, [pc, #88]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002caa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb0:	f7fe fb6a 	bl	8001388 <HAL_GetTick>
 8002cb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cb8:	f7fe fb66 	bl	8001388 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e0d7      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	f040 80cd 	bne.w	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002cde:	4b09      	ldr	r3, [pc, #36]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a08      	ldr	r2, [pc, #32]	; (8002d04 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ce8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cea:	f7fe fb4d 	bl	8001388 <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cf0:	e00a      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cf2:	f7fe fb49 	bl	8001388 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b64      	cmp	r3, #100	; 0x64
 8002cfe:	d903      	bls.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0ba      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002d04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d08:	4b5e      	ldr	r3, [pc, #376]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d14:	d0ed      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d009      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d02e      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d12a      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d3e:	4b51      	ldr	r3, [pc, #324]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	f003 0303 	and.w	r3, r3, #3
 8002d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d4c:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d52:	0f1b      	lsrs	r3, r3, #28
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	019a      	lsls	r2, r3, #6
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	041b      	lsls	r3, r3, #16
 8002d64:	431a      	orrs	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	061b      	lsls	r3, r3, #24
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	071b      	lsls	r3, r3, #28
 8002d72:	4944      	ldr	r1, [pc, #272]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d7a:	4b42      	ldr	r3, [pc, #264]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	493d      	ldr	r1, [pc, #244]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d022      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002da8:	d11d      	bne.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002daa:	4b36      	ldr	r3, [pc, #216]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	0e1b      	lsrs	r3, r3, #24
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002db8:	4b32      	ldr	r3, [pc, #200]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	0f1b      	lsrs	r3, r3, #28
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	019a      	lsls	r2, r3, #6
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	041b      	lsls	r3, r3, #16
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	061b      	lsls	r3, r3, #24
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	071b      	lsls	r3, r3, #28
 8002dde:	4929      	ldr	r1, [pc, #164]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d028      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002df2:	4b24      	ldr	r3, [pc, #144]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df8:	0e1b      	lsrs	r3, r3, #24
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e00:	4b20      	ldr	r3, [pc, #128]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	0c1b      	lsrs	r3, r3, #16
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	019a      	lsls	r2, r3, #6
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	041b      	lsls	r3, r3, #16
 8002e18:	431a      	orrs	r2, r3
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	061b      	lsls	r3, r3, #24
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69db      	ldr	r3, [r3, #28]
 8002e24:	071b      	lsls	r3, r3, #28
 8002e26:	4917      	ldr	r1, [pc, #92]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	4911      	ldr	r1, [pc, #68]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e44:	4b0f      	ldr	r3, [pc, #60]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a0e      	ldr	r2, [pc, #56]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e50:	f7fe fa9a 	bl	8001388 <HAL_GetTick>
 8002e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e58:	f7fe fa96 	bl	8001388 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b64      	cmp	r3, #100	; 0x64
 8002e64:	d901      	bls.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e007      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e76:	d1ef      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800

08002e88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e084      	b.n	8002fa4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d106      	bne.n	8002eba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f7fd ffa7 	bl	8000e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002eda:	d902      	bls.n	8002ee2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	e002      	b.n	8002ee8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002ef0:	d007      	beq.n	8002f02 <HAL_SPI_Init+0x7a>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002efa:	d002      	beq.n	8002f02 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10b      	bne.n	8002f22 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f12:	d903      	bls.n	8002f1c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
 8002f1a:	e002      	b.n	8002f22 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69db      	ldr	r3, [r3, #28]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	ea42 0103 	orr.w	r1, r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	f003 0204 	and.w	r2, r3, #4
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	ea42 0103 	orr.w	r1, r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69da      	ldr	r2, [r3, #28]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e040      	b.n	8003040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d106      	bne.n	8002fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7fd ff5e 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2224      	movs	r2, #36	; 0x24
 8002fd8:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 f82c 	bl	8003048 <UART_SetConfig>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e022      	b.n	8003040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 faca 	bl	800359c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fb51 	bl	80036e0 <UART_CheckIdleState>
 800303e:	4603      	mov	r3, r0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003050:	2300      	movs	r3, #0
 8003052:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689a      	ldr	r2, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	4bb1      	ldr	r3, [pc, #708]	; (800333c <UART_SetConfig+0x2f4>)
 8003078:	4013      	ands	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	6939      	ldr	r1, [r7, #16]
 8003080:	430b      	orrs	r3, r1
 8003082:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	68da      	ldr	r2, [r3, #12]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a9f      	ldr	r2, [pc, #636]	; (8003340 <UART_SetConfig+0x2f8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d121      	bne.n	800310c <UART_SetConfig+0xc4>
 80030c8:	4b9e      	ldr	r3, [pc, #632]	; (8003344 <UART_SetConfig+0x2fc>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d816      	bhi.n	8003104 <UART_SetConfig+0xbc>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <UART_SetConfig+0x94>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	080030f9 	.word	0x080030f9
 80030e4:	080030f3 	.word	0x080030f3
 80030e8:	080030ff 	.word	0x080030ff
 80030ec:	2301      	movs	r3, #1
 80030ee:	77fb      	strb	r3, [r7, #31]
 80030f0:	e151      	b.n	8003396 <UART_SetConfig+0x34e>
 80030f2:	2302      	movs	r3, #2
 80030f4:	77fb      	strb	r3, [r7, #31]
 80030f6:	e14e      	b.n	8003396 <UART_SetConfig+0x34e>
 80030f8:	2304      	movs	r3, #4
 80030fa:	77fb      	strb	r3, [r7, #31]
 80030fc:	e14b      	b.n	8003396 <UART_SetConfig+0x34e>
 80030fe:	2308      	movs	r3, #8
 8003100:	77fb      	strb	r3, [r7, #31]
 8003102:	e148      	b.n	8003396 <UART_SetConfig+0x34e>
 8003104:	2310      	movs	r3, #16
 8003106:	77fb      	strb	r3, [r7, #31]
 8003108:	bf00      	nop
 800310a:	e144      	b.n	8003396 <UART_SetConfig+0x34e>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a8d      	ldr	r2, [pc, #564]	; (8003348 <UART_SetConfig+0x300>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d134      	bne.n	8003180 <UART_SetConfig+0x138>
 8003116:	4b8b      	ldr	r3, [pc, #556]	; (8003344 <UART_SetConfig+0x2fc>)
 8003118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b0c      	cmp	r3, #12
 8003122:	d829      	bhi.n	8003178 <UART_SetConfig+0x130>
 8003124:	a201      	add	r2, pc, #4	; (adr r2, 800312c <UART_SetConfig+0xe4>)
 8003126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312a:	bf00      	nop
 800312c:	08003161 	.word	0x08003161
 8003130:	08003179 	.word	0x08003179
 8003134:	08003179 	.word	0x08003179
 8003138:	08003179 	.word	0x08003179
 800313c:	0800316d 	.word	0x0800316d
 8003140:	08003179 	.word	0x08003179
 8003144:	08003179 	.word	0x08003179
 8003148:	08003179 	.word	0x08003179
 800314c:	08003167 	.word	0x08003167
 8003150:	08003179 	.word	0x08003179
 8003154:	08003179 	.word	0x08003179
 8003158:	08003179 	.word	0x08003179
 800315c:	08003173 	.word	0x08003173
 8003160:	2300      	movs	r3, #0
 8003162:	77fb      	strb	r3, [r7, #31]
 8003164:	e117      	b.n	8003396 <UART_SetConfig+0x34e>
 8003166:	2302      	movs	r3, #2
 8003168:	77fb      	strb	r3, [r7, #31]
 800316a:	e114      	b.n	8003396 <UART_SetConfig+0x34e>
 800316c:	2304      	movs	r3, #4
 800316e:	77fb      	strb	r3, [r7, #31]
 8003170:	e111      	b.n	8003396 <UART_SetConfig+0x34e>
 8003172:	2308      	movs	r3, #8
 8003174:	77fb      	strb	r3, [r7, #31]
 8003176:	e10e      	b.n	8003396 <UART_SetConfig+0x34e>
 8003178:	2310      	movs	r3, #16
 800317a:	77fb      	strb	r3, [r7, #31]
 800317c:	bf00      	nop
 800317e:	e10a      	b.n	8003396 <UART_SetConfig+0x34e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a71      	ldr	r2, [pc, #452]	; (800334c <UART_SetConfig+0x304>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d120      	bne.n	80031cc <UART_SetConfig+0x184>
 800318a:	4b6e      	ldr	r3, [pc, #440]	; (8003344 <UART_SetConfig+0x2fc>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003190:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003194:	2b10      	cmp	r3, #16
 8003196:	d00f      	beq.n	80031b8 <UART_SetConfig+0x170>
 8003198:	2b10      	cmp	r3, #16
 800319a:	d802      	bhi.n	80031a2 <UART_SetConfig+0x15a>
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <UART_SetConfig+0x164>
 80031a0:	e010      	b.n	80031c4 <UART_SetConfig+0x17c>
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	d005      	beq.n	80031b2 <UART_SetConfig+0x16a>
 80031a6:	2b30      	cmp	r3, #48	; 0x30
 80031a8:	d009      	beq.n	80031be <UART_SetConfig+0x176>
 80031aa:	e00b      	b.n	80031c4 <UART_SetConfig+0x17c>
 80031ac:	2300      	movs	r3, #0
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e0f1      	b.n	8003396 <UART_SetConfig+0x34e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	e0ee      	b.n	8003396 <UART_SetConfig+0x34e>
 80031b8:	2304      	movs	r3, #4
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	e0eb      	b.n	8003396 <UART_SetConfig+0x34e>
 80031be:	2308      	movs	r3, #8
 80031c0:	77fb      	strb	r3, [r7, #31]
 80031c2:	e0e8      	b.n	8003396 <UART_SetConfig+0x34e>
 80031c4:	2310      	movs	r3, #16
 80031c6:	77fb      	strb	r3, [r7, #31]
 80031c8:	bf00      	nop
 80031ca:	e0e4      	b.n	8003396 <UART_SetConfig+0x34e>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a5f      	ldr	r2, [pc, #380]	; (8003350 <UART_SetConfig+0x308>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d120      	bne.n	8003218 <UART_SetConfig+0x1d0>
 80031d6:	4b5b      	ldr	r3, [pc, #364]	; (8003344 <UART_SetConfig+0x2fc>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d00f      	beq.n	8003204 <UART_SetConfig+0x1bc>
 80031e4:	2b40      	cmp	r3, #64	; 0x40
 80031e6:	d802      	bhi.n	80031ee <UART_SetConfig+0x1a6>
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d005      	beq.n	80031f8 <UART_SetConfig+0x1b0>
 80031ec:	e010      	b.n	8003210 <UART_SetConfig+0x1c8>
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d005      	beq.n	80031fe <UART_SetConfig+0x1b6>
 80031f2:	2bc0      	cmp	r3, #192	; 0xc0
 80031f4:	d009      	beq.n	800320a <UART_SetConfig+0x1c2>
 80031f6:	e00b      	b.n	8003210 <UART_SetConfig+0x1c8>
 80031f8:	2300      	movs	r3, #0
 80031fa:	77fb      	strb	r3, [r7, #31]
 80031fc:	e0cb      	b.n	8003396 <UART_SetConfig+0x34e>
 80031fe:	2302      	movs	r3, #2
 8003200:	77fb      	strb	r3, [r7, #31]
 8003202:	e0c8      	b.n	8003396 <UART_SetConfig+0x34e>
 8003204:	2304      	movs	r3, #4
 8003206:	77fb      	strb	r3, [r7, #31]
 8003208:	e0c5      	b.n	8003396 <UART_SetConfig+0x34e>
 800320a:	2308      	movs	r3, #8
 800320c:	77fb      	strb	r3, [r7, #31]
 800320e:	e0c2      	b.n	8003396 <UART_SetConfig+0x34e>
 8003210:	2310      	movs	r3, #16
 8003212:	77fb      	strb	r3, [r7, #31]
 8003214:	bf00      	nop
 8003216:	e0be      	b.n	8003396 <UART_SetConfig+0x34e>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a4d      	ldr	r2, [pc, #308]	; (8003354 <UART_SetConfig+0x30c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d124      	bne.n	800326c <UART_SetConfig+0x224>
 8003222:	4b48      	ldr	r3, [pc, #288]	; (8003344 <UART_SetConfig+0x2fc>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800322c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003230:	d012      	beq.n	8003258 <UART_SetConfig+0x210>
 8003232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003236:	d802      	bhi.n	800323e <UART_SetConfig+0x1f6>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <UART_SetConfig+0x204>
 800323c:	e012      	b.n	8003264 <UART_SetConfig+0x21c>
 800323e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003242:	d006      	beq.n	8003252 <UART_SetConfig+0x20a>
 8003244:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003248:	d009      	beq.n	800325e <UART_SetConfig+0x216>
 800324a:	e00b      	b.n	8003264 <UART_SetConfig+0x21c>
 800324c:	2300      	movs	r3, #0
 800324e:	77fb      	strb	r3, [r7, #31]
 8003250:	e0a1      	b.n	8003396 <UART_SetConfig+0x34e>
 8003252:	2302      	movs	r3, #2
 8003254:	77fb      	strb	r3, [r7, #31]
 8003256:	e09e      	b.n	8003396 <UART_SetConfig+0x34e>
 8003258:	2304      	movs	r3, #4
 800325a:	77fb      	strb	r3, [r7, #31]
 800325c:	e09b      	b.n	8003396 <UART_SetConfig+0x34e>
 800325e:	2308      	movs	r3, #8
 8003260:	77fb      	strb	r3, [r7, #31]
 8003262:	e098      	b.n	8003396 <UART_SetConfig+0x34e>
 8003264:	2310      	movs	r3, #16
 8003266:	77fb      	strb	r3, [r7, #31]
 8003268:	bf00      	nop
 800326a:	e094      	b.n	8003396 <UART_SetConfig+0x34e>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a39      	ldr	r2, [pc, #228]	; (8003358 <UART_SetConfig+0x310>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d124      	bne.n	80032c0 <UART_SetConfig+0x278>
 8003276:	4b33      	ldr	r3, [pc, #204]	; (8003344 <UART_SetConfig+0x2fc>)
 8003278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800327c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d012      	beq.n	80032ac <UART_SetConfig+0x264>
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328a:	d802      	bhi.n	8003292 <UART_SetConfig+0x24a>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d007      	beq.n	80032a0 <UART_SetConfig+0x258>
 8003290:	e012      	b.n	80032b8 <UART_SetConfig+0x270>
 8003292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003296:	d006      	beq.n	80032a6 <UART_SetConfig+0x25e>
 8003298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800329c:	d009      	beq.n	80032b2 <UART_SetConfig+0x26a>
 800329e:	e00b      	b.n	80032b8 <UART_SetConfig+0x270>
 80032a0:	2301      	movs	r3, #1
 80032a2:	77fb      	strb	r3, [r7, #31]
 80032a4:	e077      	b.n	8003396 <UART_SetConfig+0x34e>
 80032a6:	2302      	movs	r3, #2
 80032a8:	77fb      	strb	r3, [r7, #31]
 80032aa:	e074      	b.n	8003396 <UART_SetConfig+0x34e>
 80032ac:	2304      	movs	r3, #4
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e071      	b.n	8003396 <UART_SetConfig+0x34e>
 80032b2:	2308      	movs	r3, #8
 80032b4:	77fb      	strb	r3, [r7, #31]
 80032b6:	e06e      	b.n	8003396 <UART_SetConfig+0x34e>
 80032b8:	2310      	movs	r3, #16
 80032ba:	77fb      	strb	r3, [r7, #31]
 80032bc:	bf00      	nop
 80032be:	e06a      	b.n	8003396 <UART_SetConfig+0x34e>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a25      	ldr	r2, [pc, #148]	; (800335c <UART_SetConfig+0x314>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d124      	bne.n	8003314 <UART_SetConfig+0x2cc>
 80032ca:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <UART_SetConfig+0x2fc>)
 80032cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80032d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d8:	d012      	beq.n	8003300 <UART_SetConfig+0x2b8>
 80032da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032de:	d802      	bhi.n	80032e6 <UART_SetConfig+0x29e>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <UART_SetConfig+0x2ac>
 80032e4:	e012      	b.n	800330c <UART_SetConfig+0x2c4>
 80032e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ea:	d006      	beq.n	80032fa <UART_SetConfig+0x2b2>
 80032ec:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80032f0:	d009      	beq.n	8003306 <UART_SetConfig+0x2be>
 80032f2:	e00b      	b.n	800330c <UART_SetConfig+0x2c4>
 80032f4:	2300      	movs	r3, #0
 80032f6:	77fb      	strb	r3, [r7, #31]
 80032f8:	e04d      	b.n	8003396 <UART_SetConfig+0x34e>
 80032fa:	2302      	movs	r3, #2
 80032fc:	77fb      	strb	r3, [r7, #31]
 80032fe:	e04a      	b.n	8003396 <UART_SetConfig+0x34e>
 8003300:	2304      	movs	r3, #4
 8003302:	77fb      	strb	r3, [r7, #31]
 8003304:	e047      	b.n	8003396 <UART_SetConfig+0x34e>
 8003306:	2308      	movs	r3, #8
 8003308:	77fb      	strb	r3, [r7, #31]
 800330a:	e044      	b.n	8003396 <UART_SetConfig+0x34e>
 800330c:	2310      	movs	r3, #16
 800330e:	77fb      	strb	r3, [r7, #31]
 8003310:	bf00      	nop
 8003312:	e040      	b.n	8003396 <UART_SetConfig+0x34e>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a11      	ldr	r2, [pc, #68]	; (8003360 <UART_SetConfig+0x318>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d139      	bne.n	8003392 <UART_SetConfig+0x34a>
 800331e:	4b09      	ldr	r3, [pc, #36]	; (8003344 <UART_SetConfig+0x2fc>)
 8003320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800332c:	d027      	beq.n	800337e <UART_SetConfig+0x336>
 800332e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003332:	d817      	bhi.n	8003364 <UART_SetConfig+0x31c>
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01c      	beq.n	8003372 <UART_SetConfig+0x32a>
 8003338:	e027      	b.n	800338a <UART_SetConfig+0x342>
 800333a:	bf00      	nop
 800333c:	efff69f3 	.word	0xefff69f3
 8003340:	40011000 	.word	0x40011000
 8003344:	40023800 	.word	0x40023800
 8003348:	40004400 	.word	0x40004400
 800334c:	40004800 	.word	0x40004800
 8003350:	40004c00 	.word	0x40004c00
 8003354:	40005000 	.word	0x40005000
 8003358:	40011400 	.word	0x40011400
 800335c:	40007800 	.word	0x40007800
 8003360:	40007c00 	.word	0x40007c00
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	d006      	beq.n	8003378 <UART_SetConfig+0x330>
 800336a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800336e:	d009      	beq.n	8003384 <UART_SetConfig+0x33c>
 8003370:	e00b      	b.n	800338a <UART_SetConfig+0x342>
 8003372:	2300      	movs	r3, #0
 8003374:	77fb      	strb	r3, [r7, #31]
 8003376:	e00e      	b.n	8003396 <UART_SetConfig+0x34e>
 8003378:	2302      	movs	r3, #2
 800337a:	77fb      	strb	r3, [r7, #31]
 800337c:	e00b      	b.n	8003396 <UART_SetConfig+0x34e>
 800337e:	2304      	movs	r3, #4
 8003380:	77fb      	strb	r3, [r7, #31]
 8003382:	e008      	b.n	8003396 <UART_SetConfig+0x34e>
 8003384:	2308      	movs	r3, #8
 8003386:	77fb      	strb	r3, [r7, #31]
 8003388:	e005      	b.n	8003396 <UART_SetConfig+0x34e>
 800338a:	2310      	movs	r3, #16
 800338c:	77fb      	strb	r3, [r7, #31]
 800338e:	bf00      	nop
 8003390:	e001      	b.n	8003396 <UART_SetConfig+0x34e>
 8003392:	2310      	movs	r3, #16
 8003394:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800339e:	d17f      	bne.n	80034a0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80033a0:	7ffb      	ldrb	r3, [r7, #31]
 80033a2:	2b08      	cmp	r3, #8
 80033a4:	d85c      	bhi.n	8003460 <UART_SetConfig+0x418>
 80033a6:	a201      	add	r2, pc, #4	; (adr r2, 80033ac <UART_SetConfig+0x364>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033d1 	.word	0x080033d1
 80033b0:	080033f1 	.word	0x080033f1
 80033b4:	08003411 	.word	0x08003411
 80033b8:	08003461 	.word	0x08003461
 80033bc:	08003429 	.word	0x08003429
 80033c0:	08003461 	.word	0x08003461
 80033c4:	08003461 	.word	0x08003461
 80033c8:	08003461 	.word	0x08003461
 80033cc:	08003449 	.word	0x08003449
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033d0:	f7ff f90c 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 80033d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	005a      	lsls	r2, r3, #1
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	441a      	add	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	61bb      	str	r3, [r7, #24]
        break;
 80033ee:	e03a      	b.n	8003466 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033f0:	f7ff f910 	bl	8002614 <HAL_RCC_GetPCLK2Freq>
 80033f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	005a      	lsls	r2, r3, #1
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	085b      	lsrs	r3, r3, #1
 8003400:	441a      	add	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	fbb2 f3f3 	udiv	r3, r2, r3
 800340a:	b29b      	uxth	r3, r3
 800340c:	61bb      	str	r3, [r7, #24]
        break;
 800340e:	e02a      	b.n	8003466 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	085a      	lsrs	r2, r3, #1
 8003416:	4b5f      	ldr	r3, [pc, #380]	; (8003594 <UART_SetConfig+0x54c>)
 8003418:	4413      	add	r3, r2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6852      	ldr	r2, [r2, #4]
 800341e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	61bb      	str	r3, [r7, #24]
        break;
 8003426:	e01e      	b.n	8003466 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003428:	f7ff f822 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 800342c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	005a      	lsls	r2, r3, #1
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	085b      	lsrs	r3, r3, #1
 8003438:	441a      	add	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003442:	b29b      	uxth	r3, r3
 8003444:	61bb      	str	r3, [r7, #24]
        break;
 8003446:	e00e      	b.n	8003466 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	085b      	lsrs	r3, r3, #1
 800344e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	b29b      	uxth	r3, r3
 800345c:	61bb      	str	r3, [r7, #24]
        break;
 800345e:	e002      	b.n	8003466 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	75fb      	strb	r3, [r7, #23]
        break;
 8003464:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b0f      	cmp	r3, #15
 800346a:	d916      	bls.n	800349a <UART_SetConfig+0x452>
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003472:	d212      	bcs.n	800349a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	b29b      	uxth	r3, r3
 8003478:	f023 030f 	bic.w	r3, r3, #15
 800347c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	085b      	lsrs	r3, r3, #1
 8003482:	b29b      	uxth	r3, r3
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	b29a      	uxth	r2, r3
 800348a:	897b      	ldrh	r3, [r7, #10]
 800348c:	4313      	orrs	r3, r2
 800348e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	897a      	ldrh	r2, [r7, #10]
 8003496:	60da      	str	r2, [r3, #12]
 8003498:	e070      	b.n	800357c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	75fb      	strb	r3, [r7, #23]
 800349e:	e06d      	b.n	800357c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80034a0:	7ffb      	ldrb	r3, [r7, #31]
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d859      	bhi.n	800355a <UART_SetConfig+0x512>
 80034a6:	a201      	add	r2, pc, #4	; (adr r2, 80034ac <UART_SetConfig+0x464>)
 80034a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ac:	080034d1 	.word	0x080034d1
 80034b0:	080034ef 	.word	0x080034ef
 80034b4:	0800350d 	.word	0x0800350d
 80034b8:	0800355b 	.word	0x0800355b
 80034bc:	08003525 	.word	0x08003525
 80034c0:	0800355b 	.word	0x0800355b
 80034c4:	0800355b 	.word	0x0800355b
 80034c8:	0800355b 	.word	0x0800355b
 80034cc:	08003543 	.word	0x08003543
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d0:	f7ff f88c 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 80034d4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	085a      	lsrs	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	441a      	add	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	61bb      	str	r3, [r7, #24]
        break;
 80034ec:	e038      	b.n	8003560 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034ee:	f7ff f891 	bl	8002614 <HAL_RCC_GetPCLK2Freq>
 80034f2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	085a      	lsrs	r2, r3, #1
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	441a      	add	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	fbb2 f3f3 	udiv	r3, r2, r3
 8003506:	b29b      	uxth	r3, r3
 8003508:	61bb      	str	r3, [r7, #24]
        break;
 800350a:	e029      	b.n	8003560 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	085a      	lsrs	r2, r3, #1
 8003512:	4b21      	ldr	r3, [pc, #132]	; (8003598 <UART_SetConfig+0x550>)
 8003514:	4413      	add	r3, r2
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	6852      	ldr	r2, [r2, #4]
 800351a:	fbb3 f3f2 	udiv	r3, r3, r2
 800351e:	b29b      	uxth	r3, r3
 8003520:	61bb      	str	r3, [r7, #24]
        break;
 8003522:	e01d      	b.n	8003560 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003524:	f7fe ffa4 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 8003528:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	085a      	lsrs	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	441a      	add	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	b29b      	uxth	r3, r3
 800353e:	61bb      	str	r3, [r7, #24]
        break;
 8003540:	e00e      	b.n	8003560 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	fbb2 f3f3 	udiv	r3, r2, r3
 8003554:	b29b      	uxth	r3, r3
 8003556:	61bb      	str	r3, [r7, #24]
        break;
 8003558:	e002      	b.n	8003560 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	75fb      	strb	r3, [r7, #23]
        break;
 800355e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003560:	69bb      	ldr	r3, [r7, #24]
 8003562:	2b0f      	cmp	r3, #15
 8003564:	d908      	bls.n	8003578 <UART_SetConfig+0x530>
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d204      	bcs.n	8003578 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	e001      	b.n	800357c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003588:	7dfb      	ldrb	r3, [r7, #23]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3720      	adds	r7, #32
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	01e84800 	.word	0x01e84800
 8003598:	00f42400 	.word	0x00f42400

0800359c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00a      	beq.n	800360a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00a      	beq.n	800362c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	f003 0310 	and.w	r3, r3, #16
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	f003 0320 	and.w	r3, r3, #32
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01a      	beq.n	80036b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800369a:	d10a      	bne.n	80036b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00a      	beq.n	80036d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	430a      	orrs	r2, r1
 80036d2:	605a      	str	r2, [r3, #4]
  }
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80036ee:	f7fd fe4b 	bl	8001388 <HAL_GetTick>
 80036f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d10e      	bne.n	8003720 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003702:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003706:	9300      	str	r3, [sp, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f82a 	bl	800376a <UART_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e020      	b.n	8003762 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d10e      	bne.n	800374c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800372e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f814 	bl	800376a <UART_WaitOnFlagUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e00a      	b.n	8003762 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	603b      	str	r3, [r7, #0]
 8003776:	4613      	mov	r3, r2
 8003778:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377a:	e05d      	b.n	8003838 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003782:	d059      	beq.n	8003838 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003784:	f7fd fe00 	bl	8001388 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	429a      	cmp	r2, r3
 8003792:	d302      	bcc.n	800379a <UART_WaitOnFlagUntilTimeout+0x30>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d11b      	bne.n	80037d2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80037a8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e042      	b.n	8003858 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d02b      	beq.n	8003838 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ee:	d123      	bne.n	8003838 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80037f8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003808:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2220      	movs	r2, #32
 800381e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2220      	movs	r2, #32
 8003824:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2220      	movs	r2, #32
 800382a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e00f      	b.n	8003858 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	69da      	ldr	r2, [r3, #28]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	4013      	ands	r3, r2
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
 8003850:	79fb      	ldrb	r3, [r7, #7]
 8003852:	429a      	cmp	r2, r3
 8003854:	d092      	beq.n	800377c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3710      	adds	r7, #16
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8003864:	bf00      	nop
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
	...

08003870 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003876:	f3ef 8305 	mrs	r3, IPSR
 800387a:	60bb      	str	r3, [r7, #8]
  return(result);
 800387c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800387e:	2b00      	cmp	r3, #0
 8003880:	d10f      	bne.n	80038a2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003882:	f3ef 8310 	mrs	r3, PRIMASK
 8003886:	607b      	str	r3, [r7, #4]
  return(result);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d105      	bne.n	800389a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800388e:	f3ef 8311 	mrs	r3, BASEPRI
 8003892:	603b      	str	r3, [r7, #0]
  return(result);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <osKernelInitialize+0x3a>
 800389a:	4b0e      	ldr	r3, [pc, #56]	; (80038d4 <osKernelInitialize+0x64>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d103      	bne.n	80038aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80038a2:	f06f 0305 	mvn.w	r3, #5
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e00c      	b.n	80038c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038aa:	4b0a      	ldr	r3, [pc, #40]	; (80038d4 <osKernelInitialize+0x64>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d105      	bne.n	80038be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038b2:	4b08      	ldr	r3, [pc, #32]	; (80038d4 <osKernelInitialize+0x64>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	e002      	b.n	80038c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80038be:	f04f 33ff 	mov.w	r3, #4294967295
 80038c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80038c4:	68fb      	ldr	r3, [r7, #12]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	2000002c 	.word	0x2000002c

080038d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038de:	f3ef 8305 	mrs	r3, IPSR
 80038e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80038e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10f      	bne.n	800390a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ea:	f3ef 8310 	mrs	r3, PRIMASK
 80038ee:	607b      	str	r3, [r7, #4]
  return(result);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d105      	bne.n	8003902 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038f6:	f3ef 8311 	mrs	r3, BASEPRI
 80038fa:	603b      	str	r3, [r7, #0]
  return(result);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <osKernelStart+0x3a>
 8003902:	4b0f      	ldr	r3, [pc, #60]	; (8003940 <osKernelStart+0x68>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d103      	bne.n	8003912 <osKernelStart+0x3a>
    stat = osErrorISR;
 800390a:	f06f 0305 	mvn.w	r3, #5
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	e010      	b.n	8003934 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <osKernelStart+0x68>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d109      	bne.n	800392e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800391a:	f7ff ffa1 	bl	8003860 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800391e:	4b08      	ldr	r3, [pc, #32]	; (8003940 <osKernelStart+0x68>)
 8003920:	2202      	movs	r2, #2
 8003922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003924:	f001 f89c 	bl	8004a60 <vTaskStartScheduler>
      stat = osOK;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	e002      	b.n	8003934 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800392e:	f04f 33ff 	mov.w	r3, #4294967295
 8003932:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003934:	68fb      	ldr	r3, [r7, #12]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	2000002c 	.word	0x2000002c

08003944 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b090      	sub	sp, #64	; 0x40
 8003948:	af04      	add	r7, sp, #16
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003954:	f3ef 8305 	mrs	r3, IPSR
 8003958:	61fb      	str	r3, [r7, #28]
  return(result);
 800395a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800395c:	2b00      	cmp	r3, #0
 800395e:	f040 808f 	bne.w	8003a80 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003962:	f3ef 8310 	mrs	r3, PRIMASK
 8003966:	61bb      	str	r3, [r7, #24]
  return(result);
 8003968:	69bb      	ldr	r3, [r7, #24]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800396e:	f3ef 8311 	mrs	r3, BASEPRI
 8003972:	617b      	str	r3, [r7, #20]
  return(result);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <osThreadNew+0x3e>
 800397a:	4b44      	ldr	r3, [pc, #272]	; (8003a8c <osThreadNew+0x148>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d07e      	beq.n	8003a80 <osThreadNew+0x13c>
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d07b      	beq.n	8003a80 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8003988:	2380      	movs	r3, #128	; 0x80
 800398a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800398c:	2318      	movs	r3, #24
 800398e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8003994:	f04f 33ff 	mov.w	r3, #4294967295
 8003998:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d045      	beq.n	8003a2c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d002      	beq.n	80039ae <osThreadNew+0x6a>
        name = attr->name;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d008      	beq.n	80039d4 <osThreadNew+0x90>
 80039c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c4:	2b38      	cmp	r3, #56	; 0x38
 80039c6:	d805      	bhi.n	80039d4 <osThreadNew+0x90>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <osThreadNew+0x94>
        return (NULL);
 80039d4:	2300      	movs	r3, #0
 80039d6:	e054      	b.n	8003a82 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	089b      	lsrs	r3, r3, #2
 80039e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00e      	beq.n	8003a0e <osThreadNew+0xca>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	2b5b      	cmp	r3, #91	; 0x5b
 80039f6:	d90a      	bls.n	8003a0e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d006      	beq.n	8003a0e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d002      	beq.n	8003a0e <osThreadNew+0xca>
        mem = 1;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	623b      	str	r3, [r7, #32]
 8003a0c:	e010      	b.n	8003a30 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d10c      	bne.n	8003a30 <osThreadNew+0xec>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <osThreadNew+0xec>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d104      	bne.n	8003a30 <osThreadNew+0xec>
          mem = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	623b      	str	r3, [r7, #32]
 8003a2a:	e001      	b.n	8003a30 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003a30:	6a3b      	ldr	r3, [r7, #32]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d110      	bne.n	8003a58 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a3e:	9202      	str	r2, [sp, #8]
 8003a40:	9301      	str	r3, [sp, #4]
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	9300      	str	r3, [sp, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 fe2b 	bl	80046a8 <xTaskCreateStatic>
 8003a52:	4603      	mov	r3, r0
 8003a54:	613b      	str	r3, [r7, #16]
 8003a56:	e013      	b.n	8003a80 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d110      	bne.n	8003a80 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	f107 0310 	add.w	r3, r7, #16
 8003a66:	9301      	str	r3, [sp, #4]
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fe79 	bl	8004768 <xTaskCreate>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d001      	beq.n	8003a80 <osThreadNew+0x13c>
          hTask = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a80:	693b      	ldr	r3, [r7, #16]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3730      	adds	r7, #48	; 0x30
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	2000002c 	.word	0x2000002c

08003a90 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a98:	f3ef 8305 	mrs	r3, IPSR
 8003a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8003a9e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d10f      	bne.n	8003ac4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d105      	bne.n	8003abc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003ab0:	f3ef 8311 	mrs	r3, BASEPRI
 8003ab4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d007      	beq.n	8003acc <osDelay+0x3c>
 8003abc:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <osDelay+0x58>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d103      	bne.n	8003acc <osDelay+0x3c>
    stat = osErrorISR;
 8003ac4:	f06f 0305 	mvn.w	r3, #5
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e007      	b.n	8003adc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d002      	beq.n	8003adc <osDelay+0x4c>
      vTaskDelay(ticks);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 ff8c 	bl	80049f4 <vTaskDelay>
    }
  }

  return (stat);
 8003adc:	697b      	ldr	r3, [r7, #20]
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3718      	adds	r7, #24
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	2000002c 	.word	0x2000002c

08003aec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4a07      	ldr	r2, [pc, #28]	; (8003b18 <vApplicationGetIdleTaskMemory+0x2c>)
 8003afc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4a06      	ldr	r2, [pc, #24]	; (8003b1c <vApplicationGetIdleTaskMemory+0x30>)
 8003b02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2280      	movs	r2, #128	; 0x80
 8003b08:	601a      	str	r2, [r3, #0]
}
 8003b0a:	bf00      	nop
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000030 	.word	0x20000030
 8003b1c:	2000008c 	.word	0x2000008c

08003b20 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4a07      	ldr	r2, [pc, #28]	; (8003b4c <vApplicationGetTimerTaskMemory+0x2c>)
 8003b30:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	4a06      	ldr	r2, [pc, #24]	; (8003b50 <vApplicationGetTimerTaskMemory+0x30>)
 8003b36:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b3e:	601a      	str	r2, [r3, #0]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	2000028c 	.word	0x2000028c
 8003b50:	200002e8 	.word	0x200002e8

08003b54 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f103 0208 	add.w	r2, r3, #8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f103 0208 	add.w	r2, r3, #8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f103 0208 	add.w	r2, r3, #8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b085      	sub	sp, #20
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
 8003bb6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	601a      	str	r2, [r3, #0]
}
 8003bea:	bf00      	nop
 8003bec:	3714      	adds	r7, #20
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b085      	sub	sp, #20
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0c:	d103      	bne.n	8003c16 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e00c      	b.n	8003c30 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3308      	adds	r3, #8
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	e002      	b.n	8003c24 <vListInsert+0x2e>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	60fb      	str	r3, [r7, #12]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d2f6      	bcs.n	8003c1e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	601a      	str	r2, [r3, #0]
}
 8003c5c:	bf00      	nop
 8003c5e:	3714      	adds	r7, #20
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6892      	ldr	r2, [r2, #8]
 8003c7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6852      	ldr	r2, [r2, #4]
 8003c88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d103      	bne.n	8003c9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	689a      	ldr	r2, [r3, #8]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	1e5a      	subs	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d10b      	bne.n	8003ce8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd4:	b672      	cpsid	i
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	b662      	cpsie	i
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	e7fe      	b.n	8003ce6 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8003ce8:	f002 f846 	bl	8005d78 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cf8:	fb01 f303 	mul.w	r3, r1, r3
 8003cfc:	441a      	add	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2200      	movs	r2, #0
 8003d06:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d18:	3b01      	subs	r3, #1
 8003d1a:	68f9      	ldr	r1, [r7, #12]
 8003d1c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	441a      	add	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	22ff      	movs	r2, #255	; 0xff
 8003d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	22ff      	movs	r2, #255	; 0xff
 8003d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d114      	bne.n	8003d68 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01a      	beq.n	8003d7c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	3310      	adds	r3, #16
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f001 f916 	bl	8004f7c <xTaskRemoveFromEventList>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d012      	beq.n	8003d7c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d56:	4b0d      	ldr	r3, [pc, #52]	; (8003d8c <xQueueGenericReset+0xd0>)
 8003d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	f3bf 8f6f 	isb	sy
 8003d66:	e009      	b.n	8003d7c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	3310      	adds	r3, #16
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fef1 	bl	8003b54 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3324      	adds	r3, #36	; 0x24
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff feec 	bl	8003b54 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d7c:	f002 f82e 	bl	8005ddc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d80:	2301      	movs	r3, #1
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	e000ed04 	.word	0xe000ed04

08003d90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08e      	sub	sp, #56	; 0x38
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
 8003d9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <xQueueGenericCreateStatic+0x2c>
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	b672      	cpsid	i
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	b662      	cpsie	i
 8003db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dba:	e7fe      	b.n	8003dba <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10b      	bne.n	8003dda <xQueueGenericCreateStatic+0x4a>
 8003dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc6:	b672      	cpsid	i
 8003dc8:	f383 8811 	msr	BASEPRI, r3
 8003dcc:	f3bf 8f6f 	isb	sy
 8003dd0:	f3bf 8f4f 	dsb	sy
 8003dd4:	b662      	cpsie	i
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd8:	e7fe      	b.n	8003dd8 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <xQueueGenericCreateStatic+0x56>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <xQueueGenericCreateStatic+0x5a>
 8003de6:	2301      	movs	r3, #1
 8003de8:	e000      	b.n	8003dec <xQueueGenericCreateStatic+0x5c>
 8003dea:	2300      	movs	r3, #0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10b      	bne.n	8003e08 <xQueueGenericCreateStatic+0x78>
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	b672      	cpsid	i
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	b662      	cpsie	i
 8003e04:	623b      	str	r3, [r7, #32]
 8003e06:	e7fe      	b.n	8003e06 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d102      	bne.n	8003e14 <xQueueGenericCreateStatic+0x84>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <xQueueGenericCreateStatic+0x88>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <xQueueGenericCreateStatic+0x8a>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <xQueueGenericCreateStatic+0xa6>
 8003e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e22:	b672      	cpsid	i
 8003e24:	f383 8811 	msr	BASEPRI, r3
 8003e28:	f3bf 8f6f 	isb	sy
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	b662      	cpsie	i
 8003e32:	61fb      	str	r3, [r7, #28]
 8003e34:	e7fe      	b.n	8003e34 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e36:	2350      	movs	r3, #80	; 0x50
 8003e38:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b50      	cmp	r3, #80	; 0x50
 8003e3e:	d00b      	beq.n	8003e58 <xQueueGenericCreateStatic+0xc8>
 8003e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e44:	b672      	cpsid	i
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	b662      	cpsie	i
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e7fe      	b.n	8003e56 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e58:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00d      	beq.n	8003e80 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e6c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	4613      	mov	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f805 	bl	8003e8a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3730      	adds	r7, #48	; 0x30
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d103      	bne.n	8003ea6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	e002      	b.n	8003eac <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003eb8:	2101      	movs	r1, #1
 8003eba:	69b8      	ldr	r0, [r7, #24]
 8003ebc:	f7ff fefe 	bl	8003cbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ec8:	bf00      	nop
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08e      	sub	sp, #56	; 0x38
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <xQueueGenericSend+0x34>
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	b672      	cpsid	i
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	b662      	cpsie	i
 8003f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f02:	e7fe      	b.n	8003f02 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <xQueueGenericSend+0x42>
 8003f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d101      	bne.n	8003f16 <xQueueGenericSend+0x46>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <xQueueGenericSend+0x48>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10b      	bne.n	8003f34 <xQueueGenericSend+0x64>
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	b672      	cpsid	i
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	b662      	cpsie	i
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
 8003f32:	e7fe      	b.n	8003f32 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d103      	bne.n	8003f42 <xQueueGenericSend+0x72>
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <xQueueGenericSend+0x76>
 8003f42:	2301      	movs	r3, #1
 8003f44:	e000      	b.n	8003f48 <xQueueGenericSend+0x78>
 8003f46:	2300      	movs	r3, #0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10b      	bne.n	8003f64 <xQueueGenericSend+0x94>
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	b672      	cpsid	i
 8003f52:	f383 8811 	msr	BASEPRI, r3
 8003f56:	f3bf 8f6f 	isb	sy
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	b662      	cpsie	i
 8003f60:	623b      	str	r3, [r7, #32]
 8003f62:	e7fe      	b.n	8003f62 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f64:	f001 f9c8 	bl	80052f8 <xTaskGetSchedulerState>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <xQueueGenericSend+0xa4>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <xQueueGenericSend+0xa8>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <xQueueGenericSend+0xaa>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d10b      	bne.n	8003f96 <xQueueGenericSend+0xc6>
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	b672      	cpsid	i
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	b662      	cpsie	i
 8003f92:	61fb      	str	r3, [r7, #28]
 8003f94:	e7fe      	b.n	8003f94 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f96:	f001 feef 	bl	8005d78 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d302      	bcc.n	8003fac <xQueueGenericSend+0xdc>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d129      	bne.n	8004000 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fb2:	f000 fa0d 	bl	80043d0 <prvCopyDataToQueue>
 8003fb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d010      	beq.n	8003fe2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc2:	3324      	adds	r3, #36	; 0x24
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 ffd9 	bl	8004f7c <xTaskRemoveFromEventList>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d013      	beq.n	8003ff8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003fd0:	4b3f      	ldr	r3, [pc, #252]	; (80040d0 <xQueueGenericSend+0x200>)
 8003fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	e00a      	b.n	8003ff8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fe8:	4b39      	ldr	r3, [pc, #228]	; (80040d0 <xQueueGenericSend+0x200>)
 8003fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003ff8:	f001 fef0 	bl	8005ddc <vPortExitCritical>
				return pdPASS;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e063      	b.n	80040c8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004006:	f001 fee9 	bl	8005ddc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800400a:	2300      	movs	r3, #0
 800400c:	e05c      	b.n	80040c8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004010:	2b00      	cmp	r3, #0
 8004012:	d106      	bne.n	8004022 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004014:	f107 0314 	add.w	r3, r7, #20
 8004018:	4618      	mov	r0, r3
 800401a:	f001 f813 	bl	8005044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800401e:	2301      	movs	r3, #1
 8004020:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004022:	f001 fedb 	bl	8005ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004026:	f000 fd83 	bl	8004b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800402a:	f001 fea5 	bl	8005d78 <vPortEnterCritical>
 800402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004030:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004034:	b25b      	sxtb	r3, r3
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d103      	bne.n	8004044 <xQueueGenericSend+0x174>
 800403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800404a:	b25b      	sxtb	r3, r3
 800404c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004050:	d103      	bne.n	800405a <xQueueGenericSend+0x18a>
 8004052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004054:	2200      	movs	r2, #0
 8004056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800405a:	f001 febf 	bl	8005ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800405e:	1d3a      	adds	r2, r7, #4
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f001 f802 	bl	8005070 <xTaskCheckForTimeOut>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d124      	bne.n	80040bc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004072:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004074:	f000 faa4 	bl	80045c0 <prvIsQueueFull>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d018      	beq.n	80040b0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	3310      	adds	r3, #16
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f000 ff26 	bl	8004ed8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800408c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800408e:	f000 fa2f 	bl	80044f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004092:	f000 fd5b 	bl	8004b4c <xTaskResumeAll>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	f47f af7c 	bne.w	8003f96 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800409e:	4b0c      	ldr	r3, [pc, #48]	; (80040d0 <xQueueGenericSend+0x200>)
 80040a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	e772      	b.n	8003f96 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b2:	f000 fa1d 	bl	80044f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040b6:	f000 fd49 	bl	8004b4c <xTaskResumeAll>
 80040ba:	e76c      	b.n	8003f96 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040be:	f000 fa17 	bl	80044f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040c2:	f000 fd43 	bl	8004b4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80040c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3738      	adds	r7, #56	; 0x38
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	e000ed04 	.word	0xe000ed04

080040d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08e      	sub	sp, #56	; 0x38
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
 80040e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80040e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <xQueueGenericSendFromISR+0x30>
 80040ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f0:	b672      	cpsid	i
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	b662      	cpsie	i
 8004100:	627b      	str	r3, [r7, #36]	; 0x24
 8004102:	e7fe      	b.n	8004102 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d103      	bne.n	8004112 <xQueueGenericSendFromISR+0x3e>
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	d101      	bne.n	8004116 <xQueueGenericSendFromISR+0x42>
 8004112:	2301      	movs	r3, #1
 8004114:	e000      	b.n	8004118 <xQueueGenericSendFromISR+0x44>
 8004116:	2300      	movs	r3, #0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10b      	bne.n	8004134 <xQueueGenericSendFromISR+0x60>
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	b672      	cpsid	i
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	b662      	cpsie	i
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	e7fe      	b.n	8004132 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	2b02      	cmp	r3, #2
 8004138:	d103      	bne.n	8004142 <xQueueGenericSendFromISR+0x6e>
 800413a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <xQueueGenericSendFromISR+0x72>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <xQueueGenericSendFromISR+0x74>
 8004146:	2300      	movs	r3, #0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10b      	bne.n	8004164 <xQueueGenericSendFromISR+0x90>
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	b672      	cpsid	i
 8004152:	f383 8811 	msr	BASEPRI, r3
 8004156:	f3bf 8f6f 	isb	sy
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	b662      	cpsie	i
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	e7fe      	b.n	8004162 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004164:	f001 fee8 	bl	8005f38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004168:	f3ef 8211 	mrs	r2, BASEPRI
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	b672      	cpsid	i
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	b662      	cpsie	i
 8004180:	61ba      	str	r2, [r7, #24]
 8004182:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004184:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004190:	429a      	cmp	r2, r3
 8004192:	d302      	bcc.n	800419a <xQueueGenericSendFromISR+0xc6>
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b02      	cmp	r3, #2
 8004198:	d12c      	bne.n	80041f4 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	68b9      	ldr	r1, [r7, #8]
 80041a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041aa:	f000 f911 	bl	80043d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041ae:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b6:	d112      	bne.n	80041de <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	3324      	adds	r3, #36	; 0x24
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fed9 	bl	8004f7c <xTaskRemoveFromEventList>
 80041ca:	4603      	mov	r3, r0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00e      	beq.n	80041ee <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00b      	beq.n	80041ee <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	e007      	b.n	80041ee <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80041de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041e2:	3301      	adds	r3, #1
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	b25a      	sxtb	r2, r3
 80041e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80041ee:	2301      	movs	r3, #1
 80041f0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80041f2:	e001      	b.n	80041f8 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041f4:	2300      	movs	r3, #0
 80041f6:	637b      	str	r3, [r7, #52]	; 0x34
 80041f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041fa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004204:	4618      	mov	r0, r3
 8004206:	3738      	adds	r7, #56	; 0x38
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08c      	sub	sp, #48	; 0x30
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004218:	2300      	movs	r3, #0
 800421a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10b      	bne.n	800423e <xQueueReceive+0x32>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	b672      	cpsid	i
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	b662      	cpsie	i
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	e7fe      	b.n	800423c <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d103      	bne.n	800424c <xQueueReceive+0x40>
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <xQueueReceive+0x44>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <xQueueReceive+0x46>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d10b      	bne.n	800426e <xQueueReceive+0x62>
 8004256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800425a:	b672      	cpsid	i
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	b662      	cpsie	i
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	e7fe      	b.n	800426c <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800426e:	f001 f843 	bl	80052f8 <xTaskGetSchedulerState>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d102      	bne.n	800427e <xQueueReceive+0x72>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <xQueueReceive+0x76>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <xQueueReceive+0x78>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10b      	bne.n	80042a0 <xQueueReceive+0x94>
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	b672      	cpsid	i
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	b662      	cpsie	i
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	e7fe      	b.n	800429e <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042a0:	f001 fd6a 	bl	8005d78 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01f      	beq.n	80042f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042b4:	f000 f8f6 	bl	80044a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ba:	1e5a      	subs	r2, r3, #1
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00f      	beq.n	80042e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	3310      	adds	r3, #16
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fe55 	bl	8004f7c <xTaskRemoveFromEventList>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042d8:	4b3c      	ldr	r3, [pc, #240]	; (80043cc <xQueueReceive+0x1c0>)
 80042da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042e8:	f001 fd78 	bl	8005ddc <vPortExitCritical>
				return pdPASS;
 80042ec:	2301      	movs	r3, #1
 80042ee:	e069      	b.n	80043c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d103      	bne.n	80042fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042f6:	f001 fd71 	bl	8005ddc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042fa:	2300      	movs	r3, #0
 80042fc:	e062      	b.n	80043c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004300:	2b00      	cmp	r3, #0
 8004302:	d106      	bne.n	8004312 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004304:	f107 0310 	add.w	r3, r7, #16
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fe9b 	bl	8005044 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800430e:	2301      	movs	r3, #1
 8004310:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004312:	f001 fd63 	bl	8005ddc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004316:	f000 fc0b 	bl	8004b30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800431a:	f001 fd2d 	bl	8005d78 <vPortEnterCritical>
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004324:	b25b      	sxtb	r3, r3
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d103      	bne.n	8004334 <xQueueReceive+0x128>
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	2200      	movs	r2, #0
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800433a:	b25b      	sxtb	r3, r3
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d103      	bne.n	800434a <xQueueReceive+0x13e>
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800434a:	f001 fd47 	bl	8005ddc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800434e:	1d3a      	adds	r2, r7, #4
 8004350:	f107 0310 	add.w	r3, r7, #16
 8004354:	4611      	mov	r1, r2
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fe8a 	bl	8005070 <xTaskCheckForTimeOut>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d123      	bne.n	80043aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004364:	f000 f916 	bl	8004594 <prvIsQueueEmpty>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d017      	beq.n	800439e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	3324      	adds	r3, #36	; 0x24
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4611      	mov	r1, r2
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fdae 	bl	8004ed8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800437c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800437e:	f000 f8b7 	bl	80044f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004382:	f000 fbe3 	bl	8004b4c <xTaskResumeAll>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d189      	bne.n	80042a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <xQueueReceive+0x1c0>)
 800438e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	e780      	b.n	80042a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800439e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043a0:	f000 f8a6 	bl	80044f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043a4:	f000 fbd2 	bl	8004b4c <xTaskResumeAll>
 80043a8:	e77a      	b.n	80042a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ac:	f000 f8a0 	bl	80044f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043b0:	f000 fbcc 	bl	8004b4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043b6:	f000 f8ed 	bl	8004594 <prvIsQueueEmpty>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f43f af6f 	beq.w	80042a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3730      	adds	r7, #48	; 0x30
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	e000ed04 	.word	0xe000ed04

080043d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b086      	sub	sp, #24
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043dc:	2300      	movs	r3, #0
 80043de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10d      	bne.n	800440a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d14d      	bne.n	8004492 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 ff9a 	bl	8005334 <xTaskPriorityDisinherit>
 8004400:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	609a      	str	r2, [r3, #8]
 8004408:	e043      	b.n	8004492 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d119      	bne.n	8004444 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6858      	ldr	r0, [r3, #4]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	461a      	mov	r2, r3
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	f001 ffd2 	bl	80063c4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004428:	441a      	add	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	429a      	cmp	r2, r3
 8004438:	d32b      	bcc.n	8004492 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	605a      	str	r2, [r3, #4]
 8004442:	e026      	b.n	8004492 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68d8      	ldr	r0, [r3, #12]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444c:	461a      	mov	r2, r3
 800444e:	68b9      	ldr	r1, [r7, #8]
 8004450:	f001 ffb8 	bl	80063c4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	425b      	negs	r3, r3
 800445e:	441a      	add	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d207      	bcs.n	8004480 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004478:	425b      	negs	r3, r3
 800447a:	441a      	add	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b02      	cmp	r3, #2
 8004484:	d105      	bne.n	8004492 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	3b01      	subs	r3, #1
 8004490:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800449a:	697b      	ldr	r3, [r7, #20]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3718      	adds	r7, #24
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b082      	sub	sp, #8
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d018      	beq.n	80044e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68da      	ldr	r2, [r3, #12]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044be:	441a      	add	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68da      	ldr	r2, [r3, #12]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d303      	bcc.n	80044d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	68d9      	ldr	r1, [r3, #12]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	461a      	mov	r2, r3
 80044e2:	6838      	ldr	r0, [r7, #0]
 80044e4:	f001 ff6e 	bl	80063c4 <memcpy>
	}
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044f8:	f001 fc3e 	bl	8005d78 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004502:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004504:	e011      	b.n	800452a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d012      	beq.n	8004534 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	3324      	adds	r3, #36	; 0x24
 8004512:	4618      	mov	r0, r3
 8004514:	f000 fd32 	bl	8004f7c <xTaskRemoveFromEventList>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800451e:	f000 fe0b 	bl	8005138 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004522:	7bfb      	ldrb	r3, [r7, #15]
 8004524:	3b01      	subs	r3, #1
 8004526:	b2db      	uxtb	r3, r3
 8004528:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800452a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	dce9      	bgt.n	8004506 <prvUnlockQueue+0x16>
 8004532:	e000      	b.n	8004536 <prvUnlockQueue+0x46>
					break;
 8004534:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	22ff      	movs	r2, #255	; 0xff
 800453a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800453e:	f001 fc4d 	bl	8005ddc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004542:	f001 fc19 	bl	8005d78 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800454c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800454e:	e011      	b.n	8004574 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d012      	beq.n	800457e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	3310      	adds	r3, #16
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fd0d 	bl	8004f7c <xTaskRemoveFromEventList>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004568:	f000 fde6 	bl	8005138 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800456c:	7bbb      	ldrb	r3, [r7, #14]
 800456e:	3b01      	subs	r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004574:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004578:	2b00      	cmp	r3, #0
 800457a:	dce9      	bgt.n	8004550 <prvUnlockQueue+0x60>
 800457c:	e000      	b.n	8004580 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800457e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	22ff      	movs	r2, #255	; 0xff
 8004584:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004588:	f001 fc28 	bl	8005ddc <vPortExitCritical>
}
 800458c:	bf00      	nop
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800459c:	f001 fbec 	bl	8005d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045a8:	2301      	movs	r3, #1
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e001      	b.n	80045b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045b2:	f001 fc13 	bl	8005ddc <vPortExitCritical>

	return xReturn;
 80045b6:	68fb      	ldr	r3, [r7, #12]
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045c8:	f001 fbd6 	bl	8005d78 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d102      	bne.n	80045de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045d8:	2301      	movs	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]
 80045dc:	e001      	b.n	80045e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045de:	2300      	movs	r3, #0
 80045e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045e2:	f001 fbfb 	bl	8005ddc <vPortExitCritical>

	return xReturn;
 80045e6:	68fb      	ldr	r3, [r7, #12]
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	e014      	b.n	800462a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004600:	4a0e      	ldr	r2, [pc, #56]	; (800463c <vQueueAddToRegistry+0x4c>)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10b      	bne.n	8004624 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800460c:	490b      	ldr	r1, [pc, #44]	; (800463c <vQueueAddToRegistry+0x4c>)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004616:	4a09      	ldr	r2, [pc, #36]	; (800463c <vQueueAddToRegistry+0x4c>)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004622:	e005      	b.n	8004630 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	3301      	adds	r3, #1
 8004628:	60fb      	str	r3, [r7, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b07      	cmp	r3, #7
 800462e:	d9e7      	bls.n	8004600 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr
 800463c:	20004e14 	.word	0x20004e14

08004640 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004650:	f001 fb92 	bl	8005d78 <vPortEnterCritical>
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800465a:	b25b      	sxtb	r3, r3
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d103      	bne.n	800466a <vQueueWaitForMessageRestricted+0x2a>
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004670:	b25b      	sxtb	r3, r3
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d103      	bne.n	8004680 <vQueueWaitForMessageRestricted+0x40>
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004680:	f001 fbac 	bl	8005ddc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	3324      	adds	r3, #36	; 0x24
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	68b9      	ldr	r1, [r7, #8]
 8004694:	4618      	mov	r0, r3
 8004696:	f000 fc45 	bl	8004f24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800469a:	6978      	ldr	r0, [r7, #20]
 800469c:	f7ff ff28 	bl	80044f0 <prvUnlockQueue>
	}
 80046a0:	bf00      	nop
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08e      	sub	sp, #56	; 0x38
 80046ac:	af04      	add	r7, sp, #16
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
 80046b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <xTaskCreateStatic+0x2c>
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	b672      	cpsid	i
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	b662      	cpsie	i
 80046d0:	623b      	str	r3, [r7, #32]
 80046d2:	e7fe      	b.n	80046d2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10b      	bne.n	80046f2 <xTaskCreateStatic+0x4a>
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	b672      	cpsid	i
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	b662      	cpsie	i
 80046ee:	61fb      	str	r3, [r7, #28]
 80046f0:	e7fe      	b.n	80046f0 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046f2:	235c      	movs	r3, #92	; 0x5c
 80046f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	2b5c      	cmp	r3, #92	; 0x5c
 80046fa:	d00b      	beq.n	8004714 <xTaskCreateStatic+0x6c>
 80046fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004700:	b672      	cpsid	i
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	b662      	cpsie	i
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e7fe      	b.n	8004712 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004714:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01e      	beq.n	800475a <xTaskCreateStatic+0xb2>
 800471c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01b      	beq.n	800475a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800472a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	2202      	movs	r2, #2
 8004730:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004734:	2300      	movs	r3, #0
 8004736:	9303      	str	r3, [sp, #12]
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	9302      	str	r3, [sp, #8]
 800473c:	f107 0314 	add.w	r3, r7, #20
 8004740:	9301      	str	r3, [sp, #4]
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	9300      	str	r3, [sp, #0]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	68b9      	ldr	r1, [r7, #8]
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 f850 	bl	80047f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004752:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004754:	f000 f8de 	bl	8004914 <prvAddNewTaskToReadyList>
 8004758:	e001      	b.n	800475e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800475e:	697b      	ldr	r3, [r7, #20]
	}
 8004760:	4618      	mov	r0, r3
 8004762:	3728      	adds	r7, #40	; 0x28
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08c      	sub	sp, #48	; 0x30
 800476c:	af04      	add	r7, sp, #16
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	4613      	mov	r3, r2
 8004776:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	4618      	mov	r0, r3
 800477e:	f001 fc1d 	bl	8005fbc <pvPortMalloc>
 8004782:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00e      	beq.n	80047a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800478a:	205c      	movs	r0, #92	; 0x5c
 800478c:	f001 fc16 	bl	8005fbc <pvPortMalloc>
 8004790:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
 800479e:	e005      	b.n	80047ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047a0:	6978      	ldr	r0, [r7, #20]
 80047a2:	f001 fcd3 	bl	800614c <vPortFree>
 80047a6:	e001      	b.n	80047ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d017      	beq.n	80047e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047ba:	88fa      	ldrh	r2, [r7, #6]
 80047bc:	2300      	movs	r3, #0
 80047be:	9303      	str	r3, [sp, #12]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	9302      	str	r3, [sp, #8]
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	9301      	str	r3, [sp, #4]
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	9300      	str	r3, [sp, #0]
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	68b9      	ldr	r1, [r7, #8]
 80047d0:	68f8      	ldr	r0, [r7, #12]
 80047d2:	f000 f80e 	bl	80047f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80047d6:	69f8      	ldr	r0, [r7, #28]
 80047d8:	f000 f89c 	bl	8004914 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80047dc:	2301      	movs	r3, #1
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e002      	b.n	80047e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295
 80047e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80047e8:	69bb      	ldr	r3, [r7, #24]
	}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b088      	sub	sp, #32
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
 80047fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004802:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	461a      	mov	r2, r3
 800480a:	21a5      	movs	r1, #165	; 0xa5
 800480c:	f001 fde5 	bl	80063da <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800481a:	440b      	add	r3, r1
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	f023 0307 	bic.w	r3, r3, #7
 8004828:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <prvInitialiseNewTask+0x5a>
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	b672      	cpsid	i
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	b662      	cpsie	i
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e7fe      	b.n	800484a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01f      	beq.n	8004892 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
 8004856:	e012      	b.n	800487e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004858:	68ba      	ldr	r2, [r7, #8]
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	4413      	add	r3, r2
 800485e:	7819      	ldrb	r1, [r3, #0]
 8004860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	4413      	add	r3, r2
 8004866:	3334      	adds	r3, #52	; 0x34
 8004868:	460a      	mov	r2, r1
 800486a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d006      	beq.n	8004886 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	3301      	adds	r3, #1
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	2b0f      	cmp	r3, #15
 8004882:	d9e9      	bls.n	8004858 <prvInitialiseNewTask+0x66>
 8004884:	e000      	b.n	8004888 <prvInitialiseNewTask+0x96>
			{
				break;
 8004886:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004890:	e003      	b.n	800489a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800489a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489c:	2b37      	cmp	r3, #55	; 0x37
 800489e:	d901      	bls.n	80048a4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048a0:	2337      	movs	r3, #55	; 0x37
 80048a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b2:	2200      	movs	r2, #0
 80048b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b8:	3304      	adds	r3, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff f96a 	bl	8003b94 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c2:	3318      	adds	r3, #24
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff f965 	bl	8003b94 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	2200      	movs	r2, #0
 80048e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	68f9      	ldr	r1, [r7, #12]
 80048f2:	69b8      	ldr	r0, [r7, #24]
 80048f4:	f001 f936 	bl	8005b64 <pxPortInitialiseStack>
 80048f8:	4602      	mov	r2, r0
 80048fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004906:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004908:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800490a:	bf00      	nop
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b082      	sub	sp, #8
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800491c:	f001 fa2c 	bl	8005d78 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004920:	4b2d      	ldr	r3, [pc, #180]	; (80049d8 <prvAddNewTaskToReadyList+0xc4>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	3301      	adds	r3, #1
 8004926:	4a2c      	ldr	r2, [pc, #176]	; (80049d8 <prvAddNewTaskToReadyList+0xc4>)
 8004928:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800492a:	4b2c      	ldr	r3, [pc, #176]	; (80049dc <prvAddNewTaskToReadyList+0xc8>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d109      	bne.n	8004946 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004932:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <prvAddNewTaskToReadyList+0xc8>)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004938:	4b27      	ldr	r3, [pc, #156]	; (80049d8 <prvAddNewTaskToReadyList+0xc4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d110      	bne.n	8004962 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004940:	f000 fc1e 	bl	8005180 <prvInitialiseTaskLists>
 8004944:	e00d      	b.n	8004962 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004946:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <prvAddNewTaskToReadyList+0xcc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800494e:	4b23      	ldr	r3, [pc, #140]	; (80049dc <prvAddNewTaskToReadyList+0xc8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	429a      	cmp	r2, r3
 800495a:	d802      	bhi.n	8004962 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800495c:	4a1f      	ldr	r2, [pc, #124]	; (80049dc <prvAddNewTaskToReadyList+0xc8>)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004962:	4b20      	ldr	r3, [pc, #128]	; (80049e4 <prvAddNewTaskToReadyList+0xd0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	3301      	adds	r3, #1
 8004968:	4a1e      	ldr	r2, [pc, #120]	; (80049e4 <prvAddNewTaskToReadyList+0xd0>)
 800496a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800496c:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <prvAddNewTaskToReadyList+0xd0>)
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004978:	4b1b      	ldr	r3, [pc, #108]	; (80049e8 <prvAddNewTaskToReadyList+0xd4>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	429a      	cmp	r2, r3
 800497e:	d903      	bls.n	8004988 <prvAddNewTaskToReadyList+0x74>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	4a18      	ldr	r2, [pc, #96]	; (80049e8 <prvAddNewTaskToReadyList+0xd4>)
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800498c:	4613      	mov	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	4a15      	ldr	r2, [pc, #84]	; (80049ec <prvAddNewTaskToReadyList+0xd8>)
 8004996:	441a      	add	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3304      	adds	r3, #4
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f7ff f905 	bl	8003bae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80049a4:	f001 fa1a 	bl	8005ddc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80049a8:	4b0d      	ldr	r3, [pc, #52]	; (80049e0 <prvAddNewTaskToReadyList+0xcc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00e      	beq.n	80049ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80049b0:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <prvAddNewTaskToReadyList+0xc8>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d207      	bcs.n	80049ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80049be:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <prvAddNewTaskToReadyList+0xdc>)
 80049c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049ce:	bf00      	nop
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	20000bbc 	.word	0x20000bbc
 80049dc:	200006e8 	.word	0x200006e8
 80049e0:	20000bc8 	.word	0x20000bc8
 80049e4:	20000bd8 	.word	0x20000bd8
 80049e8:	20000bc4 	.word	0x20000bc4
 80049ec:	200006ec 	.word	0x200006ec
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d018      	beq.n	8004a38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a06:	4b14      	ldr	r3, [pc, #80]	; (8004a58 <vTaskDelay+0x64>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d00b      	beq.n	8004a26 <vTaskDelay+0x32>
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	b672      	cpsid	i
 8004a14:	f383 8811 	msr	BASEPRI, r3
 8004a18:	f3bf 8f6f 	isb	sy
 8004a1c:	f3bf 8f4f 	dsb	sy
 8004a20:	b662      	cpsie	i
 8004a22:	60bb      	str	r3, [r7, #8]
 8004a24:	e7fe      	b.n	8004a24 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8004a26:	f000 f883 	bl	8004b30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 fcf1 	bl	8005414 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a32:	f000 f88b 	bl	8004b4c <xTaskResumeAll>
 8004a36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <vTaskDelay+0x68>)
 8004a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a4e:	bf00      	nop
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000be4 	.word	0x20000be4
 8004a5c:	e000ed04 	.word	0xe000ed04

08004a60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	; 0x28
 8004a64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a66:	2300      	movs	r3, #0
 8004a68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a6e:	463a      	mov	r2, r7
 8004a70:	1d39      	adds	r1, r7, #4
 8004a72:	f107 0308 	add.w	r3, r7, #8
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7ff f838 	bl	8003aec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	9202      	str	r2, [sp, #8]
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	2300      	movs	r3, #0
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	460a      	mov	r2, r1
 8004a8e:	4922      	ldr	r1, [pc, #136]	; (8004b18 <vTaskStartScheduler+0xb8>)
 8004a90:	4822      	ldr	r0, [pc, #136]	; (8004b1c <vTaskStartScheduler+0xbc>)
 8004a92:	f7ff fe09 	bl	80046a8 <xTaskCreateStatic>
 8004a96:	4602      	mov	r2, r0
 8004a98:	4b21      	ldr	r3, [pc, #132]	; (8004b20 <vTaskStartScheduler+0xc0>)
 8004a9a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a9c:	4b20      	ldr	r3, [pc, #128]	; (8004b20 <vTaskStartScheduler+0xc0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d002      	beq.n	8004aaa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	e001      	b.n	8004aae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d102      	bne.n	8004aba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ab4:	f000 fd02 	bl	80054bc <xTimerCreateTimerTask>
 8004ab8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d117      	bne.n	8004af0 <vTaskStartScheduler+0x90>
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	b672      	cpsid	i
 8004ac6:	f383 8811 	msr	BASEPRI, r3
 8004aca:	f3bf 8f6f 	isb	sy
 8004ace:	f3bf 8f4f 	dsb	sy
 8004ad2:	b662      	cpsie	i
 8004ad4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ad6:	4b13      	ldr	r3, [pc, #76]	; (8004b24 <vTaskStartScheduler+0xc4>)
 8004ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8004adc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004ade:	4b12      	ldr	r3, [pc, #72]	; (8004b28 <vTaskStartScheduler+0xc8>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004ae4:	4b11      	ldr	r3, [pc, #68]	; (8004b2c <vTaskStartScheduler+0xcc>)
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004aea:	f001 f8c9 	bl	8005c80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004aee:	e00f      	b.n	8004b10 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d10b      	bne.n	8004b10 <vTaskStartScheduler+0xb0>
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	b672      	cpsid	i
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	b662      	cpsie	i
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e7fe      	b.n	8004b0e <vTaskStartScheduler+0xae>
}
 8004b10:	bf00      	nop
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	08006410 	.word	0x08006410
 8004b1c:	08005151 	.word	0x08005151
 8004b20:	20000be0 	.word	0x20000be0
 8004b24:	20000bdc 	.word	0x20000bdc
 8004b28:	20000bc8 	.word	0x20000bc8
 8004b2c:	20000bc0 	.word	0x20000bc0

08004b30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004b34:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <vTaskSuspendAll+0x18>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	4a03      	ldr	r2, [pc, #12]	; (8004b48 <vTaskSuspendAll+0x18>)
 8004b3c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004b3e:	bf00      	nop
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	20000be4 	.word	0x20000be4

08004b4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b5a:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <xTaskResumeAll+0x118>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10b      	bne.n	8004b7a <xTaskResumeAll+0x2e>
 8004b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b66:	b672      	cpsid	i
 8004b68:	f383 8811 	msr	BASEPRI, r3
 8004b6c:	f3bf 8f6f 	isb	sy
 8004b70:	f3bf 8f4f 	dsb	sy
 8004b74:	b662      	cpsie	i
 8004b76:	603b      	str	r3, [r7, #0]
 8004b78:	e7fe      	b.n	8004b78 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b7a:	f001 f8fd 	bl	8005d78 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b7e:	4b39      	ldr	r3, [pc, #228]	; (8004c64 <xTaskResumeAll+0x118>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	4a37      	ldr	r2, [pc, #220]	; (8004c64 <xTaskResumeAll+0x118>)
 8004b86:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b88:	4b36      	ldr	r3, [pc, #216]	; (8004c64 <xTaskResumeAll+0x118>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d162      	bne.n	8004c56 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b90:	4b35      	ldr	r3, [pc, #212]	; (8004c68 <xTaskResumeAll+0x11c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d05e      	beq.n	8004c56 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b98:	e02f      	b.n	8004bfa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b9a:	4b34      	ldr	r3, [pc, #208]	; (8004c6c <xTaskResumeAll+0x120>)
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3318      	adds	r3, #24
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7ff f85e 	bl	8003c68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff f859 	bl	8003c68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bba:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <xTaskResumeAll+0x124>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d903      	bls.n	8004bca <xTaskResumeAll+0x7e>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc6:	4a2a      	ldr	r2, [pc, #168]	; (8004c70 <xTaskResumeAll+0x124>)
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bce:	4613      	mov	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4a27      	ldr	r2, [pc, #156]	; (8004c74 <xTaskResumeAll+0x128>)
 8004bd8:	441a      	add	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	4619      	mov	r1, r3
 8004be0:	4610      	mov	r0, r2
 8004be2:	f7fe ffe4 	bl	8003bae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <xTaskResumeAll+0x12c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d302      	bcc.n	8004bfa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004bf4:	4b21      	ldr	r3, [pc, #132]	; (8004c7c <xTaskResumeAll+0x130>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bfa:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <xTaskResumeAll+0x120>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1cb      	bne.n	8004b9a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d001      	beq.n	8004c0c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c08:	f000 fb56 	bl	80052b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004c0c:	4b1c      	ldr	r3, [pc, #112]	; (8004c80 <xTaskResumeAll+0x134>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d010      	beq.n	8004c3a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c18:	f000 f846 	bl	8004ca8 <xTaskIncrementTick>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d002      	beq.n	8004c28 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004c22:	4b16      	ldr	r3, [pc, #88]	; (8004c7c <xTaskResumeAll+0x130>)
 8004c24:	2201      	movs	r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1f1      	bne.n	8004c18 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8004c34:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <xTaskResumeAll+0x134>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c3a:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <xTaskResumeAll+0x130>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004c42:	2301      	movs	r3, #1
 8004c44:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004c46:	4b0f      	ldr	r3, [pc, #60]	; (8004c84 <xTaskResumeAll+0x138>)
 8004c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4c:	601a      	str	r2, [r3, #0]
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c56:	f001 f8c1 	bl	8005ddc <vPortExitCritical>

	return xAlreadyYielded;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000be4 	.word	0x20000be4
 8004c68:	20000bbc 	.word	0x20000bbc
 8004c6c:	20000b7c 	.word	0x20000b7c
 8004c70:	20000bc4 	.word	0x20000bc4
 8004c74:	200006ec 	.word	0x200006ec
 8004c78:	200006e8 	.word	0x200006e8
 8004c7c:	20000bd0 	.word	0x20000bd0
 8004c80:	20000bcc 	.word	0x20000bcc
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c8e:	4b05      	ldr	r3, [pc, #20]	; (8004ca4 <xTaskGetTickCount+0x1c>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c94:	687b      	ldr	r3, [r7, #4]
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000bc0 	.word	0x20000bc0

08004ca8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cb2:	4b4f      	ldr	r3, [pc, #316]	; (8004df0 <xTaskIncrementTick+0x148>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	f040 808a 	bne.w	8004dd0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004cbc:	4b4d      	ldr	r3, [pc, #308]	; (8004df4 <xTaskIncrementTick+0x14c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004cc4:	4a4b      	ldr	r2, [pc, #300]	; (8004df4 <xTaskIncrementTick+0x14c>)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d121      	bne.n	8004d14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004cd0:	4b49      	ldr	r3, [pc, #292]	; (8004df8 <xTaskIncrementTick+0x150>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00b      	beq.n	8004cf2 <xTaskIncrementTick+0x4a>
 8004cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cde:	b672      	cpsid	i
 8004ce0:	f383 8811 	msr	BASEPRI, r3
 8004ce4:	f3bf 8f6f 	isb	sy
 8004ce8:	f3bf 8f4f 	dsb	sy
 8004cec:	b662      	cpsie	i
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	e7fe      	b.n	8004cf0 <xTaskIncrementTick+0x48>
 8004cf2:	4b41      	ldr	r3, [pc, #260]	; (8004df8 <xTaskIncrementTick+0x150>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]
 8004cf8:	4b40      	ldr	r3, [pc, #256]	; (8004dfc <xTaskIncrementTick+0x154>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a3e      	ldr	r2, [pc, #248]	; (8004df8 <xTaskIncrementTick+0x150>)
 8004cfe:	6013      	str	r3, [r2, #0]
 8004d00:	4a3e      	ldr	r2, [pc, #248]	; (8004dfc <xTaskIncrementTick+0x154>)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6013      	str	r3, [r2, #0]
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <xTaskIncrementTick+0x158>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <xTaskIncrementTick+0x158>)
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	f000 fad2 	bl	80052b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d14:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <xTaskIncrementTick+0x15c>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d349      	bcc.n	8004db2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d1e:	4b36      	ldr	r3, [pc, #216]	; (8004df8 <xTaskIncrementTick+0x150>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d28:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <xTaskIncrementTick+0x15c>)
 8004d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2e:	601a      	str	r2, [r3, #0]
					break;
 8004d30:	e03f      	b.n	8004db2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d32:	4b31      	ldr	r3, [pc, #196]	; (8004df8 <xTaskIncrementTick+0x150>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004d42:	693a      	ldr	r2, [r7, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d203      	bcs.n	8004d52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004d4a:	4a2e      	ldr	r2, [pc, #184]	; (8004e04 <xTaskIncrementTick+0x15c>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004d50:	e02f      	b.n	8004db2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe ff86 	bl	8003c68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d004      	beq.n	8004d6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	3318      	adds	r3, #24
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fe ff7d 	bl	8003c68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d72:	4b25      	ldr	r3, [pc, #148]	; (8004e08 <xTaskIncrementTick+0x160>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d903      	bls.n	8004d82 <xTaskIncrementTick+0xda>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7e:	4a22      	ldr	r2, [pc, #136]	; (8004e08 <xTaskIncrementTick+0x160>)
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4a1f      	ldr	r2, [pc, #124]	; (8004e0c <xTaskIncrementTick+0x164>)
 8004d90:	441a      	add	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fe ff08 	bl	8003bae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004da2:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <xTaskIncrementTick+0x168>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d3b8      	bcc.n	8004d1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004dac:	2301      	movs	r3, #1
 8004dae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004db0:	e7b5      	b.n	8004d1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004db2:	4b17      	ldr	r3, [pc, #92]	; (8004e10 <xTaskIncrementTick+0x168>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004db8:	4914      	ldr	r1, [pc, #80]	; (8004e0c <xTaskIncrementTick+0x164>)
 8004dba:	4613      	mov	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	440b      	add	r3, r1
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d907      	bls.n	8004dda <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	617b      	str	r3, [r7, #20]
 8004dce:	e004      	b.n	8004dda <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004dd0:	4b10      	ldr	r3, [pc, #64]	; (8004e14 <xTaskIncrementTick+0x16c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <xTaskIncrementTick+0x16c>)
 8004dd8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004dda:	4b0f      	ldr	r3, [pc, #60]	; (8004e18 <xTaskIncrementTick+0x170>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8004de2:	2301      	movs	r3, #1
 8004de4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004de6:	697b      	ldr	r3, [r7, #20]
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	20000be4 	.word	0x20000be4
 8004df4:	20000bc0 	.word	0x20000bc0
 8004df8:	20000b74 	.word	0x20000b74
 8004dfc:	20000b78 	.word	0x20000b78
 8004e00:	20000bd4 	.word	0x20000bd4
 8004e04:	20000bdc 	.word	0x20000bdc
 8004e08:	20000bc4 	.word	0x20000bc4
 8004e0c:	200006ec 	.word	0x200006ec
 8004e10:	200006e8 	.word	0x200006e8
 8004e14:	20000bcc 	.word	0x20000bcc
 8004e18:	20000bd0 	.word	0x20000bd0

08004e1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e22:	4b28      	ldr	r3, [pc, #160]	; (8004ec4 <vTaskSwitchContext+0xa8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e2a:	4b27      	ldr	r3, [pc, #156]	; (8004ec8 <vTaskSwitchContext+0xac>)
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e30:	e042      	b.n	8004eb8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004e32:	4b25      	ldr	r3, [pc, #148]	; (8004ec8 <vTaskSwitchContext+0xac>)
 8004e34:	2200      	movs	r2, #0
 8004e36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e38:	4b24      	ldr	r3, [pc, #144]	; (8004ecc <vTaskSwitchContext+0xb0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	e011      	b.n	8004e64 <vTaskSwitchContext+0x48>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d10b      	bne.n	8004e5e <vTaskSwitchContext+0x42>
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	b672      	cpsid	i
 8004e4c:	f383 8811 	msr	BASEPRI, r3
 8004e50:	f3bf 8f6f 	isb	sy
 8004e54:	f3bf 8f4f 	dsb	sy
 8004e58:	b662      	cpsie	i
 8004e5a:	607b      	str	r3, [r7, #4]
 8004e5c:	e7fe      	b.n	8004e5c <vTaskSwitchContext+0x40>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	491a      	ldr	r1, [pc, #104]	; (8004ed0 <vTaskSwitchContext+0xb4>)
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	440b      	add	r3, r1
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d0e3      	beq.n	8004e40 <vTaskSwitchContext+0x24>
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4a13      	ldr	r2, [pc, #76]	; (8004ed0 <vTaskSwitchContext+0xb4>)
 8004e84:	4413      	add	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	3308      	adds	r3, #8
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d104      	bne.n	8004ea8 <vTaskSwitchContext+0x8c>
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	605a      	str	r2, [r3, #4]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <vTaskSwitchContext+0xb8>)
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	4a06      	ldr	r2, [pc, #24]	; (8004ecc <vTaskSwitchContext+0xb0>)
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6013      	str	r3, [r2, #0]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	20000be4 	.word	0x20000be4
 8004ec8:	20000bd0 	.word	0x20000bd0
 8004ecc:	20000bc4 	.word	0x20000bc4
 8004ed0:	200006ec 	.word	0x200006ec
 8004ed4:	200006e8 	.word	0x200006e8

08004ed8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d10b      	bne.n	8004f00 <vTaskPlaceOnEventList+0x28>
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	b672      	cpsid	i
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	b662      	cpsie	i
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	e7fe      	b.n	8004efe <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f00:	4b07      	ldr	r3, [pc, #28]	; (8004f20 <vTaskPlaceOnEventList+0x48>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	3318      	adds	r3, #24
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fe fe74 	bl	8003bf6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f0e:	2101      	movs	r1, #1
 8004f10:	6838      	ldr	r0, [r7, #0]
 8004f12:	f000 fa7f 	bl	8005414 <prvAddCurrentTaskToDelayedList>
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200006e8 	.word	0x200006e8

08004f24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10b      	bne.n	8004f4e <vTaskPlaceOnEventListRestricted+0x2a>
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	b672      	cpsid	i
 8004f3c:	f383 8811 	msr	BASEPRI, r3
 8004f40:	f3bf 8f6f 	isb	sy
 8004f44:	f3bf 8f4f 	dsb	sy
 8004f48:	b662      	cpsie	i
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	e7fe      	b.n	8004f4c <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f4e:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <vTaskPlaceOnEventListRestricted+0x54>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3318      	adds	r3, #24
 8004f54:	4619      	mov	r1, r3
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f7fe fe29 	bl	8003bae <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004f62:	f04f 33ff 	mov.w	r3, #4294967295
 8004f66:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	68b8      	ldr	r0, [r7, #8]
 8004f6c:	f000 fa52 	bl	8005414 <prvAddCurrentTaskToDelayedList>
	}
 8004f70:	bf00      	nop
 8004f72:	3718      	adds	r7, #24
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	200006e8 	.word	0x200006e8

08004f7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68db      	ldr	r3, [r3, #12]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10b      	bne.n	8004faa <xTaskRemoveFromEventList+0x2e>
 8004f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f96:	b672      	cpsid	i
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	b662      	cpsie	i
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	e7fe      	b.n	8004fa8 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	3318      	adds	r3, #24
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fe fe5a 	bl	8003c68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fb4:	4b1d      	ldr	r3, [pc, #116]	; (800502c <xTaskRemoveFromEventList+0xb0>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d11d      	bne.n	8004ff8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	3304      	adds	r3, #4
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7fe fe51 	bl	8003c68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fca:	4b19      	ldr	r3, [pc, #100]	; (8005030 <xTaskRemoveFromEventList+0xb4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d903      	bls.n	8004fda <xTaskRemoveFromEventList+0x5e>
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	4a16      	ldr	r2, [pc, #88]	; (8005030 <xTaskRemoveFromEventList+0xb4>)
 8004fd8:	6013      	str	r3, [r2, #0]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fde:	4613      	mov	r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	4413      	add	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4a13      	ldr	r2, [pc, #76]	; (8005034 <xTaskRemoveFromEventList+0xb8>)
 8004fe8:	441a      	add	r2, r3
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	3304      	adds	r3, #4
 8004fee:	4619      	mov	r1, r3
 8004ff0:	4610      	mov	r0, r2
 8004ff2:	f7fe fddc 	bl	8003bae <vListInsertEnd>
 8004ff6:	e005      	b.n	8005004 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	3318      	adds	r3, #24
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	480e      	ldr	r0, [pc, #56]	; (8005038 <xTaskRemoveFromEventList+0xbc>)
 8005000:	f7fe fdd5 	bl	8003bae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005008:	4b0c      	ldr	r3, [pc, #48]	; (800503c <xTaskRemoveFromEventList+0xc0>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	429a      	cmp	r2, r3
 8005010:	d905      	bls.n	800501e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005012:	2301      	movs	r3, #1
 8005014:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005016:	4b0a      	ldr	r3, [pc, #40]	; (8005040 <xTaskRemoveFromEventList+0xc4>)
 8005018:	2201      	movs	r2, #1
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	e001      	b.n	8005022 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005022:	697b      	ldr	r3, [r7, #20]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}
 800502c:	20000be4 	.word	0x20000be4
 8005030:	20000bc4 	.word	0x20000bc4
 8005034:	200006ec 	.word	0x200006ec
 8005038:	20000b7c 	.word	0x20000b7c
 800503c:	200006e8 	.word	0x200006e8
 8005040:	20000bd0 	.word	0x20000bd0

08005044 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800504c:	4b06      	ldr	r3, [pc, #24]	; (8005068 <vTaskInternalSetTimeOutState+0x24>)
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005054:	4b05      	ldr	r3, [pc, #20]	; (800506c <vTaskInternalSetTimeOutState+0x28>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	605a      	str	r2, [r3, #4]
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	20000bd4 	.word	0x20000bd4
 800506c:	20000bc0 	.word	0x20000bc0

08005070 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b088      	sub	sp, #32
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d10b      	bne.n	8005098 <xTaskCheckForTimeOut+0x28>
 8005080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005084:	b672      	cpsid	i
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	b662      	cpsie	i
 8005094:	613b      	str	r3, [r7, #16]
 8005096:	e7fe      	b.n	8005096 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <xTaskCheckForTimeOut+0x46>
 800509e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a2:	b672      	cpsid	i
 80050a4:	f383 8811 	msr	BASEPRI, r3
 80050a8:	f3bf 8f6f 	isb	sy
 80050ac:	f3bf 8f4f 	dsb	sy
 80050b0:	b662      	cpsie	i
 80050b2:	60fb      	str	r3, [r7, #12]
 80050b4:	e7fe      	b.n	80050b4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80050b6:	f000 fe5f 	bl	8005d78 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80050ba:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <xTaskCheckForTimeOut+0xc0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d2:	d102      	bne.n	80050da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61fb      	str	r3, [r7, #28]
 80050d8:	e023      	b.n	8005122 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	4b15      	ldr	r3, [pc, #84]	; (8005134 <xTaskCheckForTimeOut+0xc4>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d007      	beq.n	80050f6 <xTaskCheckForTimeOut+0x86>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d302      	bcc.n	80050f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80050f0:	2301      	movs	r3, #1
 80050f2:	61fb      	str	r3, [r7, #28]
 80050f4:	e015      	b.n	8005122 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d20b      	bcs.n	8005118 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1ad2      	subs	r2, r2, r3
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ff99 	bl	8005044 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005112:	2300      	movs	r3, #0
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	e004      	b.n	8005122 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800511e:	2301      	movs	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005122:	f000 fe5b 	bl	8005ddc <vPortExitCritical>

	return xReturn;
 8005126:	69fb      	ldr	r3, [r7, #28]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000bc0 	.word	0x20000bc0
 8005134:	20000bd4 	.word	0x20000bd4

08005138 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005138:	b480      	push	{r7}
 800513a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <vTaskMissedYield+0x14>)
 800513e:	2201      	movs	r2, #1
 8005140:	601a      	str	r2, [r3, #0]
}
 8005142:	bf00      	nop
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	20000bd0 	.word	0x20000bd0

08005150 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005158:	f000 f852 	bl	8005200 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800515c:	4b06      	ldr	r3, [pc, #24]	; (8005178 <prvIdleTask+0x28>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d9f9      	bls.n	8005158 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005164:	4b05      	ldr	r3, [pc, #20]	; (800517c <prvIdleTask+0x2c>)
 8005166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	f3bf 8f4f 	dsb	sy
 8005170:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005174:	e7f0      	b.n	8005158 <prvIdleTask+0x8>
 8005176:	bf00      	nop
 8005178:	200006ec 	.word	0x200006ec
 800517c:	e000ed04 	.word	0xe000ed04

08005180 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005186:	2300      	movs	r3, #0
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	e00c      	b.n	80051a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	4613      	mov	r3, r2
 8005190:	009b      	lsls	r3, r3, #2
 8005192:	4413      	add	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4a12      	ldr	r2, [pc, #72]	; (80051e0 <prvInitialiseTaskLists+0x60>)
 8005198:	4413      	add	r3, r2
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe fcda 	bl	8003b54 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	3301      	adds	r3, #1
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2b37      	cmp	r3, #55	; 0x37
 80051aa:	d9ef      	bls.n	800518c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051ac:	480d      	ldr	r0, [pc, #52]	; (80051e4 <prvInitialiseTaskLists+0x64>)
 80051ae:	f7fe fcd1 	bl	8003b54 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051b2:	480d      	ldr	r0, [pc, #52]	; (80051e8 <prvInitialiseTaskLists+0x68>)
 80051b4:	f7fe fcce 	bl	8003b54 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051b8:	480c      	ldr	r0, [pc, #48]	; (80051ec <prvInitialiseTaskLists+0x6c>)
 80051ba:	f7fe fccb 	bl	8003b54 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051be:	480c      	ldr	r0, [pc, #48]	; (80051f0 <prvInitialiseTaskLists+0x70>)
 80051c0:	f7fe fcc8 	bl	8003b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051c4:	480b      	ldr	r0, [pc, #44]	; (80051f4 <prvInitialiseTaskLists+0x74>)
 80051c6:	f7fe fcc5 	bl	8003b54 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <prvInitialiseTaskLists+0x78>)
 80051cc:	4a05      	ldr	r2, [pc, #20]	; (80051e4 <prvInitialiseTaskLists+0x64>)
 80051ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051d0:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <prvInitialiseTaskLists+0x7c>)
 80051d2:	4a05      	ldr	r2, [pc, #20]	; (80051e8 <prvInitialiseTaskLists+0x68>)
 80051d4:	601a      	str	r2, [r3, #0]
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	200006ec 	.word	0x200006ec
 80051e4:	20000b4c 	.word	0x20000b4c
 80051e8:	20000b60 	.word	0x20000b60
 80051ec:	20000b7c 	.word	0x20000b7c
 80051f0:	20000b90 	.word	0x20000b90
 80051f4:	20000ba8 	.word	0x20000ba8
 80051f8:	20000b74 	.word	0x20000b74
 80051fc:	20000b78 	.word	0x20000b78

08005200 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005206:	e019      	b.n	800523c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005208:	f000 fdb6 	bl	8005d78 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800520c:	4b0f      	ldr	r3, [pc, #60]	; (800524c <prvCheckTasksWaitingTermination+0x4c>)
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	3304      	adds	r3, #4
 8005218:	4618      	mov	r0, r3
 800521a:	f7fe fd25 	bl	8003c68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800521e:	4b0c      	ldr	r3, [pc, #48]	; (8005250 <prvCheckTasksWaitingTermination+0x50>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3b01      	subs	r3, #1
 8005224:	4a0a      	ldr	r2, [pc, #40]	; (8005250 <prvCheckTasksWaitingTermination+0x50>)
 8005226:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005228:	4b0a      	ldr	r3, [pc, #40]	; (8005254 <prvCheckTasksWaitingTermination+0x54>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	3b01      	subs	r3, #1
 800522e:	4a09      	ldr	r2, [pc, #36]	; (8005254 <prvCheckTasksWaitingTermination+0x54>)
 8005230:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005232:	f000 fdd3 	bl	8005ddc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f80e 	bl	8005258 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800523c:	4b05      	ldr	r3, [pc, #20]	; (8005254 <prvCheckTasksWaitingTermination+0x54>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1e1      	bne.n	8005208 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	20000b90 	.word	0x20000b90
 8005250:	20000bbc 	.word	0x20000bbc
 8005254:	20000ba4 	.word	0x20000ba4

08005258 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005266:	2b00      	cmp	r3, #0
 8005268:	d108      	bne.n	800527c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526e:	4618      	mov	r0, r3
 8005270:	f000 ff6c 	bl	800614c <vPortFree>
				vPortFree( pxTCB );
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 ff69 	bl	800614c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800527a:	e019      	b.n	80052b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005282:	2b01      	cmp	r3, #1
 8005284:	d103      	bne.n	800528e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 ff60 	bl	800614c <vPortFree>
	}
 800528c:	e010      	b.n	80052b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005294:	2b02      	cmp	r3, #2
 8005296:	d00b      	beq.n	80052b0 <prvDeleteTCB+0x58>
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	b672      	cpsid	i
 800529e:	f383 8811 	msr	BASEPRI, r3
 80052a2:	f3bf 8f6f 	isb	sy
 80052a6:	f3bf 8f4f 	dsb	sy
 80052aa:	b662      	cpsie	i
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	e7fe      	b.n	80052ae <prvDeleteTCB+0x56>
	}
 80052b0:	bf00      	nop
 80052b2:	3710      	adds	r7, #16
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <prvResetNextTaskUnblockTime+0x38>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d104      	bne.n	80052d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <prvResetNextTaskUnblockTime+0x3c>)
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295
 80052ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052d0:	e008      	b.n	80052e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052d2:	4b07      	ldr	r3, [pc, #28]	; (80052f0 <prvResetNextTaskUnblockTime+0x38>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	68db      	ldr	r3, [r3, #12]
 80052da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4a04      	ldr	r2, [pc, #16]	; (80052f4 <prvResetNextTaskUnblockTime+0x3c>)
 80052e2:	6013      	str	r3, [r2, #0]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20000b74 	.word	0x20000b74
 80052f4:	20000bdc 	.word	0x20000bdc

080052f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052fe:	4b0b      	ldr	r3, [pc, #44]	; (800532c <xTaskGetSchedulerState+0x34>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005306:	2301      	movs	r3, #1
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	e008      	b.n	800531e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800530c:	4b08      	ldr	r3, [pc, #32]	; (8005330 <xTaskGetSchedulerState+0x38>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d102      	bne.n	800531a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005314:	2302      	movs	r3, #2
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	e001      	b.n	800531e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800531a:	2300      	movs	r3, #0
 800531c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800531e:	687b      	ldr	r3, [r7, #4]
	}
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	20000bc8 	.word	0x20000bc8
 8005330:	20000be4 	.word	0x20000be4

08005334 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d058      	beq.n	80053fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800534a:	4b2f      	ldr	r3, [pc, #188]	; (8005408 <xTaskPriorityDisinherit+0xd4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	429a      	cmp	r2, r3
 8005352:	d00b      	beq.n	800536c <xTaskPriorityDisinherit+0x38>
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	b672      	cpsid	i
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	b662      	cpsie	i
 8005368:	60fb      	str	r3, [r7, #12]
 800536a:	e7fe      	b.n	800536a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <xTaskPriorityDisinherit+0x58>
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	b672      	cpsid	i
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	b662      	cpsie	i
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	e7fe      	b.n	800538a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005390:	1e5a      	subs	r2, r3, #1
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800539e:	429a      	cmp	r2, r3
 80053a0:	d02c      	beq.n	80053fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d128      	bne.n	80053fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fe fc5a 	bl	8003c68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053cc:	4b0f      	ldr	r3, [pc, #60]	; (800540c <xTaskPriorityDisinherit+0xd8>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d903      	bls.n	80053dc <xTaskPriorityDisinherit+0xa8>
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	4a0c      	ldr	r2, [pc, #48]	; (800540c <xTaskPriorityDisinherit+0xd8>)
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	4a09      	ldr	r2, [pc, #36]	; (8005410 <xTaskPriorityDisinherit+0xdc>)
 80053ea:	441a      	add	r2, r3
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f7fe fbdb 	bl	8003bae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80053f8:	2301      	movs	r3, #1
 80053fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80053fc:	697b      	ldr	r3, [r7, #20]
	}
 80053fe:	4618      	mov	r0, r3
 8005400:	3718      	adds	r7, #24
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	200006e8 	.word	0x200006e8
 800540c:	20000bc4 	.word	0x20000bc4
 8005410:	200006ec 	.word	0x200006ec

08005414 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800541e:	4b21      	ldr	r3, [pc, #132]	; (80054a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005424:	4b20      	ldr	r3, [pc, #128]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3304      	adds	r3, #4
 800542a:	4618      	mov	r0, r3
 800542c:	f7fe fc1c 	bl	8003c68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005436:	d10a      	bne.n	800544e <prvAddCurrentTaskToDelayedList+0x3a>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d007      	beq.n	800544e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800543e:	4b1a      	ldr	r3, [pc, #104]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3304      	adds	r3, #4
 8005444:	4619      	mov	r1, r3
 8005446:	4819      	ldr	r0, [pc, #100]	; (80054ac <prvAddCurrentTaskToDelayedList+0x98>)
 8005448:	f7fe fbb1 	bl	8003bae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800544c:	e026      	b.n	800549c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4413      	add	r3, r2
 8005454:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005456:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	429a      	cmp	r2, r3
 8005464:	d209      	bcs.n	800547a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005466:	4b12      	ldr	r3, [pc, #72]	; (80054b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3304      	adds	r3, #4
 8005470:	4619      	mov	r1, r3
 8005472:	4610      	mov	r0, r2
 8005474:	f7fe fbbf 	bl	8003bf6 <vListInsert>
}
 8005478:	e010      	b.n	800549c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800547a:	4b0e      	ldr	r3, [pc, #56]	; (80054b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3304      	adds	r3, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f7fe fbb5 	bl	8003bf6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800548c:	4b0a      	ldr	r3, [pc, #40]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	429a      	cmp	r2, r3
 8005494:	d202      	bcs.n	800549c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005496:	4a08      	ldr	r2, [pc, #32]	; (80054b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6013      	str	r3, [r2, #0]
}
 800549c:	bf00      	nop
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	20000bc0 	.word	0x20000bc0
 80054a8:	200006e8 	.word	0x200006e8
 80054ac:	20000ba8 	.word	0x20000ba8
 80054b0:	20000b78 	.word	0x20000b78
 80054b4:	20000b74 	.word	0x20000b74
 80054b8:	20000bdc 	.word	0x20000bdc

080054bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b08a      	sub	sp, #40	; 0x28
 80054c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80054c6:	f000 fb0d 	bl	8005ae4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80054ca:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <xTimerCreateTimerTask+0x84>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d021      	beq.n	8005516 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80054d6:	2300      	movs	r3, #0
 80054d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80054da:	1d3a      	adds	r2, r7, #4
 80054dc:	f107 0108 	add.w	r1, r7, #8
 80054e0:	f107 030c 	add.w	r3, r7, #12
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe fb1b 	bl	8003b20 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80054ea:	6879      	ldr	r1, [r7, #4]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	9202      	str	r2, [sp, #8]
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	2302      	movs	r3, #2
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	460a      	mov	r2, r1
 80054fc:	4911      	ldr	r1, [pc, #68]	; (8005544 <xTimerCreateTimerTask+0x88>)
 80054fe:	4812      	ldr	r0, [pc, #72]	; (8005548 <xTimerCreateTimerTask+0x8c>)
 8005500:	f7ff f8d2 	bl	80046a8 <xTaskCreateStatic>
 8005504:	4602      	mov	r2, r0
 8005506:	4b11      	ldr	r3, [pc, #68]	; (800554c <xTimerCreateTimerTask+0x90>)
 8005508:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800550a:	4b10      	ldr	r3, [pc, #64]	; (800554c <xTimerCreateTimerTask+0x90>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005512:	2301      	movs	r3, #1
 8005514:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10b      	bne.n	8005534 <xTimerCreateTimerTask+0x78>
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	b672      	cpsid	i
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	b662      	cpsie	i
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	e7fe      	b.n	8005532 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8005534:	697b      	ldr	r3, [r7, #20]
}
 8005536:	4618      	mov	r0, r3
 8005538:	3718      	adds	r7, #24
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	20000c18 	.word	0x20000c18
 8005544:	08006418 	.word	0x08006418
 8005548:	08005689 	.word	0x08005689
 800554c:	20000c1c 	.word	0x20000c1c

08005550 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800555e:	2300      	movs	r3, #0
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d10b      	bne.n	8005580 <xTimerGenericCommand+0x30>
 8005568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556c:	b672      	cpsid	i
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	b662      	cpsie	i
 800557c:	623b      	str	r3, [r7, #32]
 800557e:	e7fe      	b.n	800557e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005580:	4b19      	ldr	r3, [pc, #100]	; (80055e8 <xTimerGenericCommand+0x98>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02a      	beq.n	80055de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b05      	cmp	r3, #5
 8005598:	dc18      	bgt.n	80055cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800559a:	f7ff fead 	bl	80052f8 <xTaskGetSchedulerState>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d109      	bne.n	80055b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80055a4:	4b10      	ldr	r3, [pc, #64]	; (80055e8 <xTimerGenericCommand+0x98>)
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	f107 0110 	add.w	r1, r7, #16
 80055ac:	2300      	movs	r3, #0
 80055ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055b0:	f7fe fc8e 	bl	8003ed0 <xQueueGenericSend>
 80055b4:	6278      	str	r0, [r7, #36]	; 0x24
 80055b6:	e012      	b.n	80055de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80055b8:	4b0b      	ldr	r3, [pc, #44]	; (80055e8 <xTimerGenericCommand+0x98>)
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	f107 0110 	add.w	r1, r7, #16
 80055c0:	2300      	movs	r3, #0
 80055c2:	2200      	movs	r2, #0
 80055c4:	f7fe fc84 	bl	8003ed0 <xQueueGenericSend>
 80055c8:	6278      	str	r0, [r7, #36]	; 0x24
 80055ca:	e008      	b.n	80055de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <xTimerGenericCommand+0x98>)
 80055ce:	6818      	ldr	r0, [r3, #0]
 80055d0:	f107 0110 	add.w	r1, r7, #16
 80055d4:	2300      	movs	r3, #0
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	f7fe fd7c 	bl	80040d4 <xQueueGenericSendFromISR>
 80055dc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3728      	adds	r7, #40	; 0x28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	20000c18 	.word	0x20000c18

080055ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b088      	sub	sp, #32
 80055f0:	af02      	add	r7, sp, #8
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f6:	4b23      	ldr	r3, [pc, #140]	; (8005684 <prvProcessExpiredTimer+0x98>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	68db      	ldr	r3, [r3, #12]
 80055fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7fe fb2f 	bl	8003c68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d023      	beq.n	8005660 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	18d1      	adds	r1, r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	6978      	ldr	r0, [r7, #20]
 8005626:	f000 f8d3 	bl	80057d0 <prvInsertTimerInActiveList>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d020      	beq.n	8005672 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005630:	2300      	movs	r3, #0
 8005632:	9300      	str	r3, [sp, #0]
 8005634:	2300      	movs	r3, #0
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	2100      	movs	r1, #0
 800563a:	6978      	ldr	r0, [r7, #20]
 800563c:	f7ff ff88 	bl	8005550 <xTimerGenericCommand>
 8005640:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d114      	bne.n	8005672 <prvProcessExpiredTimer+0x86>
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	b672      	cpsid	i
 800564e:	f383 8811 	msr	BASEPRI, r3
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	f3bf 8f4f 	dsb	sy
 800565a:	b662      	cpsie	i
 800565c:	60fb      	str	r3, [r7, #12]
 800565e:	e7fe      	b.n	800565e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005666:	f023 0301 	bic.w	r3, r3, #1
 800566a:	b2da      	uxtb	r2, r3
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	6978      	ldr	r0, [r7, #20]
 8005678:	4798      	blx	r3
}
 800567a:	bf00      	nop
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000c10 	.word	0x20000c10

08005688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005690:	f107 0308 	add.w	r3, r7, #8
 8005694:	4618      	mov	r0, r3
 8005696:	f000 f857 	bl	8005748 <prvGetNextExpireTime>
 800569a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4619      	mov	r1, r3
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f803 	bl	80056ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80056a6:	f000 f8d5 	bl	8005854 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056aa:	e7f1      	b.n	8005690 <prvTimerTask+0x8>

080056ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80056b6:	f7ff fa3b 	bl	8004b30 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 f866 	bl	8005790 <prvSampleTimeNow>
 80056c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d130      	bne.n	800572e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <prvProcessTimerOrBlockTask+0x3c>
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d806      	bhi.n	80056e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80056da:	f7ff fa37 	bl	8004b4c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ff83 	bl	80055ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80056e6:	e024      	b.n	8005732 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d008      	beq.n	8005700 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80056ee:	4b13      	ldr	r3, [pc, #76]	; (800573c <prvProcessTimerOrBlockTask+0x90>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <prvProcessTimerOrBlockTask+0x50>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <prvProcessTimerOrBlockTask+0x52>
 80056fc:	2300      	movs	r3, #0
 80056fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005700:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <prvProcessTimerOrBlockTask+0x94>)
 8005702:	6818      	ldr	r0, [r3, #0]
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	683a      	ldr	r2, [r7, #0]
 800570c:	4619      	mov	r1, r3
 800570e:	f7fe ff97 	bl	8004640 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005712:	f7ff fa1b 	bl	8004b4c <xTaskResumeAll>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10a      	bne.n	8005732 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800571c:	4b09      	ldr	r3, [pc, #36]	; (8005744 <prvProcessTimerOrBlockTask+0x98>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	f3bf 8f6f 	isb	sy
}
 800572c:	e001      	b.n	8005732 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800572e:	f7ff fa0d 	bl	8004b4c <xTaskResumeAll>
}
 8005732:	bf00      	nop
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000c14 	.word	0x20000c14
 8005740:	20000c18 	.word	0x20000c18
 8005744:	e000ed04 	.word	0xe000ed04

08005748 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005750:	4b0e      	ldr	r3, [pc, #56]	; (800578c <prvGetNextExpireTime+0x44>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <prvGetNextExpireTime+0x16>
 800575a:	2201      	movs	r2, #1
 800575c:	e000      	b.n	8005760 <prvGetNextExpireTime+0x18>
 800575e:	2200      	movs	r2, #0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d105      	bne.n	8005778 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800576c:	4b07      	ldr	r3, [pc, #28]	; (800578c <prvGetNextExpireTime+0x44>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	e001      	b.n	800577c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800577c:	68fb      	ldr	r3, [r7, #12]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	20000c10 	.word	0x20000c10

08005790 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005798:	f7ff fa76 	bl	8004c88 <xTaskGetTickCount>
 800579c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800579e:	4b0b      	ldr	r3, [pc, #44]	; (80057cc <prvSampleTimeNow+0x3c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68fa      	ldr	r2, [r7, #12]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d205      	bcs.n	80057b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80057a8:	f000 f936 	bl	8005a18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	e002      	b.n	80057ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80057ba:	4a04      	ldr	r2, [pc, #16]	; (80057cc <prvSampleTimeNow+0x3c>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80057c0:	68fb      	ldr	r3, [r7, #12]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	20000c20 	.word	0x20000c20

080057d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80057de:	2300      	movs	r3, #0
 80057e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d812      	bhi.n	800581c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	1ad2      	subs	r2, r2, r3
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005804:	2301      	movs	r3, #1
 8005806:	617b      	str	r3, [r7, #20]
 8005808:	e01b      	b.n	8005842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800580a:	4b10      	ldr	r3, [pc, #64]	; (800584c <prvInsertTimerInActiveList+0x7c>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f7fe f9ee 	bl	8003bf6 <vListInsert>
 800581a:	e012      	b.n	8005842 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	429a      	cmp	r2, r3
 8005822:	d206      	bcs.n	8005832 <prvInsertTimerInActiveList+0x62>
 8005824:	68ba      	ldr	r2, [r7, #8]
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	429a      	cmp	r2, r3
 800582a:	d302      	bcc.n	8005832 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800582c:	2301      	movs	r3, #1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	e007      	b.n	8005842 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005832:	4b07      	ldr	r3, [pc, #28]	; (8005850 <prvInsertTimerInActiveList+0x80>)
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3304      	adds	r3, #4
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f7fe f9da 	bl	8003bf6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005842:	697b      	ldr	r3, [r7, #20]
}
 8005844:	4618      	mov	r0, r3
 8005846:	3718      	adds	r7, #24
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20000c14 	.word	0x20000c14
 8005850:	20000c10 	.word	0x20000c10

08005854 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08e      	sub	sp, #56	; 0x38
 8005858:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800585a:	e0cc      	b.n	80059f6 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	da19      	bge.n	8005896 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005862:	1d3b      	adds	r3, r7, #4
 8005864:	3304      	adds	r3, #4
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <prvProcessReceivedCommands+0x32>
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	b672      	cpsid	i
 8005874:	f383 8811 	msr	BASEPRI, r3
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	f3bf 8f4f 	dsb	sy
 8005880:	b662      	cpsie	i
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	e7fe      	b.n	8005884 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800588c:	6850      	ldr	r0, [r2, #4]
 800588e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005890:	6892      	ldr	r2, [r2, #8]
 8005892:	4611      	mov	r1, r2
 8005894:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2b00      	cmp	r3, #0
 800589a:	f2c0 80ab 	blt.w	80059f4 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80058a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	3304      	adds	r3, #4
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe f9da 	bl	8003c68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80058b4:	463b      	mov	r3, r7
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff ff6a 	bl	8005790 <prvSampleTimeNow>
 80058bc:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b09      	cmp	r3, #9
 80058c2:	f200 8098 	bhi.w	80059f6 <prvProcessReceivedCommands+0x1a2>
 80058c6:	a201      	add	r2, pc, #4	; (adr r2, 80058cc <prvProcessReceivedCommands+0x78>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	080058f5 	.word	0x080058f5
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	080058f5 	.word	0x080058f5
 80058d8:	0800596b 	.word	0x0800596b
 80058dc:	0800597f 	.word	0x0800597f
 80058e0:	080059cb 	.word	0x080059cb
 80058e4:	080058f5 	.word	0x080058f5
 80058e8:	080058f5 	.word	0x080058f5
 80058ec:	0800596b 	.word	0x0800596b
 80058f0:	0800597f 	.word	0x0800597f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80058f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	18d1      	adds	r1, r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005914:	f7ff ff5c 	bl	80057d0 <prvInsertTimerInActiveList>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d06b      	beq.n	80059f6 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800591e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005924:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d060      	beq.n	80059f6 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	441a      	add	r2, r3
 800593c:	2300      	movs	r3, #0
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	2300      	movs	r3, #0
 8005942:	2100      	movs	r1, #0
 8005944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005946:	f7ff fe03 	bl	8005550 <xTimerGenericCommand>
 800594a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800594c:	6a3b      	ldr	r3, [r7, #32]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d151      	bne.n	80059f6 <prvProcessReceivedCommands+0x1a2>
 8005952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005956:	b672      	cpsid	i
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	b662      	cpsie	i
 8005966:	61bb      	str	r3, [r7, #24]
 8005968:	e7fe      	b.n	8005968 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	b2da      	uxtb	r2, r3
 8005976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005978:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800597c:	e03b      	b.n	80059f6 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	b2da      	uxtb	r2, r3
 800598a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005994:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	699b      	ldr	r3, [r3, #24]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <prvProcessReceivedCommands+0x162>
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	b672      	cpsid	i
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	b662      	cpsie	i
 80059b2:	617b      	str	r3, [r7, #20]
 80059b4:	e7fe      	b.n	80059b4 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80059b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b8:	699a      	ldr	r2, [r3, #24]
 80059ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059bc:	18d1      	adds	r1, r2, r3
 80059be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059c4:	f7ff ff04 	bl	80057d0 <prvInsertTimerInActiveList>
					break;
 80059c8:	e015      	b.n	80059f6 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d0:	f003 0302 	and.w	r3, r3, #2
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d103      	bne.n	80059e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80059d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059da:	f000 fbb7 	bl	800614c <vPortFree>
 80059de:	e00a      	b.n	80059f6 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059e6:	f023 0301 	bic.w	r3, r3, #1
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80059f2:	e000      	b.n	80059f6 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80059f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80059f6:	4b07      	ldr	r3, [pc, #28]	; (8005a14 <prvProcessReceivedCommands+0x1c0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	1d39      	adds	r1, r7, #4
 80059fc:	2200      	movs	r2, #0
 80059fe:	4618      	mov	r0, r3
 8005a00:	f7fe fc04 	bl	800420c <xQueueReceive>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	f47f af28 	bne.w	800585c <prvProcessReceivedCommands+0x8>
	}
}
 8005a0c:	bf00      	nop
 8005a0e:	3730      	adds	r7, #48	; 0x30
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	20000c18 	.word	0x20000c18

08005a18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a1e:	e049      	b.n	8005ab4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a20:	4b2e      	ldr	r3, [pc, #184]	; (8005adc <prvSwitchTimerLists+0xc4>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a2a:	4b2c      	ldr	r3, [pc, #176]	; (8005adc <prvSwitchTimerLists+0xc4>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fe f915 	bl	8003c68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d02f      	beq.n	8005ab4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d90e      	bls.n	8005a84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a72:	4b1a      	ldr	r3, [pc, #104]	; (8005adc <prvSwitchTimerLists+0xc4>)
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	3304      	adds	r3, #4
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	f7fe f8ba 	bl	8003bf6 <vListInsert>
 8005a82:	e017      	b.n	8005ab4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a84:	2300      	movs	r3, #0
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	2300      	movs	r3, #0
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	2100      	movs	r1, #0
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f7ff fd5e 	bl	8005550 <xTimerGenericCommand>
 8005a94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10b      	bne.n	8005ab4 <prvSwitchTimerLists+0x9c>
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	b672      	cpsid	i
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	b662      	cpsie	i
 8005ab0:	603b      	str	r3, [r7, #0]
 8005ab2:	e7fe      	b.n	8005ab2 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005ab4:	4b09      	ldr	r3, [pc, #36]	; (8005adc <prvSwitchTimerLists+0xc4>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1b0      	bne.n	8005a20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005abe:	4b07      	ldr	r3, [pc, #28]	; (8005adc <prvSwitchTimerLists+0xc4>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005ac4:	4b06      	ldr	r3, [pc, #24]	; (8005ae0 <prvSwitchTimerLists+0xc8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a04      	ldr	r2, [pc, #16]	; (8005adc <prvSwitchTimerLists+0xc4>)
 8005aca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005acc:	4a04      	ldr	r2, [pc, #16]	; (8005ae0 <prvSwitchTimerLists+0xc8>)
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	6013      	str	r3, [r2, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	3718      	adds	r7, #24
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000c10 	.word	0x20000c10
 8005ae0:	20000c14 	.word	0x20000c14

08005ae4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005aea:	f000 f945 	bl	8005d78 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005aee:	4b15      	ldr	r3, [pc, #84]	; (8005b44 <prvCheckForValidListAndQueue+0x60>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d120      	bne.n	8005b38 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005af6:	4814      	ldr	r0, [pc, #80]	; (8005b48 <prvCheckForValidListAndQueue+0x64>)
 8005af8:	f7fe f82c 	bl	8003b54 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005afc:	4813      	ldr	r0, [pc, #76]	; (8005b4c <prvCheckForValidListAndQueue+0x68>)
 8005afe:	f7fe f829 	bl	8003b54 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <prvCheckForValidListAndQueue+0x6c>)
 8005b04:	4a10      	ldr	r2, [pc, #64]	; (8005b48 <prvCheckForValidListAndQueue+0x64>)
 8005b06:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b08:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <prvCheckForValidListAndQueue+0x70>)
 8005b0a:	4a10      	ldr	r2, [pc, #64]	; (8005b4c <prvCheckForValidListAndQueue+0x68>)
 8005b0c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b0e:	2300      	movs	r3, #0
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <prvCheckForValidListAndQueue+0x74>)
 8005b14:	4a11      	ldr	r2, [pc, #68]	; (8005b5c <prvCheckForValidListAndQueue+0x78>)
 8005b16:	2110      	movs	r1, #16
 8005b18:	200a      	movs	r0, #10
 8005b1a:	f7fe f939 	bl	8003d90 <xQueueGenericCreateStatic>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <prvCheckForValidListAndQueue+0x60>)
 8005b22:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b24:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <prvCheckForValidListAndQueue+0x60>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b2c:	4b05      	ldr	r3, [pc, #20]	; (8005b44 <prvCheckForValidListAndQueue+0x60>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	490b      	ldr	r1, [pc, #44]	; (8005b60 <prvCheckForValidListAndQueue+0x7c>)
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe fd5c 	bl	80045f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b38:	f000 f950 	bl	8005ddc <vPortExitCritical>
}
 8005b3c:	bf00      	nop
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000c18 	.word	0x20000c18
 8005b48:	20000be8 	.word	0x20000be8
 8005b4c:	20000bfc 	.word	0x20000bfc
 8005b50:	20000c10 	.word	0x20000c10
 8005b54:	20000c14 	.word	0x20000c14
 8005b58:	20000cc4 	.word	0x20000cc4
 8005b5c:	20000c24 	.word	0x20000c24
 8005b60:	08006420 	.word	0x08006420

08005b64 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	3b04      	subs	r3, #4
 8005b74:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	3b04      	subs	r3, #4
 8005b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f023 0201 	bic.w	r2, r3, #1
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3b04      	subs	r3, #4
 8005b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b94:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <pxPortInitialiseStack+0x64>)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	3b14      	subs	r3, #20
 8005b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3b04      	subs	r3, #4
 8005baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f06f 0202 	mvn.w	r2, #2
 8005bb2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3b20      	subs	r3, #32
 8005bb8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bba:	68fb      	ldr	r3, [r7, #12]
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3714      	adds	r7, #20
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	08005bcd 	.word	0x08005bcd

08005bcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bd6:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <prvTaskExitError+0x58>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bde:	d00b      	beq.n	8005bf8 <prvTaskExitError+0x2c>
 8005be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be4:	b672      	cpsid	i
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	b662      	cpsie	i
 8005bf4:	60fb      	str	r3, [r7, #12]
 8005bf6:	e7fe      	b.n	8005bf6 <prvTaskExitError+0x2a>
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	b672      	cpsid	i
 8005bfe:	f383 8811 	msr	BASEPRI, r3
 8005c02:	f3bf 8f6f 	isb	sy
 8005c06:	f3bf 8f4f 	dsb	sy
 8005c0a:	b662      	cpsie	i
 8005c0c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c0e:	bf00      	nop
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d0fc      	beq.n	8005c10 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	2000000c 	.word	0x2000000c
	...

08005c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <pxCurrentTCBConst2>)
 8005c32:	6819      	ldr	r1, [r3, #0]
 8005c34:	6808      	ldr	r0, [r1, #0]
 8005c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3a:	f380 8809 	msr	PSP, r0
 8005c3e:	f3bf 8f6f 	isb	sy
 8005c42:	f04f 0000 	mov.w	r0, #0
 8005c46:	f380 8811 	msr	BASEPRI, r0
 8005c4a:	4770      	bx	lr
 8005c4c:	f3af 8000 	nop.w

08005c50 <pxCurrentTCBConst2>:
 8005c50:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop

08005c58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c58:	4808      	ldr	r0, [pc, #32]	; (8005c7c <prvPortStartFirstTask+0x24>)
 8005c5a:	6800      	ldr	r0, [r0, #0]
 8005c5c:	6800      	ldr	r0, [r0, #0]
 8005c5e:	f380 8808 	msr	MSP, r0
 8005c62:	f04f 0000 	mov.w	r0, #0
 8005c66:	f380 8814 	msr	CONTROL, r0
 8005c6a:	b662      	cpsie	i
 8005c6c:	b661      	cpsie	f
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	df00      	svc	0
 8005c78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c7a:	bf00      	nop
 8005c7c:	e000ed08 	.word	0xe000ed08

08005c80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005c86:	4b36      	ldr	r3, [pc, #216]	; (8005d60 <xPortStartScheduler+0xe0>)
 8005c88:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	22ff      	movs	r2, #255	; 0xff
 8005c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	4b2e      	ldr	r3, [pc, #184]	; (8005d64 <xPortStartScheduler+0xe4>)
 8005cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cae:	4b2e      	ldr	r3, [pc, #184]	; (8005d68 <xPortStartScheduler+0xe8>)
 8005cb0:	2207      	movs	r2, #7
 8005cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cb4:	e009      	b.n	8005cca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005cb6:	4b2c      	ldr	r3, [pc, #176]	; (8005d68 <xPortStartScheduler+0xe8>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	4a2a      	ldr	r2, [pc, #168]	; (8005d68 <xPortStartScheduler+0xe8>)
 8005cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cc0:	78fb      	ldrb	r3, [r7, #3]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cca:	78fb      	ldrb	r3, [r7, #3]
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b80      	cmp	r3, #128	; 0x80
 8005cd4:	d0ef      	beq.n	8005cb6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005cd6:	4b24      	ldr	r3, [pc, #144]	; (8005d68 <xPortStartScheduler+0xe8>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f1c3 0307 	rsb	r3, r3, #7
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d00b      	beq.n	8005cfa <xPortStartScheduler+0x7a>
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	b672      	cpsid	i
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	b662      	cpsie	i
 8005cf6:	60bb      	str	r3, [r7, #8]
 8005cf8:	e7fe      	b.n	8005cf8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005cfa:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <xPortStartScheduler+0xe8>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	021b      	lsls	r3, r3, #8
 8005d00:	4a19      	ldr	r2, [pc, #100]	; (8005d68 <xPortStartScheduler+0xe8>)
 8005d02:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d04:	4b18      	ldr	r3, [pc, #96]	; (8005d68 <xPortStartScheduler+0xe8>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d0c:	4a16      	ldr	r2, [pc, #88]	; (8005d68 <xPortStartScheduler+0xe8>)
 8005d0e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d18:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <xPortStartScheduler+0xec>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a13      	ldr	r2, [pc, #76]	; (8005d6c <xPortStartScheduler+0xec>)
 8005d1e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d22:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d24:	4b11      	ldr	r3, [pc, #68]	; (8005d6c <xPortStartScheduler+0xec>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a10      	ldr	r2, [pc, #64]	; (8005d6c <xPortStartScheduler+0xec>)
 8005d2a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d2e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d30:	f000 f8d4 	bl	8005edc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d34:	4b0e      	ldr	r3, [pc, #56]	; (8005d70 <xPortStartScheduler+0xf0>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d3a:	f000 f8f3 	bl	8005f24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d3e:	4b0d      	ldr	r3, [pc, #52]	; (8005d74 <xPortStartScheduler+0xf4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a0c      	ldr	r2, [pc, #48]	; (8005d74 <xPortStartScheduler+0xf4>)
 8005d44:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d48:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d4a:	f7ff ff85 	bl	8005c58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d4e:	f7ff f865 	bl	8004e1c <vTaskSwitchContext>
	prvTaskExitError();
 8005d52:	f7ff ff3b 	bl	8005bcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	e000e400 	.word	0xe000e400
 8005d64:	20000d14 	.word	0x20000d14
 8005d68:	20000d18 	.word	0x20000d18
 8005d6c:	e000ed20 	.word	0xe000ed20
 8005d70:	2000000c 	.word	0x2000000c
 8005d74:	e000ef34 	.word	0xe000ef34

08005d78 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d82:	b672      	cpsid	i
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	b662      	cpsie	i
 8005d92:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005d94:	4b0f      	ldr	r3, [pc, #60]	; (8005dd4 <vPortEnterCritical+0x5c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	4a0e      	ldr	r2, [pc, #56]	; (8005dd4 <vPortEnterCritical+0x5c>)
 8005d9c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <vPortEnterCritical+0x5c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d110      	bne.n	8005dc8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005da6:	4b0c      	ldr	r3, [pc, #48]	; (8005dd8 <vPortEnterCritical+0x60>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00b      	beq.n	8005dc8 <vPortEnterCritical+0x50>
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	b672      	cpsid	i
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	b662      	cpsie	i
 8005dc4:	603b      	str	r3, [r7, #0]
 8005dc6:	e7fe      	b.n	8005dc6 <vPortEnterCritical+0x4e>
	}
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	2000000c 	.word	0x2000000c
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <vPortExitCritical+0x50>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10b      	bne.n	8005e02 <vPortExitCritical+0x26>
 8005dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dee:	b672      	cpsid	i
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	b662      	cpsie	i
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	e7fe      	b.n	8005e00 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8005e02:	4b0a      	ldr	r3, [pc, #40]	; (8005e2c <vPortExitCritical+0x50>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3b01      	subs	r3, #1
 8005e08:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <vPortExitCritical+0x50>)
 8005e0a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e0c:	4b07      	ldr	r3, [pc, #28]	; (8005e2c <vPortExitCritical+0x50>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d104      	bne.n	8005e1e <vPortExitCritical+0x42>
 8005e14:	2300      	movs	r3, #0
 8005e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e1e:	bf00      	nop
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr
 8005e2a:	bf00      	nop
 8005e2c:	2000000c 	.word	0x2000000c

08005e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e30:	f3ef 8009 	mrs	r0, PSP
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	4b15      	ldr	r3, [pc, #84]	; (8005e90 <pxCurrentTCBConst>)
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	f01e 0f10 	tst.w	lr, #16
 8005e40:	bf08      	it	eq
 8005e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4a:	6010      	str	r0, [r2, #0]
 8005e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e54:	b672      	cpsid	i
 8005e56:	f380 8811 	msr	BASEPRI, r0
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	f3bf 8f6f 	isb	sy
 8005e62:	b662      	cpsie	i
 8005e64:	f7fe ffda 	bl	8004e1c <vTaskSwitchContext>
 8005e68:	f04f 0000 	mov.w	r0, #0
 8005e6c:	f380 8811 	msr	BASEPRI, r0
 8005e70:	bc09      	pop	{r0, r3}
 8005e72:	6819      	ldr	r1, [r3, #0]
 8005e74:	6808      	ldr	r0, [r1, #0]
 8005e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7a:	f01e 0f10 	tst.w	lr, #16
 8005e7e:	bf08      	it	eq
 8005e80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005e84:	f380 8809 	msr	PSP, r0
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop

08005e90 <pxCurrentTCBConst>:
 8005e90:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop

08005e98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea2:	b672      	cpsid	i
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	b662      	cpsie	i
 8005eb2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005eb4:	f7fe fef8 	bl	8004ca8 <xTaskIncrementTick>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d003      	beq.n	8005ec6 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005ebe:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <xPortSysTickHandler+0x40>)
 8005ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005ed0:	bf00      	nop
 8005ed2:	3708      	adds	r7, #8
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	e000ed04 	.word	0xe000ed04

08005edc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005edc:	b480      	push	{r7}
 8005ede:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <vPortSetupTimerInterrupt+0x38>)
 8005ee8:	2200      	movs	r2, #0
 8005eea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <vPortSetupTimerInterrupt+0x3c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a0a      	ldr	r2, [pc, #40]	; (8005f1c <vPortSetupTimerInterrupt+0x40>)
 8005ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef6:	099b      	lsrs	r3, r3, #6
 8005ef8:	4a09      	ldr	r2, [pc, #36]	; (8005f20 <vPortSetupTimerInterrupt+0x44>)
 8005efa:	3b01      	subs	r3, #1
 8005efc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005efe:	4b04      	ldr	r3, [pc, #16]	; (8005f10 <vPortSetupTimerInterrupt+0x34>)
 8005f00:	2207      	movs	r2, #7
 8005f02:	601a      	str	r2, [r3, #0]
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	e000e010 	.word	0xe000e010
 8005f14:	e000e018 	.word	0xe000e018
 8005f18:	20000000 	.word	0x20000000
 8005f1c:	10624dd3 	.word	0x10624dd3
 8005f20:	e000e014 	.word	0xe000e014

08005f24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f34 <vPortEnableVFP+0x10>
 8005f28:	6801      	ldr	r1, [r0, #0]
 8005f2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f2e:	6001      	str	r1, [r0, #0]
 8005f30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f32:	bf00      	nop
 8005f34:	e000ed88 	.word	0xe000ed88

08005f38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f38:	b480      	push	{r7}
 8005f3a:	b085      	sub	sp, #20
 8005f3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f3e:	f3ef 8305 	mrs	r3, IPSR
 8005f42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2b0f      	cmp	r3, #15
 8005f48:	d915      	bls.n	8005f76 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f4a:	4a18      	ldr	r2, [pc, #96]	; (8005fac <vPortValidateInterruptPriority+0x74>)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f54:	4b16      	ldr	r3, [pc, #88]	; (8005fb0 <vPortValidateInterruptPriority+0x78>)
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	7afa      	ldrb	r2, [r7, #11]
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d20b      	bcs.n	8005f76 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f62:	b672      	cpsid	i
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	b662      	cpsie	i
 8005f72:	607b      	str	r3, [r7, #4]
 8005f74:	e7fe      	b.n	8005f74 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f76:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <vPortValidateInterruptPriority+0x7c>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005f7e:	4b0e      	ldr	r3, [pc, #56]	; (8005fb8 <vPortValidateInterruptPriority+0x80>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	429a      	cmp	r2, r3
 8005f84:	d90b      	bls.n	8005f9e <vPortValidateInterruptPriority+0x66>
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	b672      	cpsid	i
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	b662      	cpsie	i
 8005f9a:	603b      	str	r3, [r7, #0]
 8005f9c:	e7fe      	b.n	8005f9c <vPortValidateInterruptPriority+0x64>
	}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	e000e3f0 	.word	0xe000e3f0
 8005fb0:	20000d14 	.word	0x20000d14
 8005fb4:	e000ed0c 	.word	0xe000ed0c
 8005fb8:	20000d18 	.word	0x20000d18

08005fbc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	; 0x28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fc8:	f7fe fdb2 	bl	8004b30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005fcc:	4b5a      	ldr	r3, [pc, #360]	; (8006138 <pvPortMalloc+0x17c>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d101      	bne.n	8005fd8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005fd4:	f000 f916 	bl	8006204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005fd8:	4b58      	ldr	r3, [pc, #352]	; (800613c <pvPortMalloc+0x180>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f040 8090 	bne.w	8006106 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01e      	beq.n	800602a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005fec:	2208      	movs	r2, #8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f003 0307 	and.w	r3, r3, #7
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d015      	beq.n	800602a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f023 0307 	bic.w	r3, r3, #7
 8006004:	3308      	adds	r3, #8
 8006006:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f003 0307 	and.w	r3, r3, #7
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00b      	beq.n	800602a <pvPortMalloc+0x6e>
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	b672      	cpsid	i
 8006018:	f383 8811 	msr	BASEPRI, r3
 800601c:	f3bf 8f6f 	isb	sy
 8006020:	f3bf 8f4f 	dsb	sy
 8006024:	b662      	cpsie	i
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e7fe      	b.n	8006028 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d06a      	beq.n	8006106 <pvPortMalloc+0x14a>
 8006030:	4b43      	ldr	r3, [pc, #268]	; (8006140 <pvPortMalloc+0x184>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	687a      	ldr	r2, [r7, #4]
 8006036:	429a      	cmp	r2, r3
 8006038:	d865      	bhi.n	8006106 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800603a:	4b42      	ldr	r3, [pc, #264]	; (8006144 <pvPortMalloc+0x188>)
 800603c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800603e:	4b41      	ldr	r3, [pc, #260]	; (8006144 <pvPortMalloc+0x188>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006044:	e004      	b.n	8006050 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8006046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006048:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800604a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d903      	bls.n	8006062 <pvPortMalloc+0xa6>
 800605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f1      	bne.n	8006046 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006062:	4b35      	ldr	r3, [pc, #212]	; (8006138 <pvPortMalloc+0x17c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006068:	429a      	cmp	r2, r3
 800606a:	d04c      	beq.n	8006106 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800606c:	6a3b      	ldr	r3, [r7, #32]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2208      	movs	r2, #8
 8006072:	4413      	add	r3, r2
 8006074:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800607e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1ad2      	subs	r2, r2, r3
 8006086:	2308      	movs	r3, #8
 8006088:	005b      	lsls	r3, r3, #1
 800608a:	429a      	cmp	r2, r3
 800608c:	d920      	bls.n	80060d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800608e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4413      	add	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	f003 0307 	and.w	r3, r3, #7
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00b      	beq.n	80060b8 <pvPortMalloc+0xfc>
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	b672      	cpsid	i
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	b662      	cpsie	i
 80060b4:	613b      	str	r3, [r7, #16]
 80060b6:	e7fe      	b.n	80060b6 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060ca:	69b8      	ldr	r0, [r7, #24]
 80060cc:	f000 f8fc 	bl	80062c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060d0:	4b1b      	ldr	r3, [pc, #108]	; (8006140 <pvPortMalloc+0x184>)
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	4a19      	ldr	r2, [pc, #100]	; (8006140 <pvPortMalloc+0x184>)
 80060dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060de:	4b18      	ldr	r3, [pc, #96]	; (8006140 <pvPortMalloc+0x184>)
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	4b19      	ldr	r3, [pc, #100]	; (8006148 <pvPortMalloc+0x18c>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d203      	bcs.n	80060f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80060ea:	4b15      	ldr	r3, [pc, #84]	; (8006140 <pvPortMalloc+0x184>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a16      	ldr	r2, [pc, #88]	; (8006148 <pvPortMalloc+0x18c>)
 80060f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	4b11      	ldr	r3, [pc, #68]	; (800613c <pvPortMalloc+0x180>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	431a      	orrs	r2, r3
 80060fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	2200      	movs	r2, #0
 8006104:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006106:	f7fe fd21 	bl	8004b4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	2b00      	cmp	r3, #0
 8006112:	d00b      	beq.n	800612c <pvPortMalloc+0x170>
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	b672      	cpsid	i
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	b662      	cpsie	i
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	e7fe      	b.n	800612a <pvPortMalloc+0x16e>
	return pvReturn;
 800612c:	69fb      	ldr	r3, [r7, #28]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3728      	adds	r7, #40	; 0x28
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20004924 	.word	0x20004924
 800613c:	20004930 	.word	0x20004930
 8006140:	20004928 	.word	0x20004928
 8006144:	2000491c 	.word	0x2000491c
 8006148:	2000492c 	.word	0x2000492c

0800614c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b086      	sub	sp, #24
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d04a      	beq.n	80061f4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800615e:	2308      	movs	r3, #8
 8006160:	425b      	negs	r3, r3
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	4413      	add	r3, r2
 8006166:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	685a      	ldr	r2, [r3, #4]
 8006170:	4b22      	ldr	r3, [pc, #136]	; (80061fc <vPortFree+0xb0>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <vPortFree+0x46>
 800617a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617e:	b672      	cpsid	i
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	b662      	cpsie	i
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	e7fe      	b.n	8006190 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00b      	beq.n	80061b2 <vPortFree+0x66>
 800619a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800619e:	b672      	cpsid	i
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	b662      	cpsie	i
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	e7fe      	b.n	80061b0 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	4b11      	ldr	r3, [pc, #68]	; (80061fc <vPortFree+0xb0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4013      	ands	r3, r2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d019      	beq.n	80061f4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d115      	bne.n	80061f4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <vPortFree+0xb0>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	43db      	mvns	r3, r3
 80061d2:	401a      	ands	r2, r3
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061d8:	f7fe fcaa 	bl	8004b30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	685a      	ldr	r2, [r3, #4]
 80061e0:	4b07      	ldr	r3, [pc, #28]	; (8006200 <vPortFree+0xb4>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4413      	add	r3, r2
 80061e6:	4a06      	ldr	r2, [pc, #24]	; (8006200 <vPortFree+0xb4>)
 80061e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ea:	6938      	ldr	r0, [r7, #16]
 80061ec:	f000 f86c 	bl	80062c8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061f0:	f7fe fcac 	bl	8004b4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061f4:	bf00      	nop
 80061f6:	3718      	adds	r7, #24
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	20004930 	.word	0x20004930
 8006200:	20004928 	.word	0x20004928

08006204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800620a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800620e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006210:	4b27      	ldr	r3, [pc, #156]	; (80062b0 <prvHeapInit+0xac>)
 8006212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00c      	beq.n	8006238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	3307      	adds	r3, #7
 8006222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f023 0307 	bic.w	r3, r3, #7
 800622a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800622c:	68ba      	ldr	r2, [r7, #8]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	4a1f      	ldr	r2, [pc, #124]	; (80062b0 <prvHeapInit+0xac>)
 8006234:	4413      	add	r3, r2
 8006236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800623c:	4a1d      	ldr	r2, [pc, #116]	; (80062b4 <prvHeapInit+0xb0>)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006242:	4b1c      	ldr	r3, [pc, #112]	; (80062b4 <prvHeapInit+0xb0>)
 8006244:	2200      	movs	r2, #0
 8006246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	4413      	add	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006250:	2208      	movs	r2, #8
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f023 0307 	bic.w	r3, r3, #7
 800625e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <prvHeapInit+0xb4>)
 8006264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006266:	4b14      	ldr	r3, [pc, #80]	; (80062b8 <prvHeapInit+0xb4>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2200      	movs	r2, #0
 800626c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800626e:	4b12      	ldr	r3, [pc, #72]	; (80062b8 <prvHeapInit+0xb4>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2200      	movs	r2, #0
 8006274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	1ad2      	subs	r2, r2, r3
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006284:	4b0c      	ldr	r3, [pc, #48]	; (80062b8 <prvHeapInit+0xb4>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	4a0a      	ldr	r2, [pc, #40]	; (80062bc <prvHeapInit+0xb8>)
 8006292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4a09      	ldr	r2, [pc, #36]	; (80062c0 <prvHeapInit+0xbc>)
 800629a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800629c:	4b09      	ldr	r3, [pc, #36]	; (80062c4 <prvHeapInit+0xc0>)
 800629e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062a2:	601a      	str	r2, [r3, #0]
}
 80062a4:	bf00      	nop
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	20000d1c 	.word	0x20000d1c
 80062b4:	2000491c 	.word	0x2000491c
 80062b8:	20004924 	.word	0x20004924
 80062bc:	2000492c 	.word	0x2000492c
 80062c0:	20004928 	.word	0x20004928
 80062c4:	20004930 	.word	0x20004930

080062c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062c8:	b480      	push	{r7}
 80062ca:	b085      	sub	sp, #20
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062d0:	4b28      	ldr	r3, [pc, #160]	; (8006374 <prvInsertBlockIntoFreeList+0xac>)
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	e002      	b.n	80062dc <prvInsertBlockIntoFreeList+0x14>
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d8f7      	bhi.n	80062d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	4413      	add	r3, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d108      	bne.n	800630a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	441a      	add	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	441a      	add	r2, r3
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d118      	bne.n	8006350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4b15      	ldr	r3, [pc, #84]	; (8006378 <prvInsertBlockIntoFreeList+0xb0>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	429a      	cmp	r2, r3
 8006328:	d00d      	beq.n	8006346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685a      	ldr	r2, [r3, #4]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	441a      	add	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	e008      	b.n	8006358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006346:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <prvInsertBlockIntoFreeList+0xb0>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e003      	b.n	8006358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d002      	beq.n	8006366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006366:	bf00      	nop
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	2000491c 	.word	0x2000491c
 8006378:	20004924 	.word	0x20004924

0800637c <__libc_init_array>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	4e0d      	ldr	r6, [pc, #52]	; (80063b4 <__libc_init_array+0x38>)
 8006380:	4c0d      	ldr	r4, [pc, #52]	; (80063b8 <__libc_init_array+0x3c>)
 8006382:	1ba4      	subs	r4, r4, r6
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	2500      	movs	r5, #0
 8006388:	42a5      	cmp	r5, r4
 800638a:	d109      	bne.n	80063a0 <__libc_init_array+0x24>
 800638c:	4e0b      	ldr	r6, [pc, #44]	; (80063bc <__libc_init_array+0x40>)
 800638e:	4c0c      	ldr	r4, [pc, #48]	; (80063c0 <__libc_init_array+0x44>)
 8006390:	f000 f82c 	bl	80063ec <_init>
 8006394:	1ba4      	subs	r4, r4, r6
 8006396:	10a4      	asrs	r4, r4, #2
 8006398:	2500      	movs	r5, #0
 800639a:	42a5      	cmp	r5, r4
 800639c:	d105      	bne.n	80063aa <__libc_init_array+0x2e>
 800639e:	bd70      	pop	{r4, r5, r6, pc}
 80063a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a4:	4798      	blx	r3
 80063a6:	3501      	adds	r5, #1
 80063a8:	e7ee      	b.n	8006388 <__libc_init_array+0xc>
 80063aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063ae:	4798      	blx	r3
 80063b0:	3501      	adds	r5, #1
 80063b2:	e7f2      	b.n	800639a <__libc_init_array+0x1e>
 80063b4:	0800646c 	.word	0x0800646c
 80063b8:	0800646c 	.word	0x0800646c
 80063bc:	0800646c 	.word	0x0800646c
 80063c0:	08006470 	.word	0x08006470

080063c4 <memcpy>:
 80063c4:	b510      	push	{r4, lr}
 80063c6:	1e43      	subs	r3, r0, #1
 80063c8:	440a      	add	r2, r1
 80063ca:	4291      	cmp	r1, r2
 80063cc:	d100      	bne.n	80063d0 <memcpy+0xc>
 80063ce:	bd10      	pop	{r4, pc}
 80063d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d8:	e7f7      	b.n	80063ca <memcpy+0x6>

080063da <memset>:
 80063da:	4402      	add	r2, r0
 80063dc:	4603      	mov	r3, r0
 80063de:	4293      	cmp	r3, r2
 80063e0:	d100      	bne.n	80063e4 <memset+0xa>
 80063e2:	4770      	bx	lr
 80063e4:	f803 1b01 	strb.w	r1, [r3], #1
 80063e8:	e7f9      	b.n	80063de <memset+0x4>
	...

080063ec <_init>:
 80063ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ee:	bf00      	nop
 80063f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063f2:	bc08      	pop	{r3}
 80063f4:	469e      	mov	lr, r3
 80063f6:	4770      	bx	lr

080063f8 <_fini>:
 80063f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fa:	bf00      	nop
 80063fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063fe:	bc08      	pop	{r3}
 8006400:	469e      	mov	lr, r3
 8006402:	4770      	bx	lr
