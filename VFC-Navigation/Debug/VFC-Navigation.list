
VFC-Navigation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005784  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08005914  08005914  00015914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e8  080059e8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080059e8  080059e8  000159e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059f0  080059f0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059f0  080059f0  000159f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059f4  080059f4  000159f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080059f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b84  20000010  08005a08  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b94  08005a08  00024b94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016e9c  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c36  00000000  00000000  00036edc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001228  00000000  00000000  00039b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001118  00000000  00000000  0003ad40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ce8  00000000  00000000  0003be58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e969  00000000  00000000  0003eb40  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0161  00000000  00000000  0004d4a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d60a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ca0  00000000  00000000  0011d688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058fc 	.word	0x080058fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080058fc 	.word	0x080058fc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d4:	f000 fc3c 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d8:	f000 f83e 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004dc:	f000 f9a6 	bl	800082c <MX_GPIO_Init>
  MX_DMA_Init();
 80004e0:	f000 f97c 	bl	80007dc <MX_DMA_Init>
  MX_I2C1_Init();
 80004e4:	f000 f8ca 	bl	800067c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f94e 	bl	8000788 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80004ec:	f000 f892 	bl	8000614 <MX_CAN1_Init>
  MX_I2C2_Init();
 80004f0:	f000 f8f2 	bl	80006d8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f91e 	bl	8000734 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f002 fc72 	bl	8002de0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of taskSendState */
  taskSendStateHandle = osThreadNew(Start_SendState, NULL, &taskSendState_attributes);
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <main+0x64>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x68>)
 8000502:	f002 fcd7 	bl	8002eb4 <osThreadNew>
 8000506:	4602      	mov	r2, r0
 8000508:	4b0c      	ldr	r3, [pc, #48]	; (800053c <main+0x6c>)
 800050a:	601a      	str	r2, [r3, #0]

  /* creation of taskProcessStat */
  taskProcessStatHandle = osThreadNew(Start_ProcessState, NULL, &taskProcessStat_attributes);
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <main+0x70>)
 800050e:	2100      	movs	r1, #0
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0x74>)
 8000512:	f002 fccf 	bl	8002eb4 <osThreadNew>
 8000516:	4602      	mov	r2, r0
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <main+0x78>)
 800051a:	601a      	str	r2, [r3, #0]

  /* creation of taskSendStatus */
  taskSendStatusHandle = osThreadNew(Start_SendStatus, NULL, &taskSendStatus_attributes);
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <main+0x7c>)
 800051e:	2100      	movs	r1, #0
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x80>)
 8000522:	f002 fcc7 	bl	8002eb4 <osThreadNew>
 8000526:	4602      	mov	r2, r0
 8000528:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <main+0x84>)
 800052a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f002 fc8c 	bl	8002e48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x60>
 8000532:	bf00      	nop
 8000534:	0800595c 	.word	0x0800595c
 8000538:	0800087d 	.word	0x0800087d
 800053c:	20004adc 	.word	0x20004adc
 8000540:	08005980 	.word	0x08005980
 8000544:	0800088d 	.word	0x0800088d
 8000548:	20004ae0 	.word	0x20004ae0
 800054c:	080059a4 	.word	0x080059a4
 8000550:	0800089d 	.word	0x0800089d
 8000554:	20004b4c 	.word	0x20004b4c

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b094      	sub	sp, #80	; 0x50
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	2230      	movs	r2, #48	; 0x30
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f005 f9bf 	bl	80058ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
 8000580:	4b22      	ldr	r3, [pc, #136]	; (800060c <SystemClock_Config+0xb4>)
 8000582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000584:	4a21      	ldr	r2, [pc, #132]	; (800060c <SystemClock_Config+0xb4>)
 8000586:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058a:	6413      	str	r3, [r2, #64]	; 0x40
 800058c:	4b1f      	ldr	r3, [pc, #124]	; (800060c <SystemClock_Config+0xb4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b1c      	ldr	r3, [pc, #112]	; (8000610 <SystemClock_Config+0xb8>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <SystemClock_Config+0xb8>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <SystemClock_Config+0xb8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 fbfb 	bl	8001dc4 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005d4:	f000 f96a 	bl	80008ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fe56 	bl	80022a4 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005fe:	f000 f955 	bl	80008ac <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000618:	4b16      	ldr	r3, [pc, #88]	; (8000674 <MX_CAN1_Init+0x60>)
 800061a:	4a17      	ldr	r2, [pc, #92]	; (8000678 <MX_CAN1_Init+0x64>)
 800061c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_CAN1_Init+0x60>)
 8000620:	2210      	movs	r2, #16
 8000622:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000624:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_CAN1_Init+0x60>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_CAN1_Init+0x60>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000630:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_CAN1_Init+0x60>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000636:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_CAN1_Init+0x60>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800063c:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_CAN1_Init+0x60>)
 800063e:	2200      	movs	r2, #0
 8000640:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_CAN1_Init+0x60>)
 8000644:	2200      	movs	r2, #0
 8000646:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000648:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_CAN1_Init+0x60>)
 800064a:	2200      	movs	r2, #0
 800064c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800064e:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_CAN1_Init+0x60>)
 8000650:	2200      	movs	r2, #0
 8000652:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000654:	4b07      	ldr	r3, [pc, #28]	; (8000674 <MX_CAN1_Init+0x60>)
 8000656:	2200      	movs	r2, #0
 8000658:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_CAN1_Init+0x60>)
 800065c:	2200      	movs	r2, #0
 800065e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_CAN1_Init+0x60>)
 8000662:	f000 fbe7 	bl	8000e34 <HAL_CAN_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800066c:	f000 f91e 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20004b24 	.word	0x20004b24
 8000678:	40006400 	.word	0x40006400

0800067c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2C1_Init+0x50>)
 8000682:	4a13      	ldr	r2, [pc, #76]	; (80006d0 <MX_I2C1_Init+0x54>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_I2C1_Init+0x50>)
 8000688:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <MX_I2C1_Init+0x58>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_I2C1_Init+0x50>)
 800069a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_I2C1_Init+0x50>)
 80006ba:	f001 fa4b 	bl	8001b54 <HAL_I2C_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 f8f2 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20004994 	.word	0x20004994
 80006d0:	40005400 	.word	0x40005400
 80006d4:	000186a0 	.word	0x000186a0

080006d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C2_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C2_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C2_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C2_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C2_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C2_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C2_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C2_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C2_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C2_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C2_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C2_Init+0x50>)
 8000716:	f001 fa1d 	bl	8001b54 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f8c4 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200049e8 	.word	0x200049e8
 800072c:	40005800 	.word	0x40005800
 8000730:	000186a0 	.word	0x000186a0

08000734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART1_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800076c:	f001 ff66 	bl	800263c <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f000 f899 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20004a3c 	.word	0x20004a3c
 8000784:	40011000 	.word	0x40011000

08000788 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f001 ff3c 	bl	800263c <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f000 f86f 	bl	80008ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20004ae4 	.word	0x20004ae4
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_DMA_Init+0x4c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	4a0f      	ldr	r2, [pc, #60]	; (8000828 <MX_DMA_Init+0x4c>)
 80007ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007f0:	6313      	str	r3, [r2, #48]	; 0x30
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_DMA_Init+0x4c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 7, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2107      	movs	r1, #7
 8000802:	200b      	movs	r0, #11
 8000804:	f000 fced 	bl	80011e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000808:	200b      	movs	r0, #11
 800080a:	f000 fd06 	bl	800121a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 8, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2108      	movs	r1, #8
 8000812:	2010      	movs	r0, #16
 8000814:	f000 fce5 	bl	80011e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000818:	2010      	movs	r0, #16
 800081a:	f000 fcfe 	bl	800121a <HAL_NVIC_EnableIRQ>

}
 800081e:	bf00      	nop
 8000820:	3708      	adds	r7, #8
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40023800 	.word	0x40023800

0800082c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	; (8000878 <MX_GPIO_Init+0x4c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a0f      	ldr	r2, [pc, #60]	; (8000878 <MX_GPIO_Init+0x4c>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <MX_GPIO_Init+0x4c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <MX_GPIO_Init+0x4c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a08      	ldr	r2, [pc, #32]	; (8000878 <MX_GPIO_Init+0x4c>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b06      	ldr	r3, [pc, #24]	; (8000878 <MX_GPIO_Init+0x4c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <Start_SendState>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_SendState */
void Start_SendState(void *argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f002 fbbb 	bl	8003000 <osDelay>
 800088a:	e7fb      	b.n	8000884 <Start_SendState+0x8>

0800088c <Start_ProcessState>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_ProcessState */
void Start_ProcessState(void *argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_ProcessState */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000894:	2001      	movs	r0, #1
 8000896:	f002 fbb3 	bl	8003000 <osDelay>
 800089a:	e7fb      	b.n	8000894 <Start_ProcessState+0x8>

0800089c <Start_SendStatus>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SendStatus */
void Start_SendStatus(void *argument)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SendStatus */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f002 fbab 	bl	8003000 <osDelay>
 80008aa:	e7fb      	b.n	80008a4 <Start_SendStatus+0x8>

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <HAL_MspInit+0x4c>)
 80008cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d0:	6453      	str	r3, [r2, #68]	; 0x44
 80008d2:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <HAL_MspInit+0x4c>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <HAL_MspInit+0x4c>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	4a08      	ldr	r2, [pc, #32]	; (8000908 <HAL_MspInit+0x4c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	6413      	str	r3, [r2, #64]	; 0x40
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_MspInit+0x4c>)
 80008f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08a      	sub	sp, #40	; 0x28
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
 8000922:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a19      	ldr	r2, [pc, #100]	; (8000990 <HAL_CAN_MspInit+0x84>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d12c      	bne.n	8000988 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
 8000932:	4b18      	ldr	r3, [pc, #96]	; (8000994 <HAL_CAN_MspInit+0x88>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a17      	ldr	r2, [pc, #92]	; (8000994 <HAL_CAN_MspInit+0x88>)
 8000938:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <HAL_CAN_MspInit+0x88>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000946:	613b      	str	r3, [r7, #16]
 8000948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <HAL_CAN_MspInit+0x88>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a10      	ldr	r2, [pc, #64]	; (8000994 <HAL_CAN_MspInit+0x88>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <HAL_CAN_MspInit+0x88>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000966:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800096a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096c:	2302      	movs	r3, #2
 800096e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000974:	2303      	movs	r3, #3
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000978:	2309      	movs	r3, #9
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <HAL_CAN_MspInit+0x8c>)
 8000984:	f000 ff4c 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000988:	bf00      	nop
 800098a:	3728      	adds	r7, #40	; 0x28
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40006400 	.word	0x40006400
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000

0800099c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 031c 	add.w	r3, r7, #28
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a4a      	ldr	r2, [pc, #296]	; (8000ae4 <HAL_I2C_MspInit+0x148>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d15b      	bne.n	8000a76 <HAL_I2C_MspInit+0xda>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
 80009c2:	4b49      	ldr	r3, [pc, #292]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a48      	ldr	r2, [pc, #288]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 80009c8:	f043 0302 	orr.w	r3, r3, #2
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b46      	ldr	r3, [pc, #280]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0302 	and.w	r3, r3, #2
 80009d6:	61bb      	str	r3, [r7, #24]
 80009d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009da:	23c0      	movs	r3, #192	; 0xc0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009de:	2312      	movs	r3, #18
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e6:	2303      	movs	r3, #3
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ea:	2304      	movs	r3, #4
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	483d      	ldr	r0, [pc, #244]	; (8000aec <HAL_I2C_MspInit+0x150>)
 80009f6:	f000 ff13 	bl	8001820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	4b3a      	ldr	r3, [pc, #232]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a02:	4a39      	ldr	r2, [pc, #228]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 8000a04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a08:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0a:	4b37      	ldr	r3, [pc, #220]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a12:	617b      	str	r3, [r7, #20]
 8000a14:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8000a16:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a18:	4a36      	ldr	r2, [pc, #216]	; (8000af4 <HAL_I2C_MspInit+0x158>)
 8000a1a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000a1c:	4b34      	ldr	r3, [pc, #208]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000a22:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a24:	4b32      	ldr	r3, [pc, #200]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a2a:	4b31      	ldr	r3, [pc, #196]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a30:	4b2f      	ldr	r3, [pc, #188]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a36:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a38:	4b2d      	ldr	r3, [pc, #180]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a3e:	4b2c      	ldr	r3, [pc, #176]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a44:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000a4a:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a50:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a52:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a58:	4825      	ldr	r0, [pc, #148]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a5a:	f000 fbf9 	bl	8001250 <HAL_DMA_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8000a64:	f7ff ff22 	bl	80008ac <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a21      	ldr	r2, [pc, #132]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a6c:	639a      	str	r2, [r3, #56]	; 0x38
 8000a6e:	4a20      	ldr	r2, [pc, #128]	; (8000af0 <HAL_I2C_MspInit+0x154>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a74:	e031      	b.n	8000ada <HAL_I2C_MspInit+0x13e>
  else if(hi2c->Instance==I2C2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_I2C_MspInit+0x15c>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d12c      	bne.n	8000ada <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 8000a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a88:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 8000a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a94:	f003 0302 	and.w	r3, r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
 8000a9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000a9c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa2:	2312      	movs	r3, #18
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000aae:	2304      	movs	r3, #4
 8000ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <HAL_I2C_MspInit+0x150>)
 8000aba:	f000 feb1 	bl	8001820 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 8000ac8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000acc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_I2C_MspInit+0x14c>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
}
 8000ada:	bf00      	nop
 8000adc:	3730      	adds	r7, #48	; 0x30
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	40020400 	.word	0x40020400
 8000af0:	20004a7c 	.word	0x20004a7c
 8000af4:	40026010 	.word	0x40026010
 8000af8:	40005800 	.word	0x40005800

08000afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08c      	sub	sp, #48	; 0x30
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b04:	f107 031c 	add.w	r3, r7, #28
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a49      	ldr	r2, [pc, #292]	; (8000c40 <HAL_UART_MspInit+0x144>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d12d      	bne.n	8000b7a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61bb      	str	r3, [r7, #24]
 8000b22:	4b48      	ldr	r3, [pc, #288]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	4a47      	ldr	r2, [pc, #284]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b28:	f043 0310 	orr.w	r3, r3, #16
 8000b2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b2e:	4b45      	ldr	r3, [pc, #276]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b32:	f003 0310 	and.w	r3, r3, #16
 8000b36:	61bb      	str	r3, [r7, #24]
 8000b38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	4b41      	ldr	r3, [pc, #260]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a40      	ldr	r2, [pc, #256]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b56:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	f107 031c 	add.w	r3, r7, #28
 8000b70:	4619      	mov	r1, r3
 8000b72:	4835      	ldr	r0, [pc, #212]	; (8000c48 <HAL_UART_MspInit+0x14c>)
 8000b74:	f000 fe54 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b78:	e05e      	b.n	8000c38 <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a33      	ldr	r2, [pc, #204]	; (8000c4c <HAL_UART_MspInit+0x150>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d159      	bne.n	8000c38 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a2d      	ldr	r2, [pc, #180]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b2b      	ldr	r3, [pc, #172]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9c:	613b      	str	r3, [r7, #16]
 8000b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b27      	ldr	r3, [pc, #156]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a26      	ldr	r2, [pc, #152]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000baa:	f043 0301 	orr.w	r3, r3, #1
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <HAL_UART_MspInit+0x148>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bbc:	230c      	movs	r3, #12
 8000bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bcc:	2307      	movs	r3, #7
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	481c      	ldr	r0, [pc, #112]	; (8000c48 <HAL_UART_MspInit+0x14c>)
 8000bd8:	f000 fe22 	bl	8001820 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000bde:	4a1d      	ldr	r2, [pc, #116]	; (8000c54 <HAL_UART_MspInit+0x158>)
 8000be0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000be2:	4b1b      	ldr	r3, [pc, #108]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000be4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000be8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bf6:	4b16      	ldr	r3, [pc, #88]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c04:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000c1c:	480c      	ldr	r0, [pc, #48]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000c1e:	f000 fb17 	bl	8001250 <HAL_DMA_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <HAL_UART_MspInit+0x130>
      Error_Handler();
 8000c28:	f7ff fe40 	bl	80008ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000c30:	635a      	str	r2, [r3, #52]	; 0x34
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_UART_MspInit+0x154>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000c38:	bf00      	nop
 8000c3a:	3730      	adds	r7, #48	; 0x30
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40011000 	.word	0x40011000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40004400 	.word	0x40004400
 8000c50:	20004934 	.word	0x20004934
 8000c54:	40026088 	.word	0x40026088

08000c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c90:	f000 f8b0 	bl	8000df4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c94:	f003 fdba 	bl	800480c <xTaskGetSchedulerState>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d001      	beq.n	8000ca2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c9e:	f004 fb93 	bl	80053c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000cac:	4802      	ldr	r0, [pc, #8]	; (8000cb8 <DMA1_Stream0_IRQHandler+0x10>)
 8000cae:	f000 fb7d 	bl	80013ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	20004a7c 	.word	0x20004a7c

08000cbc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <DMA1_Stream5_IRQHandler+0x10>)
 8000cc2:	f000 fb73 	bl	80013ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20004934 	.word	0x20004934

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <SystemInit+0x28>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <SystemInit+0x28>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SystemInit+0x28>)
 8000ce6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cea:	609a      	str	r2, [r3, #8]
#endif
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d02:	e003      	b.n	8000d0c <LoopCopyDataInit>

08000d04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d04:	4b0c      	ldr	r3, [pc, #48]	; (8000d38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d0a:	3104      	adds	r1, #4

08000d0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d0c:	480b      	ldr	r0, [pc, #44]	; (8000d3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d14:	d3f6      	bcc.n	8000d04 <CopyDataInit>
  ldr  r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d18:	e002      	b.n	8000d20 <LoopFillZerobss>

08000d1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d1c:	f842 3b04 	str.w	r3, [r2], #4

08000d20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d24:	d3f9      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d26:	f7ff ffd3 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f004 fdaf 	bl	800588c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fbcf 	bl	80004d0 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d34:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d38:	080059f8 	.word	0x080059f8
  ldr  r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d40:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000d44:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d48:	20004b94 	.word	0x20004b94

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 fa27 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f000 f808 	bl	8000d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fd9a 	bl	80008bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x54>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_InitTick+0x58>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000db2:	4618      	mov	r0, r3
 8000db4:	f000 fa3f 	bl	8001236 <HAL_SYSTICK_Config>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e00e      	b.n	8000de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b0f      	cmp	r3, #15
 8000dc6:	d80a      	bhi.n	8000dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	6879      	ldr	r1, [r7, #4]
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	f000 fa07 	bl	80011e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd4:	4a06      	ldr	r2, [pc, #24]	; (8000df0 <HAL_InitTick+0x5c>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	e000      	b.n	8000de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000000 	.word	0x20000000
 8000dec:	20000008 	.word	0x20000008
 8000df0:	20000004 	.word	0x20000004

08000df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_IncTick+0x20>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <HAL_IncTick+0x24>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4413      	add	r3, r2
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <HAL_IncTick+0x24>)
 8000e06:	6013      	str	r3, [r2, #0]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20004b50 	.word	0x20004b50

08000e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <HAL_GetTick+0x14>)
 8000e22:	681b      	ldr	r3, [r3, #0]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20004b50 	.word	0x20004b50

08000e34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e0ed      	b.n	8001022 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d102      	bne.n	8000e58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff fd5a 	bl	800090c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f022 0202 	bic.w	r2, r2, #2
 8000e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e68:	f7ff ffd8 	bl	8000e1c <HAL_GetTick>
 8000e6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e6e:	e012      	b.n	8000e96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e70:	f7ff ffd4 	bl	8000e1c <HAL_GetTick>
 8000e74:	4602      	mov	r2, r0
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	2b0a      	cmp	r3, #10
 8000e7c:	d90b      	bls.n	8000e96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2205      	movs	r2, #5
 8000e8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e0c5      	b.n	8001022 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1e5      	bne.n	8000e70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f042 0201 	orr.w	r2, r2, #1
 8000eb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000eb4:	f7ff ffb2 	bl	8000e1c <HAL_GetTick>
 8000eb8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000eba:	e012      	b.n	8000ee2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ebc:	f7ff ffae 	bl	8000e1c <HAL_GetTick>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	2b0a      	cmp	r3, #10
 8000ec8:	d90b      	bls.n	8000ee2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2205      	movs	r2, #5
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e09f      	b.n	8001022 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d0e5      	beq.n	8000ebc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	7e1b      	ldrb	r3, [r3, #24]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d108      	bne.n	8000f0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	e007      	b.n	8000f1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7e5b      	ldrb	r3, [r3, #25]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d108      	bne.n	8000f34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e007      	b.n	8000f44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	7e9b      	ldrb	r3, [r3, #26]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d108      	bne.n	8000f5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f042 0220 	orr.w	r2, r2, #32
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e007      	b.n	8000f6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 0220 	bic.w	r2, r2, #32
 8000f6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7edb      	ldrb	r3, [r3, #27]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d108      	bne.n	8000f88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f022 0210 	bic.w	r2, r2, #16
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	e007      	b.n	8000f98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	681a      	ldr	r2, [r3, #0]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f042 0210 	orr.w	r2, r2, #16
 8000f96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	7f1b      	ldrb	r3, [r3, #28]
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d108      	bne.n	8000fb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f042 0208 	orr.w	r2, r2, #8
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	e007      	b.n	8000fc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f022 0208 	bic.w	r2, r2, #8
 8000fc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7f5b      	ldrb	r3, [r3, #29]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d108      	bne.n	8000fdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f042 0204 	orr.w	r2, r2, #4
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0204 	bic.w	r2, r2, #4
 8000fea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689a      	ldr	r2, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	431a      	orrs	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	ea42 0103 	orr.w	r1, r2, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	1e5a      	subs	r2, r3, #1
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2201      	movs	r2, #1
 800101c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800103c:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001048:	4013      	ands	r3, r2
 800104a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001054:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001058:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800105c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <__NVIC_SetPriorityGrouping+0x44>)
 8001060:	68bb      	ldr	r3, [r7, #8]
 8001062:	60d3      	str	r3, [r2, #12]
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001078:	4b04      	ldr	r3, [pc, #16]	; (800108c <__NVIC_GetPriorityGrouping+0x18>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	0a1b      	lsrs	r3, r3, #8
 800107e:	f003 0307 	and.w	r3, r3, #7
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	db0b      	blt.n	80010ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	f003 021f 	and.w	r2, r3, #31
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <__NVIC_EnableIRQ+0x38>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	095b      	lsrs	r3, r3, #5
 80010b0:	2001      	movs	r0, #1
 80010b2:	fa00 f202 	lsl.w	r2, r0, r2
 80010b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff29 	bl	800102c <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff3e 	bl	8001074 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff31 	bl	8001090 <__NVIC_EnableIRQ>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffa2 	bl	8001188 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800125c:	f7ff fdde 	bl	8000e1c <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e099      	b.n	80013a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2202      	movs	r2, #2
 8001278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f022 0201 	bic.w	r2, r2, #1
 800128a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800128c:	e00f      	b.n	80012ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800128e:	f7ff fdc5 	bl	8000e1c <HAL_GetTick>
 8001292:	4602      	mov	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b05      	cmp	r3, #5
 800129a:	d908      	bls.n	80012ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2220      	movs	r2, #32
 80012a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2203      	movs	r2, #3
 80012a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e078      	b.n	80013a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1e8      	bne.n	800128e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	4b38      	ldr	r3, [pc, #224]	; (80013a8 <HAL_DMA_Init+0x158>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012fa:	697a      	ldr	r2, [r7, #20]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001304:	2b04      	cmp	r3, #4
 8001306:	d107      	bne.n	8001318 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001310:	4313      	orrs	r3, r2
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	4313      	orrs	r3, r2
 8001316:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	f023 0307 	bic.w	r3, r3, #7
 800132e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	4313      	orrs	r3, r2
 8001338:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	2b04      	cmp	r3, #4
 8001340:	d117      	bne.n	8001372 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4313      	orrs	r3, r2
 800134a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00e      	beq.n	8001372 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f000 f9e9 	bl	800172c <DMA_CheckFifoParam>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d008      	beq.n	8001372 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2240      	movs	r2, #64	; 0x40
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2201      	movs	r2, #1
 800136a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800136e:	2301      	movs	r3, #1
 8001370:	e016      	b.n	80013a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f9a0 	bl	80016c0 <DMA_CalcBaseAndBitshift>
 8001380:	4603      	mov	r3, r0
 8001382:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001388:	223f      	movs	r2, #63	; 0x3f
 800138a:	409a      	lsls	r2, r3
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	f010803f 	.word	0xf010803f

080013ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013b8:	4b92      	ldr	r3, [pc, #584]	; (8001604 <HAL_DMA_IRQHandler+0x258>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a92      	ldr	r2, [pc, #584]	; (8001608 <HAL_DMA_IRQHandler+0x25c>)
 80013be:	fba2 2303 	umull	r2, r3, r2, r3
 80013c2:	0a9b      	lsrs	r3, r3, #10
 80013c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	2208      	movs	r2, #8
 80013d8:	409a      	lsls	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d01a      	beq.n	8001418 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d013      	beq.n	8001418 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0204 	bic.w	r2, r2, #4
 80013fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001404:	2208      	movs	r2, #8
 8001406:	409a      	lsls	r2, r3
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001410:	f043 0201 	orr.w	r2, r3, #1
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800141c:	2201      	movs	r2, #1
 800141e:	409a      	lsls	r2, r3
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	4013      	ands	r3, r2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d012      	beq.n	800144e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800143a:	2201      	movs	r2, #1
 800143c:	409a      	lsls	r2, r3
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001446:	f043 0202 	orr.w	r2, r3, #2
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001452:	2204      	movs	r2, #4
 8001454:	409a      	lsls	r2, r3
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4013      	ands	r3, r2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d012      	beq.n	8001484 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	2b00      	cmp	r3, #0
 800146a:	d00b      	beq.n	8001484 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001470:	2204      	movs	r2, #4
 8001472:	409a      	lsls	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147c:	f043 0204 	orr.w	r2, r3, #4
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	2210      	movs	r2, #16
 800148a:	409a      	lsls	r2, r3
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4013      	ands	r3, r2
 8001490:	2b00      	cmp	r3, #0
 8001492:	d043      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0308 	and.w	r3, r3, #8
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d03c      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a6:	2210      	movs	r2, #16
 80014a8:	409a      	lsls	r2, r3
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d018      	beq.n	80014ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d108      	bne.n	80014dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d024      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	4798      	blx	r3
 80014da:	e01f      	b.n	800151c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d01b      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	4798      	blx	r3
 80014ec:	e016      	b.n	800151c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f022 0208 	bic.w	r2, r2, #8
 800150a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	2b00      	cmp	r3, #0
 8001512:	d003      	beq.n	800151c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001520:	2220      	movs	r2, #32
 8001522:	409a      	lsls	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	2b00      	cmp	r3, #0
 800152a:	f000 808e 	beq.w	800164a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0310 	and.w	r3, r3, #16
 8001538:	2b00      	cmp	r3, #0
 800153a:	f000 8086 	beq.w	800164a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001542:	2220      	movs	r2, #32
 8001544:	409a      	lsls	r2, r3
 8001546:	693b      	ldr	r3, [r7, #16]
 8001548:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001550:	b2db      	uxtb	r3, r3
 8001552:	2b05      	cmp	r3, #5
 8001554:	d136      	bne.n	80015c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0216 	bic.w	r2, r2, #22
 8001564:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	695a      	ldr	r2, [r3, #20]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001574:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d103      	bne.n	8001586 <HAL_DMA_IRQHandler+0x1da>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0208 	bic.w	r2, r2, #8
 8001594:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	223f      	movs	r2, #63	; 0x3f
 800159c:	409a      	lsls	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2201      	movs	r2, #1
 80015ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d07d      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	4798      	blx	r3
        }
        return;
 80015c2:	e078      	b.n	80016b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d01c      	beq.n	800160c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d108      	bne.n	80015f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d030      	beq.n	800164a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	4798      	blx	r3
 80015f0:	e02b      	b.n	800164a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d027      	beq.n	800164a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	4798      	blx	r3
 8001602:	e022      	b.n	800164a <HAL_DMA_IRQHandler+0x29e>
 8001604:	20000000 	.word	0x20000000
 8001608:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10f      	bne.n	800163a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0210 	bic.w	r2, r2, #16
 8001628:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2200      	movs	r2, #0
 800162e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	2b00      	cmp	r3, #0
 8001650:	d032      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d022      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2205      	movs	r2, #5
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	3301      	adds	r3, #1
 800167a:	60bb      	str	r3, [r7, #8]
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	429a      	cmp	r2, r3
 8001680:	d307      	bcc.n	8001692 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 0301 	and.w	r3, r3, #1
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f2      	bne.n	8001676 <HAL_DMA_IRQHandler+0x2ca>
 8001690:	e000      	b.n	8001694 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001692:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2201      	movs	r2, #1
 80016a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	4798      	blx	r3
 80016b4:	e000      	b.n	80016b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80016b6:	bf00      	nop
    }
  }
}
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop

080016c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	3b10      	subs	r3, #16
 80016d0:	4a14      	ldr	r2, [pc, #80]	; (8001724 <DMA_CalcBaseAndBitshift+0x64>)
 80016d2:	fba2 2303 	umull	r2, r3, r2, r3
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016da:	4a13      	ldr	r2, [pc, #76]	; (8001728 <DMA_CalcBaseAndBitshift+0x68>)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4413      	add	r3, r2
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	461a      	mov	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d909      	bls.n	8001702 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80016f6:	f023 0303 	bic.w	r3, r3, #3
 80016fa:	1d1a      	adds	r2, r3, #4
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	659a      	str	r2, [r3, #88]	; 0x58
 8001700:	e007      	b.n	8001712 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800170a:	f023 0303 	bic.w	r3, r3, #3
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	aaaaaaab 	.word	0xaaaaaaab
 8001728:	080059e0 	.word	0x080059e0

0800172c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800172c:	b480      	push	{r7}
 800172e:	b085      	sub	sp, #20
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001734:	2300      	movs	r3, #0
 8001736:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d11f      	bne.n	8001786 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b03      	cmp	r3, #3
 800174a:	d855      	bhi.n	80017f8 <DMA_CheckFifoParam+0xcc>
 800174c:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <DMA_CheckFifoParam+0x28>)
 800174e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001752:	bf00      	nop
 8001754:	08001765 	.word	0x08001765
 8001758:	08001777 	.word	0x08001777
 800175c:	08001765 	.word	0x08001765
 8001760:	080017f9 	.word	0x080017f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001768:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d045      	beq.n	80017fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001774:	e042      	b.n	80017fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800177a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800177e:	d13f      	bne.n	8001800 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001784:	e03c      	b.n	8001800 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800178e:	d121      	bne.n	80017d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d836      	bhi.n	8001804 <DMA_CheckFifoParam+0xd8>
 8001796:	a201      	add	r2, pc, #4	; (adr r2, 800179c <DMA_CheckFifoParam+0x70>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017ad 	.word	0x080017ad
 80017a0:	080017b3 	.word	0x080017b3
 80017a4:	080017ad 	.word	0x080017ad
 80017a8:	080017c5 	.word	0x080017c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	73fb      	strb	r3, [r7, #15]
      break;
 80017b0:	e02f      	b.n	8001812 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d024      	beq.n	8001808 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017c2:	e021      	b.n	8001808 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80017cc:	d11e      	bne.n	800180c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017d2:	e01b      	b.n	800180c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d902      	bls.n	80017e0 <DMA_CheckFifoParam+0xb4>
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d003      	beq.n	80017e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017de:	e018      	b.n	8001812 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
      break;
 80017e4:	e015      	b.n	8001812 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00e      	beq.n	8001810 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
      break;
 80017f6:	e00b      	b.n	8001810 <DMA_CheckFifoParam+0xe4>
      break;
 80017f8:	bf00      	nop
 80017fa:	e00a      	b.n	8001812 <DMA_CheckFifoParam+0xe6>
      break;
 80017fc:	bf00      	nop
 80017fe:	e008      	b.n	8001812 <DMA_CheckFifoParam+0xe6>
      break;
 8001800:	bf00      	nop
 8001802:	e006      	b.n	8001812 <DMA_CheckFifoParam+0xe6>
      break;
 8001804:	bf00      	nop
 8001806:	e004      	b.n	8001812 <DMA_CheckFifoParam+0xe6>
      break;
 8001808:	bf00      	nop
 800180a:	e002      	b.n	8001812 <DMA_CheckFifoParam+0xe6>
      break;   
 800180c:	bf00      	nop
 800180e:	e000      	b.n	8001812 <DMA_CheckFifoParam+0xe6>
      break;
 8001810:	bf00      	nop
    }
  } 
  
  return status; 
 8001812:	7bfb      	ldrb	r3, [r7, #15]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b089      	sub	sp, #36	; 0x24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001836:	2300      	movs	r3, #0
 8001838:	61fb      	str	r3, [r7, #28]
 800183a:	e16b      	b.n	8001b14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800183c:	2201      	movs	r2, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	429a      	cmp	r2, r3
 8001856:	f040 815a 	bne.w	8001b0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d00b      	beq.n	800187a <HAL_GPIO_Init+0x5a>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b02      	cmp	r3, #2
 8001868:	d007      	beq.n	800187a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800186e:	2b11      	cmp	r3, #17
 8001870:	d003      	beq.n	800187a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b12      	cmp	r3, #18
 8001878:	d130      	bne.n	80018dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	2203      	movs	r2, #3
 8001886:	fa02 f303 	lsl.w	r3, r2, r3
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b0:	2201      	movs	r2, #1
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 0201 	and.w	r2, r3, #1
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	2203      	movs	r2, #3
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d003      	beq.n	800191c <HAL_GPIO_Init+0xfc>
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b12      	cmp	r3, #18
 800191a:	d123      	bne.n	8001964 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	08da      	lsrs	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3208      	adds	r2, #8
 8001924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	220f      	movs	r2, #15
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4013      	ands	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4313      	orrs	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	08da      	lsrs	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3208      	adds	r2, #8
 800195e:	69b9      	ldr	r1, [r7, #24]
 8001960:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 0203 	and.w	r2, r3, #3
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4313      	orrs	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	f000 80b4 	beq.w	8001b0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <HAL_GPIO_Init+0x308>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a5e      	ldr	r2, [pc, #376]	; (8001b28 <HAL_GPIO_Init+0x308>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b5c      	ldr	r3, [pc, #368]	; (8001b28 <HAL_GPIO_Init+0x308>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c2:	4a5a      	ldr	r2, [pc, #360]	; (8001b2c <HAL_GPIO_Init+0x30c>)
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	089b      	lsrs	r3, r3, #2
 80019c8:	3302      	adds	r3, #2
 80019ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	220f      	movs	r2, #15
 80019da:	fa02 f303 	lsl.w	r3, r2, r3
 80019de:	43db      	mvns	r3, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4013      	ands	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a51      	ldr	r2, [pc, #324]	; (8001b30 <HAL_GPIO_Init+0x310>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d02b      	beq.n	8001a46 <HAL_GPIO_Init+0x226>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a50      	ldr	r2, [pc, #320]	; (8001b34 <HAL_GPIO_Init+0x314>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d025      	beq.n	8001a42 <HAL_GPIO_Init+0x222>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a4f      	ldr	r2, [pc, #316]	; (8001b38 <HAL_GPIO_Init+0x318>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d01f      	beq.n	8001a3e <HAL_GPIO_Init+0x21e>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <HAL_GPIO_Init+0x31c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d019      	beq.n	8001a3a <HAL_GPIO_Init+0x21a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4d      	ldr	r2, [pc, #308]	; (8001b40 <HAL_GPIO_Init+0x320>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d013      	beq.n	8001a36 <HAL_GPIO_Init+0x216>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4c      	ldr	r2, [pc, #304]	; (8001b44 <HAL_GPIO_Init+0x324>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00d      	beq.n	8001a32 <HAL_GPIO_Init+0x212>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4b      	ldr	r2, [pc, #300]	; (8001b48 <HAL_GPIO_Init+0x328>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <HAL_GPIO_Init+0x20e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4a      	ldr	r2, [pc, #296]	; (8001b4c <HAL_GPIO_Init+0x32c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d101      	bne.n	8001a2a <HAL_GPIO_Init+0x20a>
 8001a26:	2307      	movs	r3, #7
 8001a28:	e00e      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a2a:	2308      	movs	r3, #8
 8001a2c:	e00c      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a2e:	2306      	movs	r3, #6
 8001a30:	e00a      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a32:	2305      	movs	r3, #5
 8001a34:	e008      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a36:	2304      	movs	r3, #4
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e004      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e002      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a42:	2301      	movs	r3, #1
 8001a44:	e000      	b.n	8001a48 <HAL_GPIO_Init+0x228>
 8001a46:	2300      	movs	r3, #0
 8001a48:	69fa      	ldr	r2, [r7, #28]
 8001a4a:	f002 0203 	and.w	r2, r2, #3
 8001a4e:	0092      	lsls	r2, r2, #2
 8001a50:	4093      	lsls	r3, r2
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a58:	4934      	ldr	r1, [pc, #208]	; (8001b2c <HAL_GPIO_Init+0x30c>)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a66:	4b3a      	ldr	r3, [pc, #232]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a8a:	4a31      	ldr	r2, [pc, #196]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a90:	4b2f      	ldr	r3, [pc, #188]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a96:	693b      	ldr	r3, [r7, #16]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d003      	beq.n	8001ab4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ab4:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ade:	4a1c      	ldr	r2, [pc, #112]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae4:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b08:	4a11      	ldr	r2, [pc, #68]	; (8001b50 <HAL_GPIO_Init+0x330>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3301      	adds	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	2b0f      	cmp	r3, #15
 8001b18:	f67f ae90 	bls.w	800183c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3724      	adds	r7, #36	; 0x24
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40013800 	.word	0x40013800
 8001b30:	40020000 	.word	0x40020000
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40020800 	.word	0x40020800
 8001b3c:	40020c00 	.word	0x40020c00
 8001b40:	40021000 	.word	0x40021000
 8001b44:	40021400 	.word	0x40021400
 8001b48:	40021800 	.word	0x40021800
 8001b4c:	40021c00 	.word	0x40021c00
 8001b50:	40013c00 	.word	0x40013c00

08001b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e11f      	b.n	8001da6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe ff0e 	bl	800099c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2224      	movs	r2, #36	; 0x24
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bb8:	f000 fd18 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8001bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a7b      	ldr	r2, [pc, #492]	; (8001db0 <HAL_I2C_Init+0x25c>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d807      	bhi.n	8001bd8 <HAL_I2C_Init+0x84>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a7a      	ldr	r2, [pc, #488]	; (8001db4 <HAL_I2C_Init+0x260>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	bf94      	ite	ls
 8001bd0:	2301      	movls	r3, #1
 8001bd2:	2300      	movhi	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e006      	b.n	8001be6 <HAL_I2C_Init+0x92>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a77      	ldr	r2, [pc, #476]	; (8001db8 <HAL_I2C_Init+0x264>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	bf94      	ite	ls
 8001be0:	2301      	movls	r3, #1
 8001be2:	2300      	movhi	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0db      	b.n	8001da6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4a72      	ldr	r2, [pc, #456]	; (8001dbc <HAL_I2C_Init+0x268>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9b      	lsrs	r3, r3, #18
 8001bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a64      	ldr	r2, [pc, #400]	; (8001db0 <HAL_I2C_Init+0x25c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d802      	bhi.n	8001c28 <HAL_I2C_Init+0xd4>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3301      	adds	r3, #1
 8001c26:	e009      	b.n	8001c3c <HAL_I2C_Init+0xe8>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	4a63      	ldr	r2, [pc, #396]	; (8001dc0 <HAL_I2C_Init+0x26c>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	099b      	lsrs	r3, r3, #6
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001c4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4956      	ldr	r1, [pc, #344]	; (8001db0 <HAL_I2C_Init+0x25c>)
 8001c58:	428b      	cmp	r3, r1
 8001c5a:	d80d      	bhi.n	8001c78 <HAL_I2C_Init+0x124>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e59      	subs	r1, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	bf38      	it	cc
 8001c74:	2304      	movcc	r3, #4
 8001c76:	e04f      	b.n	8001d18 <HAL_I2C_Init+0x1c4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d111      	bne.n	8001ca4 <HAL_I2C_Init+0x150>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1e58      	subs	r0, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	440b      	add	r3, r1
 8001c8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c92:	3301      	adds	r3, #1
 8001c94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	bf0c      	ite	eq
 8001c9c:	2301      	moveq	r3, #1
 8001c9e:	2300      	movne	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	e012      	b.n	8001cca <HAL_I2C_Init+0x176>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	1e58      	subs	r0, r3, #1
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6859      	ldr	r1, [r3, #4]
 8001cac:	460b      	mov	r3, r1
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	0099      	lsls	r1, r3, #2
 8001cb4:	440b      	add	r3, r1
 8001cb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cba:	3301      	adds	r3, #1
 8001cbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf0c      	ite	eq
 8001cc4:	2301      	moveq	r3, #1
 8001cc6:	2300      	movne	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Init+0x17e>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e022      	b.n	8001d18 <HAL_I2C_Init+0x1c4>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_I2C_Init+0x1a4>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1e58      	subs	r0, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6859      	ldr	r1, [r3, #4]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	440b      	add	r3, r1
 8001ce8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cec:	3301      	adds	r3, #1
 8001cee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cf6:	e00f      	b.n	8001d18 <HAL_I2C_Init+0x1c4>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1e58      	subs	r0, r3, #1
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6859      	ldr	r1, [r3, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	0099      	lsls	r1, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	6809      	ldr	r1, [r1, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69da      	ldr	r2, [r3, #28]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001d46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6911      	ldr	r1, [r2, #16]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68d2      	ldr	r2, [r2, #12]
 8001d52:	4311      	orrs	r1, r2
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	430b      	orrs	r3, r1
 8001d5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0201 	orr.w	r2, r2, #1
 8001d86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2220      	movs	r2, #32
 8001d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	000186a0 	.word	0x000186a0
 8001db4:	001e847f 	.word	0x001e847f
 8001db8:	003d08ff 	.word	0x003d08ff
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	10624dd3 	.word	0x10624dd3

08001dc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d101      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e25b      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001de2:	4ba3      	ldr	r3, [pc, #652]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 030c 	and.w	r3, r3, #12
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d00c      	beq.n	8001e08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dee:	4ba0      	ldr	r3, [pc, #640]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001df6:	2b08      	cmp	r3, #8
 8001df8:	d112      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dfa:	4b9d      	ldr	r3, [pc, #628]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e08:	4b99      	ldr	r3, [pc, #612]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d05b      	beq.n	8001ecc <HAL_RCC_OscConfig+0x108>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d157      	bne.n	8001ecc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e236      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e28:	d106      	bne.n	8001e38 <HAL_RCC_OscConfig+0x74>
 8001e2a:	4b91      	ldr	r3, [pc, #580]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a90      	ldr	r2, [pc, #576]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	e01d      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e40:	d10c      	bne.n	8001e5c <HAL_RCC_OscConfig+0x98>
 8001e42:	4b8b      	ldr	r3, [pc, #556]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a8a      	ldr	r2, [pc, #552]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e4c:	6013      	str	r3, [r2, #0]
 8001e4e:	4b88      	ldr	r3, [pc, #544]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a87      	ldr	r2, [pc, #540]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e58:	6013      	str	r3, [r2, #0]
 8001e5a:	e00b      	b.n	8001e74 <HAL_RCC_OscConfig+0xb0>
 8001e5c:	4b84      	ldr	r3, [pc, #528]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a83      	ldr	r2, [pc, #524]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	4b81      	ldr	r3, [pc, #516]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a80      	ldr	r2, [pc, #512]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d013      	beq.n	8001ea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7fe ffce 	bl	8000e1c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e84:	f7fe ffca 	bl	8000e1c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b64      	cmp	r3, #100	; 0x64
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1fb      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b76      	ldr	r3, [pc, #472]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d0f0      	beq.n	8001e84 <HAL_RCC_OscConfig+0xc0>
 8001ea2:	e014      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea4:	f7fe ffba 	bl	8000e1c <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eaa:	e008      	b.n	8001ebe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eac:	f7fe ffb6 	bl	8000e1c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e1e7      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebe:	4b6c      	ldr	r3, [pc, #432]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1f0      	bne.n	8001eac <HAL_RCC_OscConfig+0xe8>
 8001eca:	e000      	b.n	8001ece <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ecc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d063      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eda:	4b65      	ldr	r3, [pc, #404]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 030c 	and.w	r3, r3, #12
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ee6:	4b62      	ldr	r3, [pc, #392]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001eee:	2b08      	cmp	r3, #8
 8001ef0:	d11c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ef2:	4b5f      	ldr	r3, [pc, #380]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d116      	bne.n	8001f2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001efe:	4b5c      	ldr	r3, [pc, #368]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x152>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d001      	beq.n	8001f16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e1bb      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f16:	4b56      	ldr	r3, [pc, #344]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4952      	ldr	r1, [pc, #328]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f2a:	e03a      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f34:	4b4f      	ldr	r3, [pc, #316]	; (8002074 <HAL_RCC_OscConfig+0x2b0>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f3a:	f7fe ff6f 	bl	8000e1c <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f42:	f7fe ff6b 	bl	8000e1c <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e19c      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f54:	4b46      	ldr	r3, [pc, #280]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f60:	4b43      	ldr	r3, [pc, #268]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4940      	ldr	r1, [pc, #256]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	600b      	str	r3, [r1, #0]
 8001f74:	e015      	b.n	8001fa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f76:	4b3f      	ldr	r3, [pc, #252]	; (8002074 <HAL_RCC_OscConfig+0x2b0>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f7c:	f7fe ff4e 	bl	8000e1c <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f84:	f7fe ff4a 	bl	8000e1c <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e17b      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f96:	4b36      	ldr	r3, [pc, #216]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d030      	beq.n	8002010 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d016      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fb6:	4b30      	ldr	r3, [pc, #192]	; (8002078 <HAL_RCC_OscConfig+0x2b4>)
 8001fb8:	2201      	movs	r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fbc:	f7fe ff2e 	bl	8000e1c <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fc4:	f7fe ff2a 	bl	8000e1c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e15b      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x200>
 8001fe2:	e015      	b.n	8002010 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_OscConfig+0x2b4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe ff17 	bl	8000e1c <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ff2:	f7fe ff13 	bl	8000e1c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e144      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8002006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80a0 	beq.w	800215e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800201e:	2300      	movs	r3, #0
 8002020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10f      	bne.n	800204e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <HAL_RCC_OscConfig+0x2ac>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800204a:	2301      	movs	r3, #1
 800204c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800204e:	4b0b      	ldr	r3, [pc, #44]	; (800207c <HAL_RCC_OscConfig+0x2b8>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002056:	2b00      	cmp	r3, #0
 8002058:	d121      	bne.n	800209e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_RCC_OscConfig+0x2b8>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a07      	ldr	r2, [pc, #28]	; (800207c <HAL_RCC_OscConfig+0x2b8>)
 8002060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002064:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002066:	f7fe fed9 	bl	8000e1c <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206c:	e011      	b.n	8002092 <HAL_RCC_OscConfig+0x2ce>
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	42470000 	.word	0x42470000
 8002078:	42470e80 	.word	0x42470e80
 800207c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002080:	f7fe fecc 	bl	8000e1c <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e0fd      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002092:	4b81      	ldr	r3, [pc, #516]	; (8002298 <HAL_RCC_OscConfig+0x4d4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d106      	bne.n	80020b4 <HAL_RCC_OscConfig+0x2f0>
 80020a6:	4b7d      	ldr	r3, [pc, #500]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80020a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020aa:	4a7c      	ldr	r2, [pc, #496]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6713      	str	r3, [r2, #112]	; 0x70
 80020b2:	e01c      	b.n	80020ee <HAL_RCC_OscConfig+0x32a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b05      	cmp	r3, #5
 80020ba:	d10c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x312>
 80020bc:	4b77      	ldr	r3, [pc, #476]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	4a76      	ldr	r2, [pc, #472]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6713      	str	r3, [r2, #112]	; 0x70
 80020c8:	4b74      	ldr	r3, [pc, #464]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80020ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020cc:	4a73      	ldr	r2, [pc, #460]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80020ce:	f043 0301 	orr.w	r3, r3, #1
 80020d2:	6713      	str	r3, [r2, #112]	; 0x70
 80020d4:	e00b      	b.n	80020ee <HAL_RCC_OscConfig+0x32a>
 80020d6:	4b71      	ldr	r3, [pc, #452]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80020d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020da:	4a70      	ldr	r2, [pc, #448]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6713      	str	r3, [r2, #112]	; 0x70
 80020e2:	4b6e      	ldr	r3, [pc, #440]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80020e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e6:	4a6d      	ldr	r2, [pc, #436]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d015      	beq.n	8002122 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f6:	f7fe fe91 	bl	8000e1c <HAL_GetTick>
 80020fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020fc:	e00a      	b.n	8002114 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020fe:	f7fe fe8d 	bl	8000e1c <HAL_GetTick>
 8002102:	4602      	mov	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	f241 3288 	movw	r2, #5000	; 0x1388
 800210c:	4293      	cmp	r3, r2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e0bc      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	4b61      	ldr	r3, [pc, #388]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 8002116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0ee      	beq.n	80020fe <HAL_RCC_OscConfig+0x33a>
 8002120:	e014      	b.n	800214c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002122:	f7fe fe7b 	bl	8000e1c <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002128:	e00a      	b.n	8002140 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800212a:	f7fe fe77 	bl	8000e1c <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	f241 3288 	movw	r2, #5000	; 0x1388
 8002138:	4293      	cmp	r3, r2
 800213a:	d901      	bls.n	8002140 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800213c:	2303      	movs	r3, #3
 800213e:	e0a6      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002140:	4b56      	ldr	r3, [pc, #344]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002144:	f003 0302 	and.w	r3, r3, #2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1ee      	bne.n	800212a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800214c:	7dfb      	ldrb	r3, [r7, #23]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d105      	bne.n	800215e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002152:	4b52      	ldr	r3, [pc, #328]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	4a51      	ldr	r2, [pc, #324]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 8002158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800215c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8092 	beq.w	800228c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002168:	4b4c      	ldr	r3, [pc, #304]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 030c 	and.w	r3, r3, #12
 8002170:	2b08      	cmp	r3, #8
 8002172:	d05c      	beq.n	800222e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b02      	cmp	r3, #2
 800217a:	d141      	bne.n	8002200 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217c:	4b48      	ldr	r3, [pc, #288]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7fe fe4b 	bl	8000e1c <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218a:	f7fe fe47 	bl	8000e1c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e078      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800219c:	4b3f      	ldr	r3, [pc, #252]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d1f0      	bne.n	800218a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	69da      	ldr	r2, [r3, #28]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a1b      	ldr	r3, [r3, #32]
 80021b0:	431a      	orrs	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b6:	019b      	lsls	r3, r3, #6
 80021b8:	431a      	orrs	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	3b01      	subs	r3, #1
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ca:	061b      	lsls	r3, r3, #24
 80021cc:	4933      	ldr	r1, [pc, #204]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021d2:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7fe fe20 	bl	8000e1c <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7fe fe1c 	bl	8000e1c <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e04d      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021f2:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d0f0      	beq.n	80021e0 <HAL_RCC_OscConfig+0x41c>
 80021fe:	e045      	b.n	800228c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002200:	4b27      	ldr	r3, [pc, #156]	; (80022a0 <HAL_RCC_OscConfig+0x4dc>)
 8002202:	2200      	movs	r2, #0
 8002204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002206:	f7fe fe09 	bl	8000e1c <HAL_GetTick>
 800220a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220c:	e008      	b.n	8002220 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800220e:	f7fe fe05 	bl	8000e1c <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d901      	bls.n	8002220 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800221c:	2303      	movs	r3, #3
 800221e:	e036      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1f0      	bne.n	800220e <HAL_RCC_OscConfig+0x44a>
 800222c:	e02e      	b.n	800228c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e029      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_RCC_OscConfig+0x4d8>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	429a      	cmp	r2, r3
 800224c:	d11c      	bne.n	8002288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d115      	bne.n	8002288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800225c:	68fa      	ldr	r2, [r7, #12]
 800225e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002262:	4013      	ands	r3, r2
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002268:	4293      	cmp	r3, r2
 800226a:	d10d      	bne.n	8002288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002276:	429a      	cmp	r2, r3
 8002278:	d106      	bne.n	8002288 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40007000 	.word	0x40007000
 800229c:	40023800 	.word	0x40023800
 80022a0:	42470060 	.word	0x42470060

080022a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0cc      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022b8:	4b68      	ldr	r3, [pc, #416]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 030f 	and.w	r3, r3, #15
 80022c0:	683a      	ldr	r2, [r7, #0]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d90c      	bls.n	80022e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c6:	4b65      	ldr	r3, [pc, #404]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ce:	4b63      	ldr	r3, [pc, #396]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	429a      	cmp	r2, r3
 80022da:	d001      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e0b8      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d020      	beq.n	800232e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0304 	and.w	r3, r3, #4
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d005      	beq.n	8002304 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022f8:	4b59      	ldr	r3, [pc, #356]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	4a58      	ldr	r2, [pc, #352]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80022fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002302:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b00      	cmp	r3, #0
 800230e:	d005      	beq.n	800231c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002310:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	4a52      	ldr	r2, [pc, #328]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800231a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800231c:	4b50      	ldr	r3, [pc, #320]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	494d      	ldr	r1, [pc, #308]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	4313      	orrs	r3, r2
 800232c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d044      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d107      	bne.n	8002352 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002342:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d119      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e07f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d003      	beq.n	8002362 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800235e:	2b03      	cmp	r3, #3
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002362:	4b3f      	ldr	r3, [pc, #252]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d109      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e06f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002372:	4b3b      	ldr	r3, [pc, #236]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e067      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002382:	4b37      	ldr	r3, [pc, #220]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f023 0203 	bic.w	r2, r3, #3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4934      	ldr	r1, [pc, #208]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002390:	4313      	orrs	r3, r2
 8002392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002394:	f7fe fd42 	bl	8000e1c <HAL_GetTick>
 8002398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	e00a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800239c:	f7fe fd3e 	bl	8000e1c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e04f      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 020c 	and.w	r2, r3, #12
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d1eb      	bne.n	800239c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023c4:	4b25      	ldr	r3, [pc, #148]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 030f 	and.w	r3, r3, #15
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d20c      	bcs.n	80023ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d2:	4b22      	ldr	r3, [pc, #136]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	4b20      	ldr	r3, [pc, #128]	; (800245c <HAL_RCC_ClockConfig+0x1b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d001      	beq.n	80023ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e032      	b.n	8002452 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d008      	beq.n	800240a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f8:	4b19      	ldr	r3, [pc, #100]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	4916      	ldr	r1, [pc, #88]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d009      	beq.n	800242a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	490e      	ldr	r1, [pc, #56]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800242a:	f000 f821 	bl	8002470 <HAL_RCC_GetSysClockFreq>
 800242e:	4601      	mov	r1, r0
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_ClockConfig+0x1bc>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	4a0a      	ldr	r2, [pc, #40]	; (8002464 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	5cd3      	ldrb	r3, [r2, r3]
 800243e:	fa21 f303 	lsr.w	r3, r1, r3
 8002442:	4a09      	ldr	r2, [pc, #36]	; (8002468 <HAL_RCC_ClockConfig+0x1c4>)
 8002444:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x1c8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe fca2 	bl	8000d94 <HAL_InitTick>

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40023c00 	.word	0x40023c00
 8002460:	40023800 	.word	0x40023800
 8002464:	080059c8 	.word	0x080059c8
 8002468:	20000000 	.word	0x20000000
 800246c:	20000004 	.word	0x20000004

08002470 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	607b      	str	r3, [r7, #4]
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	2300      	movs	r3, #0
 8002480:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002486:	4b50      	ldr	r3, [pc, #320]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 030c 	and.w	r3, r3, #12
 800248e:	2b04      	cmp	r3, #4
 8002490:	d007      	beq.n	80024a2 <HAL_RCC_GetSysClockFreq+0x32>
 8002492:	2b08      	cmp	r3, #8
 8002494:	d008      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x38>
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 808d 	bne.w	80025b6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b4b      	ldr	r3, [pc, #300]	; (80025cc <HAL_RCC_GetSysClockFreq+0x15c>)
 800249e:	60bb      	str	r3, [r7, #8]
       break;
 80024a0:	e08c      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80024a2:	4b4b      	ldr	r3, [pc, #300]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80024a4:	60bb      	str	r3, [r7, #8]
      break;
 80024a6:	e089      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024a8:	4b47      	ldr	r3, [pc, #284]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80024b0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024b2:	4b45      	ldr	r3, [pc, #276]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d023      	beq.n	8002506 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024be:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	099b      	lsrs	r3, r3, #6
 80024c4:	f04f 0400 	mov.w	r4, #0
 80024c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80024cc:	f04f 0200 	mov.w	r2, #0
 80024d0:	ea03 0501 	and.w	r5, r3, r1
 80024d4:	ea04 0602 	and.w	r6, r4, r2
 80024d8:	4a3d      	ldr	r2, [pc, #244]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80024da:	fb02 f106 	mul.w	r1, r2, r6
 80024de:	2200      	movs	r2, #0
 80024e0:	fb02 f205 	mul.w	r2, r2, r5
 80024e4:	440a      	add	r2, r1
 80024e6:	493a      	ldr	r1, [pc, #232]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x160>)
 80024e8:	fba5 0101 	umull	r0, r1, r5, r1
 80024ec:	1853      	adds	r3, r2, r1
 80024ee:	4619      	mov	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f04f 0400 	mov.w	r4, #0
 80024f6:	461a      	mov	r2, r3
 80024f8:	4623      	mov	r3, r4
 80024fa:	f7fd fe69 	bl	80001d0 <__aeabi_uldivmod>
 80024fe:	4603      	mov	r3, r0
 8002500:	460c      	mov	r4, r1
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e049      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002506:	4b30      	ldr	r3, [pc, #192]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	f04f 0400 	mov.w	r4, #0
 8002510:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	ea03 0501 	and.w	r5, r3, r1
 800251c:	ea04 0602 	and.w	r6, r4, r2
 8002520:	4629      	mov	r1, r5
 8002522:	4632      	mov	r2, r6
 8002524:	f04f 0300 	mov.w	r3, #0
 8002528:	f04f 0400 	mov.w	r4, #0
 800252c:	0154      	lsls	r4, r2, #5
 800252e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002532:	014b      	lsls	r3, r1, #5
 8002534:	4619      	mov	r1, r3
 8002536:	4622      	mov	r2, r4
 8002538:	1b49      	subs	r1, r1, r5
 800253a:	eb62 0206 	sbc.w	r2, r2, r6
 800253e:	f04f 0300 	mov.w	r3, #0
 8002542:	f04f 0400 	mov.w	r4, #0
 8002546:	0194      	lsls	r4, r2, #6
 8002548:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800254c:	018b      	lsls	r3, r1, #6
 800254e:	1a5b      	subs	r3, r3, r1
 8002550:	eb64 0402 	sbc.w	r4, r4, r2
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	00e2      	lsls	r2, r4, #3
 800255e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002562:	00d9      	lsls	r1, r3, #3
 8002564:	460b      	mov	r3, r1
 8002566:	4614      	mov	r4, r2
 8002568:	195b      	adds	r3, r3, r5
 800256a:	eb44 0406 	adc.w	r4, r4, r6
 800256e:	f04f 0100 	mov.w	r1, #0
 8002572:	f04f 0200 	mov.w	r2, #0
 8002576:	02a2      	lsls	r2, r4, #10
 8002578:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800257c:	0299      	lsls	r1, r3, #10
 800257e:	460b      	mov	r3, r1
 8002580:	4614      	mov	r4, r2
 8002582:	4618      	mov	r0, r3
 8002584:	4621      	mov	r1, r4
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f04f 0400 	mov.w	r4, #0
 800258c:	461a      	mov	r2, r3
 800258e:	4623      	mov	r3, r4
 8002590:	f7fd fe1e 	bl	80001d0 <__aeabi_uldivmod>
 8002594:	4603      	mov	r3, r0
 8002596:	460c      	mov	r4, r1
 8002598:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_RCC_GetSysClockFreq+0x158>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	0c1b      	lsrs	r3, r3, #16
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	3301      	adds	r3, #1
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	60bb      	str	r3, [r7, #8]
      break;
 80025b4:	e002      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b6:	4b05      	ldr	r3, [pc, #20]	; (80025cc <HAL_RCC_GetSysClockFreq+0x15c>)
 80025b8:	60bb      	str	r3, [r7, #8]
      break;
 80025ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025bc:	68bb      	ldr	r3, [r7, #8]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3714      	adds	r7, #20
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	00f42400 	.word	0x00f42400
 80025d0:	017d7840 	.word	0x017d7840

080025d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d8:	4b03      	ldr	r3, [pc, #12]	; (80025e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025da:	681b      	ldr	r3, [r3, #0]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000000 	.word	0x20000000

080025ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025f0:	f7ff fff0 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 80025f4:	4601      	mov	r1, r0
 80025f6:	4b05      	ldr	r3, [pc, #20]	; (800260c <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	0a9b      	lsrs	r3, r3, #10
 80025fc:	f003 0307 	and.w	r3, r3, #7
 8002600:	4a03      	ldr	r2, [pc, #12]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002602:	5cd3      	ldrb	r3, [r2, r3]
 8002604:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd80      	pop	{r7, pc}
 800260c:	40023800 	.word	0x40023800
 8002610:	080059d8 	.word	0x080059d8

08002614 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002618:	f7ff ffdc 	bl	80025d4 <HAL_RCC_GetHCLKFreq>
 800261c:	4601      	mov	r1, r0
 800261e:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	0b5b      	lsrs	r3, r3, #13
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4a03      	ldr	r2, [pc, #12]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x24>)
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	40023800 	.word	0x40023800
 8002638:	080059d8 	.word	0x080059d8

0800263c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e03f      	b.n	80026ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7fe fa4a 	bl	8000afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2224      	movs	r2, #36	; 0x24
 800266c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800267e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 f829 	bl	80026d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691a      	ldr	r2, [r3, #16]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	695a      	ldr	r2, [r3, #20]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026dc:	b085      	sub	sp, #20
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689a      	ldr	r2, [r3, #8]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800271a:	f023 030c 	bic.w	r3, r3, #12
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	68f9      	ldr	r1, [r7, #12]
 8002724:	430b      	orrs	r3, r1
 8002726:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002746:	f040 818b 	bne.w	8002a60 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4ac1      	ldr	r2, [pc, #772]	; (8002a54 <UART_SetConfig+0x37c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d005      	beq.n	8002760 <UART_SetConfig+0x88>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4abf      	ldr	r2, [pc, #764]	; (8002a58 <UART_SetConfig+0x380>)
 800275a:	4293      	cmp	r3, r2
 800275c:	f040 80bd 	bne.w	80028da <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002760:	f7ff ff58 	bl	8002614 <HAL_RCC_GetPCLK2Freq>
 8002764:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	461d      	mov	r5, r3
 800276a:	f04f 0600 	mov.w	r6, #0
 800276e:	46a8      	mov	r8, r5
 8002770:	46b1      	mov	r9, r6
 8002772:	eb18 0308 	adds.w	r3, r8, r8
 8002776:	eb49 0409 	adc.w	r4, r9, r9
 800277a:	4698      	mov	r8, r3
 800277c:	46a1      	mov	r9, r4
 800277e:	eb18 0805 	adds.w	r8, r8, r5
 8002782:	eb49 0906 	adc.w	r9, r9, r6
 8002786:	f04f 0100 	mov.w	r1, #0
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002792:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002796:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800279a:	4688      	mov	r8, r1
 800279c:	4691      	mov	r9, r2
 800279e:	eb18 0005 	adds.w	r0, r8, r5
 80027a2:	eb49 0106 	adc.w	r1, r9, r6
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	461d      	mov	r5, r3
 80027ac:	f04f 0600 	mov.w	r6, #0
 80027b0:	196b      	adds	r3, r5, r5
 80027b2:	eb46 0406 	adc.w	r4, r6, r6
 80027b6:	461a      	mov	r2, r3
 80027b8:	4623      	mov	r3, r4
 80027ba:	f7fd fd09 	bl	80001d0 <__aeabi_uldivmod>
 80027be:	4603      	mov	r3, r0
 80027c0:	460c      	mov	r4, r1
 80027c2:	461a      	mov	r2, r3
 80027c4:	4ba5      	ldr	r3, [pc, #660]	; (8002a5c <UART_SetConfig+0x384>)
 80027c6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	461d      	mov	r5, r3
 80027d4:	f04f 0600 	mov.w	r6, #0
 80027d8:	46a9      	mov	r9, r5
 80027da:	46b2      	mov	sl, r6
 80027dc:	eb19 0309 	adds.w	r3, r9, r9
 80027e0:	eb4a 040a 	adc.w	r4, sl, sl
 80027e4:	4699      	mov	r9, r3
 80027e6:	46a2      	mov	sl, r4
 80027e8:	eb19 0905 	adds.w	r9, r9, r5
 80027ec:	eb4a 0a06 	adc.w	sl, sl, r6
 80027f0:	f04f 0100 	mov.w	r1, #0
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80027fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002800:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002804:	4689      	mov	r9, r1
 8002806:	4692      	mov	sl, r2
 8002808:	eb19 0005 	adds.w	r0, r9, r5
 800280c:	eb4a 0106 	adc.w	r1, sl, r6
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	461d      	mov	r5, r3
 8002816:	f04f 0600 	mov.w	r6, #0
 800281a:	196b      	adds	r3, r5, r5
 800281c:	eb46 0406 	adc.w	r4, r6, r6
 8002820:	461a      	mov	r2, r3
 8002822:	4623      	mov	r3, r4
 8002824:	f7fd fcd4 	bl	80001d0 <__aeabi_uldivmod>
 8002828:	4603      	mov	r3, r0
 800282a:	460c      	mov	r4, r1
 800282c:	461a      	mov	r2, r3
 800282e:	4b8b      	ldr	r3, [pc, #556]	; (8002a5c <UART_SetConfig+0x384>)
 8002830:	fba3 1302 	umull	r1, r3, r3, r2
 8002834:	095b      	lsrs	r3, r3, #5
 8002836:	2164      	movs	r1, #100	; 0x64
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	3332      	adds	r3, #50	; 0x32
 8002842:	4a86      	ldr	r2, [pc, #536]	; (8002a5c <UART_SetConfig+0x384>)
 8002844:	fba2 2303 	umull	r2, r3, r2, r3
 8002848:	095b      	lsrs	r3, r3, #5
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002850:	4498      	add	r8, r3
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	461d      	mov	r5, r3
 8002856:	f04f 0600 	mov.w	r6, #0
 800285a:	46a9      	mov	r9, r5
 800285c:	46b2      	mov	sl, r6
 800285e:	eb19 0309 	adds.w	r3, r9, r9
 8002862:	eb4a 040a 	adc.w	r4, sl, sl
 8002866:	4699      	mov	r9, r3
 8002868:	46a2      	mov	sl, r4
 800286a:	eb19 0905 	adds.w	r9, r9, r5
 800286e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002872:	f04f 0100 	mov.w	r1, #0
 8002876:	f04f 0200 	mov.w	r2, #0
 800287a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800287e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002882:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002886:	4689      	mov	r9, r1
 8002888:	4692      	mov	sl, r2
 800288a:	eb19 0005 	adds.w	r0, r9, r5
 800288e:	eb4a 0106 	adc.w	r1, sl, r6
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	461d      	mov	r5, r3
 8002898:	f04f 0600 	mov.w	r6, #0
 800289c:	196b      	adds	r3, r5, r5
 800289e:	eb46 0406 	adc.w	r4, r6, r6
 80028a2:	461a      	mov	r2, r3
 80028a4:	4623      	mov	r3, r4
 80028a6:	f7fd fc93 	bl	80001d0 <__aeabi_uldivmod>
 80028aa:	4603      	mov	r3, r0
 80028ac:	460c      	mov	r4, r1
 80028ae:	461a      	mov	r2, r3
 80028b0:	4b6a      	ldr	r3, [pc, #424]	; (8002a5c <UART_SetConfig+0x384>)
 80028b2:	fba3 1302 	umull	r1, r3, r3, r2
 80028b6:	095b      	lsrs	r3, r3, #5
 80028b8:	2164      	movs	r1, #100	; 0x64
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	3332      	adds	r3, #50	; 0x32
 80028c4:	4a65      	ldr	r2, [pc, #404]	; (8002a5c <UART_SetConfig+0x384>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	f003 0207 	and.w	r2, r3, #7
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4442      	add	r2, r8
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	e26f      	b.n	8002dba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028da:	f7ff fe87 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 80028de:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	461d      	mov	r5, r3
 80028e4:	f04f 0600 	mov.w	r6, #0
 80028e8:	46a8      	mov	r8, r5
 80028ea:	46b1      	mov	r9, r6
 80028ec:	eb18 0308 	adds.w	r3, r8, r8
 80028f0:	eb49 0409 	adc.w	r4, r9, r9
 80028f4:	4698      	mov	r8, r3
 80028f6:	46a1      	mov	r9, r4
 80028f8:	eb18 0805 	adds.w	r8, r8, r5
 80028fc:	eb49 0906 	adc.w	r9, r9, r6
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800290c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002910:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002914:	4688      	mov	r8, r1
 8002916:	4691      	mov	r9, r2
 8002918:	eb18 0005 	adds.w	r0, r8, r5
 800291c:	eb49 0106 	adc.w	r1, r9, r6
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	461d      	mov	r5, r3
 8002926:	f04f 0600 	mov.w	r6, #0
 800292a:	196b      	adds	r3, r5, r5
 800292c:	eb46 0406 	adc.w	r4, r6, r6
 8002930:	461a      	mov	r2, r3
 8002932:	4623      	mov	r3, r4
 8002934:	f7fd fc4c 	bl	80001d0 <__aeabi_uldivmod>
 8002938:	4603      	mov	r3, r0
 800293a:	460c      	mov	r4, r1
 800293c:	461a      	mov	r2, r3
 800293e:	4b47      	ldr	r3, [pc, #284]	; (8002a5c <UART_SetConfig+0x384>)
 8002940:	fba3 2302 	umull	r2, r3, r3, r2
 8002944:	095b      	lsrs	r3, r3, #5
 8002946:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	461d      	mov	r5, r3
 800294e:	f04f 0600 	mov.w	r6, #0
 8002952:	46a9      	mov	r9, r5
 8002954:	46b2      	mov	sl, r6
 8002956:	eb19 0309 	adds.w	r3, r9, r9
 800295a:	eb4a 040a 	adc.w	r4, sl, sl
 800295e:	4699      	mov	r9, r3
 8002960:	46a2      	mov	sl, r4
 8002962:	eb19 0905 	adds.w	r9, r9, r5
 8002966:	eb4a 0a06 	adc.w	sl, sl, r6
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002976:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800297a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800297e:	4689      	mov	r9, r1
 8002980:	4692      	mov	sl, r2
 8002982:	eb19 0005 	adds.w	r0, r9, r5
 8002986:	eb4a 0106 	adc.w	r1, sl, r6
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	461d      	mov	r5, r3
 8002990:	f04f 0600 	mov.w	r6, #0
 8002994:	196b      	adds	r3, r5, r5
 8002996:	eb46 0406 	adc.w	r4, r6, r6
 800299a:	461a      	mov	r2, r3
 800299c:	4623      	mov	r3, r4
 800299e:	f7fd fc17 	bl	80001d0 <__aeabi_uldivmod>
 80029a2:	4603      	mov	r3, r0
 80029a4:	460c      	mov	r4, r1
 80029a6:	461a      	mov	r2, r3
 80029a8:	4b2c      	ldr	r3, [pc, #176]	; (8002a5c <UART_SetConfig+0x384>)
 80029aa:	fba3 1302 	umull	r1, r3, r3, r2
 80029ae:	095b      	lsrs	r3, r3, #5
 80029b0:	2164      	movs	r1, #100	; 0x64
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	00db      	lsls	r3, r3, #3
 80029ba:	3332      	adds	r3, #50	; 0x32
 80029bc:	4a27      	ldr	r2, [pc, #156]	; (8002a5c <UART_SetConfig+0x384>)
 80029be:	fba2 2303 	umull	r2, r3, r2, r3
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029ca:	4498      	add	r8, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	461d      	mov	r5, r3
 80029d0:	f04f 0600 	mov.w	r6, #0
 80029d4:	46a9      	mov	r9, r5
 80029d6:	46b2      	mov	sl, r6
 80029d8:	eb19 0309 	adds.w	r3, r9, r9
 80029dc:	eb4a 040a 	adc.w	r4, sl, sl
 80029e0:	4699      	mov	r9, r3
 80029e2:	46a2      	mov	sl, r4
 80029e4:	eb19 0905 	adds.w	r9, r9, r5
 80029e8:	eb4a 0a06 	adc.w	sl, sl, r6
 80029ec:	f04f 0100 	mov.w	r1, #0
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a00:	4689      	mov	r9, r1
 8002a02:	4692      	mov	sl, r2
 8002a04:	eb19 0005 	adds.w	r0, r9, r5
 8002a08:	eb4a 0106 	adc.w	r1, sl, r6
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	461d      	mov	r5, r3
 8002a12:	f04f 0600 	mov.w	r6, #0
 8002a16:	196b      	adds	r3, r5, r5
 8002a18:	eb46 0406 	adc.w	r4, r6, r6
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4623      	mov	r3, r4
 8002a20:	f7fd fbd6 	bl	80001d0 <__aeabi_uldivmod>
 8002a24:	4603      	mov	r3, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	461a      	mov	r2, r3
 8002a2a:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <UART_SetConfig+0x384>)
 8002a2c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a30:	095b      	lsrs	r3, r3, #5
 8002a32:	2164      	movs	r1, #100	; 0x64
 8002a34:	fb01 f303 	mul.w	r3, r1, r3
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	3332      	adds	r3, #50	; 0x32
 8002a3e:	4a07      	ldr	r2, [pc, #28]	; (8002a5c <UART_SetConfig+0x384>)
 8002a40:	fba2 2303 	umull	r2, r3, r2, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	f003 0207 	and.w	r2, r3, #7
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4442      	add	r2, r8
 8002a50:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002a52:	e1b2      	b.n	8002dba <UART_SetConfig+0x6e2>
 8002a54:	40011000 	.word	0x40011000
 8002a58:	40011400 	.word	0x40011400
 8002a5c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4ad7      	ldr	r2, [pc, #860]	; (8002dc4 <UART_SetConfig+0x6ec>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d005      	beq.n	8002a76 <UART_SetConfig+0x39e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4ad6      	ldr	r2, [pc, #856]	; (8002dc8 <UART_SetConfig+0x6f0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	f040 80d1 	bne.w	8002c18 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002a76:	f7ff fdcd 	bl	8002614 <HAL_RCC_GetPCLK2Freq>
 8002a7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	469a      	mov	sl, r3
 8002a80:	f04f 0b00 	mov.w	fp, #0
 8002a84:	46d0      	mov	r8, sl
 8002a86:	46d9      	mov	r9, fp
 8002a88:	eb18 0308 	adds.w	r3, r8, r8
 8002a8c:	eb49 0409 	adc.w	r4, r9, r9
 8002a90:	4698      	mov	r8, r3
 8002a92:	46a1      	mov	r9, r4
 8002a94:	eb18 080a 	adds.w	r8, r8, sl
 8002a98:	eb49 090b 	adc.w	r9, r9, fp
 8002a9c:	f04f 0100 	mov.w	r1, #0
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002aa8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002aac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ab0:	4688      	mov	r8, r1
 8002ab2:	4691      	mov	r9, r2
 8002ab4:	eb1a 0508 	adds.w	r5, sl, r8
 8002ab8:	eb4b 0609 	adc.w	r6, fp, r9
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	f04f 0400 	mov.w	r4, #0
 8002ace:	0094      	lsls	r4, r2, #2
 8002ad0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ad4:	008b      	lsls	r3, r1, #2
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4623      	mov	r3, r4
 8002ada:	4628      	mov	r0, r5
 8002adc:	4631      	mov	r1, r6
 8002ade:	f7fd fb77 	bl	80001d0 <__aeabi_uldivmod>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	460c      	mov	r4, r1
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4bb8      	ldr	r3, [pc, #736]	; (8002dcc <UART_SetConfig+0x6f4>)
 8002aea:	fba3 2302 	umull	r2, r3, r3, r2
 8002aee:	095b      	lsrs	r3, r3, #5
 8002af0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	469b      	mov	fp, r3
 8002af8:	f04f 0c00 	mov.w	ip, #0
 8002afc:	46d9      	mov	r9, fp
 8002afe:	46e2      	mov	sl, ip
 8002b00:	eb19 0309 	adds.w	r3, r9, r9
 8002b04:	eb4a 040a 	adc.w	r4, sl, sl
 8002b08:	4699      	mov	r9, r3
 8002b0a:	46a2      	mov	sl, r4
 8002b0c:	eb19 090b 	adds.w	r9, r9, fp
 8002b10:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002b14:	f04f 0100 	mov.w	r1, #0
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b28:	4689      	mov	r9, r1
 8002b2a:	4692      	mov	sl, r2
 8002b2c:	eb1b 0509 	adds.w	r5, fp, r9
 8002b30:	eb4c 060a 	adc.w	r6, ip, sl
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	f04f 0300 	mov.w	r3, #0
 8002b42:	f04f 0400 	mov.w	r4, #0
 8002b46:	0094      	lsls	r4, r2, #2
 8002b48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002b4c:	008b      	lsls	r3, r1, #2
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4623      	mov	r3, r4
 8002b52:	4628      	mov	r0, r5
 8002b54:	4631      	mov	r1, r6
 8002b56:	f7fd fb3b 	bl	80001d0 <__aeabi_uldivmod>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	460c      	mov	r4, r1
 8002b5e:	461a      	mov	r2, r3
 8002b60:	4b9a      	ldr	r3, [pc, #616]	; (8002dcc <UART_SetConfig+0x6f4>)
 8002b62:	fba3 1302 	umull	r1, r3, r3, r2
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2164      	movs	r1, #100	; 0x64
 8002b6a:	fb01 f303 	mul.w	r3, r1, r3
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	3332      	adds	r3, #50	; 0x32
 8002b74:	4a95      	ldr	r2, [pc, #596]	; (8002dcc <UART_SetConfig+0x6f4>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	095b      	lsrs	r3, r3, #5
 8002b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b80:	4498      	add	r8, r3
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	469b      	mov	fp, r3
 8002b86:	f04f 0c00 	mov.w	ip, #0
 8002b8a:	46d9      	mov	r9, fp
 8002b8c:	46e2      	mov	sl, ip
 8002b8e:	eb19 0309 	adds.w	r3, r9, r9
 8002b92:	eb4a 040a 	adc.w	r4, sl, sl
 8002b96:	4699      	mov	r9, r3
 8002b98:	46a2      	mov	sl, r4
 8002b9a:	eb19 090b 	adds.w	r9, r9, fp
 8002b9e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002ba2:	f04f 0100 	mov.w	r1, #0
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bb2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bb6:	4689      	mov	r9, r1
 8002bb8:	4692      	mov	sl, r2
 8002bba:	eb1b 0509 	adds.w	r5, fp, r9
 8002bbe:	eb4c 060a 	adc.w	r6, ip, sl
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	f04f 0400 	mov.w	r4, #0
 8002bd4:	0094      	lsls	r4, r2, #2
 8002bd6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002bda:	008b      	lsls	r3, r1, #2
 8002bdc:	461a      	mov	r2, r3
 8002bde:	4623      	mov	r3, r4
 8002be0:	4628      	mov	r0, r5
 8002be2:	4631      	mov	r1, r6
 8002be4:	f7fd faf4 	bl	80001d0 <__aeabi_uldivmod>
 8002be8:	4603      	mov	r3, r0
 8002bea:	460c      	mov	r4, r1
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b77      	ldr	r3, [pc, #476]	; (8002dcc <UART_SetConfig+0x6f4>)
 8002bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf4:	095b      	lsrs	r3, r3, #5
 8002bf6:	2164      	movs	r1, #100	; 0x64
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	3332      	adds	r3, #50	; 0x32
 8002c02:	4a72      	ldr	r2, [pc, #456]	; (8002dcc <UART_SetConfig+0x6f4>)
 8002c04:	fba2 2303 	umull	r2, r3, r2, r3
 8002c08:	095b      	lsrs	r3, r3, #5
 8002c0a:	f003 020f 	and.w	r2, r3, #15
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4442      	add	r2, r8
 8002c14:	609a      	str	r2, [r3, #8]
 8002c16:	e0d0      	b.n	8002dba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c18:	f7ff fce8 	bl	80025ec <HAL_RCC_GetPCLK1Freq>
 8002c1c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	469a      	mov	sl, r3
 8002c22:	f04f 0b00 	mov.w	fp, #0
 8002c26:	46d0      	mov	r8, sl
 8002c28:	46d9      	mov	r9, fp
 8002c2a:	eb18 0308 	adds.w	r3, r8, r8
 8002c2e:	eb49 0409 	adc.w	r4, r9, r9
 8002c32:	4698      	mov	r8, r3
 8002c34:	46a1      	mov	r9, r4
 8002c36:	eb18 080a 	adds.w	r8, r8, sl
 8002c3a:	eb49 090b 	adc.w	r9, r9, fp
 8002c3e:	f04f 0100 	mov.w	r1, #0
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c4a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002c4e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002c52:	4688      	mov	r8, r1
 8002c54:	4691      	mov	r9, r2
 8002c56:	eb1a 0508 	adds.w	r5, sl, r8
 8002c5a:	eb4b 0609 	adc.w	r6, fp, r9
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	4619      	mov	r1, r3
 8002c64:	f04f 0200 	mov.w	r2, #0
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	f04f 0400 	mov.w	r4, #0
 8002c70:	0094      	lsls	r4, r2, #2
 8002c72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002c76:	008b      	lsls	r3, r1, #2
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	4631      	mov	r1, r6
 8002c80:	f7fd faa6 	bl	80001d0 <__aeabi_uldivmod>
 8002c84:	4603      	mov	r3, r0
 8002c86:	460c      	mov	r4, r1
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b50      	ldr	r3, [pc, #320]	; (8002dcc <UART_SetConfig+0x6f4>)
 8002c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8002c90:	095b      	lsrs	r3, r3, #5
 8002c92:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	469b      	mov	fp, r3
 8002c9a:	f04f 0c00 	mov.w	ip, #0
 8002c9e:	46d9      	mov	r9, fp
 8002ca0:	46e2      	mov	sl, ip
 8002ca2:	eb19 0309 	adds.w	r3, r9, r9
 8002ca6:	eb4a 040a 	adc.w	r4, sl, sl
 8002caa:	4699      	mov	r9, r3
 8002cac:	46a2      	mov	sl, r4
 8002cae:	eb19 090b 	adds.w	r9, r9, fp
 8002cb2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002cb6:	f04f 0100 	mov.w	r1, #0
 8002cba:	f04f 0200 	mov.w	r2, #0
 8002cbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002cc2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002cc6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002cca:	4689      	mov	r9, r1
 8002ccc:	4692      	mov	sl, r2
 8002cce:	eb1b 0509 	adds.w	r5, fp, r9
 8002cd2:	eb4c 060a 	adc.w	r6, ip, sl
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	f04f 0200 	mov.w	r2, #0
 8002ce0:	f04f 0300 	mov.w	r3, #0
 8002ce4:	f04f 0400 	mov.w	r4, #0
 8002ce8:	0094      	lsls	r4, r2, #2
 8002cea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cee:	008b      	lsls	r3, r1, #2
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4623      	mov	r3, r4
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	4631      	mov	r1, r6
 8002cf8:	f7fd fa6a 	bl	80001d0 <__aeabi_uldivmod>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	460c      	mov	r4, r1
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b32      	ldr	r3, [pc, #200]	; (8002dcc <UART_SetConfig+0x6f4>)
 8002d04:	fba3 1302 	umull	r1, r3, r3, r2
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	2164      	movs	r1, #100	; 0x64
 8002d0c:	fb01 f303 	mul.w	r3, r1, r3
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	011b      	lsls	r3, r3, #4
 8002d14:	3332      	adds	r3, #50	; 0x32
 8002d16:	4a2d      	ldr	r2, [pc, #180]	; (8002dcc <UART_SetConfig+0x6f4>)
 8002d18:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1c:	095b      	lsrs	r3, r3, #5
 8002d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d22:	4498      	add	r8, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	469b      	mov	fp, r3
 8002d28:	f04f 0c00 	mov.w	ip, #0
 8002d2c:	46d9      	mov	r9, fp
 8002d2e:	46e2      	mov	sl, ip
 8002d30:	eb19 0309 	adds.w	r3, r9, r9
 8002d34:	eb4a 040a 	adc.w	r4, sl, sl
 8002d38:	4699      	mov	r9, r3
 8002d3a:	46a2      	mov	sl, r4
 8002d3c:	eb19 090b 	adds.w	r9, r9, fp
 8002d40:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d44:	f04f 0100 	mov.w	r1, #0
 8002d48:	f04f 0200 	mov.w	r2, #0
 8002d4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d58:	4689      	mov	r9, r1
 8002d5a:	4692      	mov	sl, r2
 8002d5c:	eb1b 0509 	adds.w	r5, fp, r9
 8002d60:	eb4c 060a 	adc.w	r6, ip, sl
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	f04f 0300 	mov.w	r3, #0
 8002d72:	f04f 0400 	mov.w	r4, #0
 8002d76:	0094      	lsls	r4, r2, #2
 8002d78:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d7c:	008b      	lsls	r3, r1, #2
 8002d7e:	461a      	mov	r2, r3
 8002d80:	4623      	mov	r3, r4
 8002d82:	4628      	mov	r0, r5
 8002d84:	4631      	mov	r1, r6
 8002d86:	f7fd fa23 	bl	80001d0 <__aeabi_uldivmod>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	460c      	mov	r4, r1
 8002d8e:	461a      	mov	r2, r3
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <UART_SetConfig+0x6f4>)
 8002d92:	fba3 1302 	umull	r1, r3, r3, r2
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2164      	movs	r1, #100	; 0x64
 8002d9a:	fb01 f303 	mul.w	r3, r1, r3
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	3332      	adds	r3, #50	; 0x32
 8002da4:	4a09      	ldr	r2, [pc, #36]	; (8002dcc <UART_SetConfig+0x6f4>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4442      	add	r2, r8
 8002db6:	609a      	str	r2, [r3, #8]
}
 8002db8:	e7ff      	b.n	8002dba <UART_SetConfig+0x6e2>
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002dc4:	40011000 	.word	0x40011000
 8002dc8:	40011400 	.word	0x40011400
 8002dcc:	51eb851f 	.word	0x51eb851f

08002dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002dd4:	bf00      	nop
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002de6:	f3ef 8305 	mrs	r3, IPSR
 8002dea:	60bb      	str	r3, [r7, #8]
  return(result);
 8002dec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002df2:	f3ef 8310 	mrs	r3, PRIMASK
 8002df6:	607b      	str	r3, [r7, #4]
  return(result);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d105      	bne.n	8002e0a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8002e02:	603b      	str	r3, [r7, #0]
  return(result);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <osKernelInitialize+0x3a>
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <osKernelInitialize+0x64>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d103      	bne.n	8002e1a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002e12:	f06f 0305 	mvn.w	r3, #5
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	e00c      	b.n	8002e34 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <osKernelInitialize+0x64>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d105      	bne.n	8002e2e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002e22:	4b08      	ldr	r3, [pc, #32]	; (8002e44 <osKernelInitialize+0x64>)
 8002e24:	2201      	movs	r2, #1
 8002e26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	e002      	b.n	8002e34 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e32:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002e34:	68fb      	ldr	r3, [r7, #12]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3714      	adds	r7, #20
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	2000002c 	.word	0x2000002c

08002e48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e4e:	f3ef 8305 	mrs	r3, IPSR
 8002e52:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e54:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10f      	bne.n	8002e7a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8002e5e:	607b      	str	r3, [r7, #4]
  return(result);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d105      	bne.n	8002e72 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002e66:	f3ef 8311 	mrs	r3, BASEPRI
 8002e6a:	603b      	str	r3, [r7, #0]
  return(result);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d007      	beq.n	8002e82 <osKernelStart+0x3a>
 8002e72:	4b0f      	ldr	r3, [pc, #60]	; (8002eb0 <osKernelStart+0x68>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d103      	bne.n	8002e82 <osKernelStart+0x3a>
    stat = osErrorISR;
 8002e7a:	f06f 0305 	mvn.w	r3, #5
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e010      	b.n	8002ea4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <osKernelStart+0x68>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d109      	bne.n	8002e9e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002e8a:	f7ff ffa1 	bl	8002dd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002e8e:	4b08      	ldr	r3, [pc, #32]	; (8002eb0 <osKernelStart+0x68>)
 8002e90:	2202      	movs	r2, #2
 8002e92:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002e94:	f001 f874 	bl	8003f80 <vTaskStartScheduler>
      stat = osOK;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	e002      	b.n	8002ea4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	2000002c 	.word	0x2000002c

08002eb4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b090      	sub	sp, #64	; 0x40
 8002eb8:	af04      	add	r7, sp, #16
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ec4:	f3ef 8305 	mrs	r3, IPSR
 8002ec8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002eca:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f040 808f 	bne.w	8002ff0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d105      	bne.n	8002eea <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002ede:	f3ef 8311 	mrs	r3, BASEPRI
 8002ee2:	617b      	str	r3, [r7, #20]
  return(result);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <osThreadNew+0x3e>
 8002eea:	4b44      	ldr	r3, [pc, #272]	; (8002ffc <osThreadNew+0x148>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d07e      	beq.n	8002ff0 <osThreadNew+0x13c>
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d07b      	beq.n	8002ff0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002ef8:	2380      	movs	r3, #128	; 0x80
 8002efa:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8002efc:	2318      	movs	r3, #24
 8002efe:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002f04:	f04f 33ff 	mov.w	r3, #4294967295
 8002f08:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d045      	beq.n	8002f9c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <osThreadNew+0x6a>
        name = attr->name;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d002      	beq.n	8002f2c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <osThreadNew+0x90>
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	2b38      	cmp	r3, #56	; 0x38
 8002f36:	d805      	bhi.n	8002f44 <osThreadNew+0x90>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <osThreadNew+0x94>
        return (NULL);
 8002f44:	2300      	movs	r3, #0
 8002f46:	e054      	b.n	8002ff2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	695b      	ldr	r3, [r3, #20]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	089b      	lsrs	r3, r3, #2
 8002f56:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00e      	beq.n	8002f7e <osThreadNew+0xca>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b5b      	cmp	r3, #91	; 0x5b
 8002f66:	d90a      	bls.n	8002f7e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d006      	beq.n	8002f7e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	695b      	ldr	r3, [r3, #20]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <osThreadNew+0xca>
        mem = 1;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	623b      	str	r3, [r7, #32]
 8002f7c:	e010      	b.n	8002fa0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10c      	bne.n	8002fa0 <osThreadNew+0xec>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d108      	bne.n	8002fa0 <osThreadNew+0xec>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d104      	bne.n	8002fa0 <osThreadNew+0xec>
          mem = 0;
 8002f96:	2300      	movs	r3, #0
 8002f98:	623b      	str	r3, [r7, #32]
 8002f9a:	e001      	b.n	8002fa0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002fa0:	6a3b      	ldr	r3, [r7, #32]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d110      	bne.n	8002fc8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002fae:	9202      	str	r2, [sp, #8]
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f000 fe09 	bl	8003bd4 <xTaskCreateStatic>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	e013      	b.n	8002ff0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d110      	bne.n	8002ff0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	f107 0310 	add.w	r3, r7, #16
 8002fd6:	9301      	str	r3, [sp, #4]
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	9300      	str	r3, [sp, #0]
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 fe51 	bl	8003c88 <xTaskCreate>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d001      	beq.n	8002ff0 <osThreadNew+0x13c>
          hTask = NULL;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002ff0:	693b      	ldr	r3, [r7, #16]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3730      	adds	r7, #48	; 0x30
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000002c 	.word	0x2000002c

08003000 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003008:	f3ef 8305 	mrs	r3, IPSR
 800300c:	613b      	str	r3, [r7, #16]
  return(result);
 800300e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10f      	bne.n	8003034 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003014:	f3ef 8310 	mrs	r3, PRIMASK
 8003018:	60fb      	str	r3, [r7, #12]
  return(result);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d105      	bne.n	800302c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003020:	f3ef 8311 	mrs	r3, BASEPRI
 8003024:	60bb      	str	r3, [r7, #8]
  return(result);
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <osDelay+0x3c>
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <osDelay+0x58>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d103      	bne.n	800303c <osDelay+0x3c>
    stat = osErrorISR;
 8003034:	f06f 0305 	mvn.w	r3, #5
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e007      	b.n	800304c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800303c:	2300      	movs	r3, #0
 800303e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <osDelay+0x4c>
      vTaskDelay(ticks);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 ff66 	bl	8003f18 <vTaskDelay>
    }
  }

  return (stat);
 800304c:	697b      	ldr	r3, [r7, #20]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000002c 	.word	0x2000002c

0800305c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	4a07      	ldr	r2, [pc, #28]	; (8003088 <vApplicationGetIdleTaskMemory+0x2c>)
 800306c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	4a06      	ldr	r2, [pc, #24]	; (800308c <vApplicationGetIdleTaskMemory+0x30>)
 8003072:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2280      	movs	r2, #128	; 0x80
 8003078:	601a      	str	r2, [r3, #0]
}
 800307a:	bf00      	nop
 800307c:	3714      	adds	r7, #20
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000030 	.word	0x20000030
 800308c:	2000008c 	.word	0x2000008c

08003090 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4a07      	ldr	r2, [pc, #28]	; (80030bc <vApplicationGetTimerTaskMemory+0x2c>)
 80030a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	4a06      	ldr	r2, [pc, #24]	; (80030c0 <vApplicationGetTimerTaskMemory+0x30>)
 80030a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80030ae:	601a      	str	r2, [r3, #0]
}
 80030b0:	bf00      	nop
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr
 80030bc:	2000028c 	.word	0x2000028c
 80030c0:	200002e8 	.word	0x200002e8

080030c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f103 0208 	add.w	r2, r3, #8
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f04f 32ff 	mov.w	r2, #4294967295
 80030dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f103 0208 	add.w	r2, r3, #8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f103 0208 	add.w	r2, r3, #8
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
 8003126:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	1c5a      	adds	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	601a      	str	r2, [r3, #0]
}
 800315a:	bf00      	nop
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003166:	b480      	push	{r7}
 8003168:	b085      	sub	sp, #20
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317c:	d103      	bne.n	8003186 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	60fb      	str	r3, [r7, #12]
 8003184:	e00c      	b.n	80031a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3308      	adds	r3, #8
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	e002      	b.n	8003194 <vListInsert+0x2e>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	429a      	cmp	r2, r3
 800319e:	d2f6      	bcs.n	800318e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	683a      	ldr	r2, [r7, #0]
 80031ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	601a      	str	r2, [r3, #0]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6892      	ldr	r2, [r2, #8]
 80031ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6852      	ldr	r2, [r2, #4]
 80031f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	429a      	cmp	r2, r3
 8003202:	d103      	bne.n	800320c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	1e5a      	subs	r2, r3, #1
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3714      	adds	r7, #20
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003244:	f383 8811 	msr	BASEPRI, r3
 8003248:	f3bf 8f6f 	isb	sy
 800324c:	f3bf 8f4f 	dsb	sy
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	e7fe      	b.n	8003252 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003254:	f002 f82a 	bl	80052ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003260:	68f9      	ldr	r1, [r7, #12]
 8003262:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003264:	fb01 f303 	mul.w	r3, r1, r3
 8003268:	441a      	add	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003284:	3b01      	subs	r3, #1
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	441a      	add	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	22ff      	movs	r2, #255	; 0xff
 8003298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	22ff      	movs	r2, #255	; 0xff
 80032a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d114      	bne.n	80032d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d01a      	beq.n	80032e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	3310      	adds	r3, #16
 80032b6:	4618      	mov	r0, r3
 80032b8:	f001 f8e2 	bl	8004480 <xTaskRemoveFromEventList>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d012      	beq.n	80032e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80032c2:	4b0d      	ldr	r3, [pc, #52]	; (80032f8 <xQueueGenericReset+0xcc>)
 80032c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	e009      	b.n	80032e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3310      	adds	r3, #16
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff fef3 	bl	80030c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3324      	adds	r3, #36	; 0x24
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7ff feee 	bl	80030c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80032e8:	f002 f80e 	bl	8005308 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80032ec:	2301      	movs	r3, #1
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08e      	sub	sp, #56	; 0x38
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
 8003308:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d109      	bne.n	8003324 <xQueueGenericCreateStatic+0x28>
 8003310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003314:	f383 8811 	msr	BASEPRI, r3
 8003318:	f3bf 8f6f 	isb	sy
 800331c:	f3bf 8f4f 	dsb	sy
 8003320:	62bb      	str	r3, [r7, #40]	; 0x28
 8003322:	e7fe      	b.n	8003322 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <xQueueGenericCreateStatic+0x42>
 800332a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	627b      	str	r3, [r7, #36]	; 0x24
 800333c:	e7fe      	b.n	800333c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d002      	beq.n	800334a <xQueueGenericCreateStatic+0x4e>
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <xQueueGenericCreateStatic+0x52>
 800334a:	2301      	movs	r3, #1
 800334c:	e000      	b.n	8003350 <xQueueGenericCreateStatic+0x54>
 800334e:	2300      	movs	r3, #0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d109      	bne.n	8003368 <xQueueGenericCreateStatic+0x6c>
 8003354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	623b      	str	r3, [r7, #32]
 8003366:	e7fe      	b.n	8003366 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d102      	bne.n	8003374 <xQueueGenericCreateStatic+0x78>
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d101      	bne.n	8003378 <xQueueGenericCreateStatic+0x7c>
 8003374:	2301      	movs	r3, #1
 8003376:	e000      	b.n	800337a <xQueueGenericCreateStatic+0x7e>
 8003378:	2300      	movs	r3, #0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d109      	bne.n	8003392 <xQueueGenericCreateStatic+0x96>
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	61fb      	str	r3, [r7, #28]
 8003390:	e7fe      	b.n	8003390 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003392:	2350      	movs	r3, #80	; 0x50
 8003394:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b50      	cmp	r3, #80	; 0x50
 800339a:	d009      	beq.n	80033b0 <xQueueGenericCreateStatic+0xb4>
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	61bb      	str	r3, [r7, #24]
 80033ae:	e7fe      	b.n	80033ae <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80033b0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00d      	beq.n	80033d8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80033bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80033c4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80033c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f805 	bl	80033e2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80033da:	4618      	mov	r0, r3
 80033dc:	3730      	adds	r7, #48	; 0x30
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d103      	bne.n	80033fe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e002      	b.n	8003404 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003410:	2101      	movs	r1, #1
 8003412:	69b8      	ldr	r0, [r7, #24]
 8003414:	f7ff ff0a 	bl	800322c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	78fa      	ldrb	r2, [r7, #3]
 800341c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b08e      	sub	sp, #56	; 0x38
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003436:	2300      	movs	r3, #0
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800343e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003440:	2b00      	cmp	r3, #0
 8003442:	d109      	bne.n	8003458 <xQueueGenericSend+0x30>
 8003444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003448:	f383 8811 	msr	BASEPRI, r3
 800344c:	f3bf 8f6f 	isb	sy
 8003450:	f3bf 8f4f 	dsb	sy
 8003454:	62bb      	str	r3, [r7, #40]	; 0x28
 8003456:	e7fe      	b.n	8003456 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d103      	bne.n	8003466 <xQueueGenericSend+0x3e>
 800345e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <xQueueGenericSend+0x42>
 8003466:	2301      	movs	r3, #1
 8003468:	e000      	b.n	800346c <xQueueGenericSend+0x44>
 800346a:	2300      	movs	r3, #0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <xQueueGenericSend+0x5c>
 8003470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
 8003482:	e7fe      	b.n	8003482 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d103      	bne.n	8003492 <xQueueGenericSend+0x6a>
 800348a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <xQueueGenericSend+0x6e>
 8003492:	2301      	movs	r3, #1
 8003494:	e000      	b.n	8003498 <xQueueGenericSend+0x70>
 8003496:	2300      	movs	r3, #0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d109      	bne.n	80034b0 <xQueueGenericSend+0x88>
 800349c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a0:	f383 8811 	msr	BASEPRI, r3
 80034a4:	f3bf 8f6f 	isb	sy
 80034a8:	f3bf 8f4f 	dsb	sy
 80034ac:	623b      	str	r3, [r7, #32]
 80034ae:	e7fe      	b.n	80034ae <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034b0:	f001 f9ac 	bl	800480c <xTaskGetSchedulerState>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d102      	bne.n	80034c0 <xQueueGenericSend+0x98>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d101      	bne.n	80034c4 <xQueueGenericSend+0x9c>
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <xQueueGenericSend+0x9e>
 80034c4:	2300      	movs	r3, #0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <xQueueGenericSend+0xb6>
 80034ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ce:	f383 8811 	msr	BASEPRI, r3
 80034d2:	f3bf 8f6f 	isb	sy
 80034d6:	f3bf 8f4f 	dsb	sy
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e7fe      	b.n	80034dc <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80034de:	f001 fee5 	bl	80052ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d302      	bcc.n	80034f4 <xQueueGenericSend+0xcc>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d129      	bne.n	8003548 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034f4:	683a      	ldr	r2, [r7, #0]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80034fa:	f000 f9ff 	bl	80038fc <prvCopyDataToQueue>
 80034fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	2b00      	cmp	r3, #0
 8003506:	d010      	beq.n	800352a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	3324      	adds	r3, #36	; 0x24
 800350c:	4618      	mov	r0, r3
 800350e:	f000 ffb7 	bl	8004480 <xTaskRemoveFromEventList>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d013      	beq.n	8003540 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003518:	4b3f      	ldr	r3, [pc, #252]	; (8003618 <xQueueGenericSend+0x1f0>)
 800351a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	f3bf 8f6f 	isb	sy
 8003528:	e00a      	b.n	8003540 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003530:	4b39      	ldr	r3, [pc, #228]	; (8003618 <xQueueGenericSend+0x1f0>)
 8003532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	f3bf 8f4f 	dsb	sy
 800353c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003540:	f001 fee2 	bl	8005308 <vPortExitCritical>
				return pdPASS;
 8003544:	2301      	movs	r3, #1
 8003546:	e063      	b.n	8003610 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800354e:	f001 fedb 	bl	8005308 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003552:	2300      	movs	r3, #0
 8003554:	e05c      	b.n	8003610 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003558:	2b00      	cmp	r3, #0
 800355a:	d106      	bne.n	800356a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800355c:	f107 0314 	add.w	r3, r7, #20
 8003560:	4618      	mov	r0, r3
 8003562:	f000 ffef 	bl	8004544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003566:	2301      	movs	r3, #1
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800356a:	f001 fecd 	bl	8005308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800356e:	f000 fd6b 	bl	8004048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003572:	f001 fe9b 	bl	80052ac <vPortEnterCritical>
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800357c:	b25b      	sxtb	r3, r3
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003582:	d103      	bne.n	800358c <xQueueGenericSend+0x164>
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003592:	b25b      	sxtb	r3, r3
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d103      	bne.n	80035a2 <xQueueGenericSend+0x17a>
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035a2:	f001 feb1 	bl	8005308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035a6:	1d3a      	adds	r2, r7, #4
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 ffde 	bl	8004570 <xTaskCheckForTimeOut>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d124      	bne.n	8003604 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80035ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035bc:	f000 fa96 	bl	8003aec <prvIsQueueFull>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d018      	beq.n	80035f8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	3310      	adds	r3, #16
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 ff08 	bl	80043e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80035d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035d6:	f000 fa21 	bl	8003a1c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80035da:	f000 fd43 	bl	8004064 <xTaskResumeAll>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f47f af7c 	bne.w	80034de <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80035e6:	4b0c      	ldr	r3, [pc, #48]	; (8003618 <xQueueGenericSend+0x1f0>)
 80035e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f3bf 8f4f 	dsb	sy
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	e772      	b.n	80034de <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80035f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80035fa:	f000 fa0f 	bl	8003a1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80035fe:	f000 fd31 	bl	8004064 <xTaskResumeAll>
 8003602:	e76c      	b.n	80034de <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003604:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003606:	f000 fa09 	bl	8003a1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800360a:	f000 fd2b 	bl	8004064 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800360e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003610:	4618      	mov	r0, r3
 8003612:	3738      	adds	r7, #56	; 0x38
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	e000ed04 	.word	0xe000ed04

0800361c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b08e      	sub	sp, #56	; 0x38
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
 8003628:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003630:	2b00      	cmp	r3, #0
 8003632:	d109      	bne.n	8003648 <xQueueGenericSendFromISR+0x2c>
 8003634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
 8003646:	e7fe      	b.n	8003646 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <xQueueGenericSendFromISR+0x3a>
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <xQueueGenericSendFromISR+0x3e>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <xQueueGenericSendFromISR+0x40>
 800365a:	2300      	movs	r3, #0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <xQueueGenericSendFromISR+0x58>
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	623b      	str	r3, [r7, #32]
 8003672:	e7fe      	b.n	8003672 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d103      	bne.n	8003682 <xQueueGenericSendFromISR+0x66>
 800367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367e:	2b01      	cmp	r3, #1
 8003680:	d101      	bne.n	8003686 <xQueueGenericSendFromISR+0x6a>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <xQueueGenericSendFromISR+0x6c>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d109      	bne.n	80036a0 <xQueueGenericSendFromISR+0x84>
 800368c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	61fb      	str	r3, [r7, #28]
 800369e:	e7fe      	b.n	800369e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036a0:	f001 fee0 	bl	8005464 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80036a4:	f3ef 8211 	mrs	r2, BASEPRI
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	61ba      	str	r2, [r7, #24]
 80036ba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80036bc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80036be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d302      	bcc.n	80036d2 <xQueueGenericSendFromISR+0xb6>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d12c      	bne.n	800372c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80036d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036dc:	683a      	ldr	r2, [r7, #0]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036e2:	f000 f90b 	bl	80038fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80036e6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80036ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ee:	d112      	bne.n	8003716 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d016      	beq.n	8003726 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	3324      	adds	r3, #36	; 0x24
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 febf 	bl	8004480 <xTaskRemoveFromEventList>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00e      	beq.n	8003726 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d00b      	beq.n	8003726 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e007      	b.n	8003726 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003716:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800371a:	3301      	adds	r3, #1
 800371c:	b2db      	uxtb	r3, r3
 800371e:	b25a      	sxtb	r2, r3
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003726:	2301      	movs	r3, #1
 8003728:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800372a:	e001      	b.n	8003730 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800372c:	2300      	movs	r3, #0
 800372e:	637b      	str	r3, [r7, #52]	; 0x34
 8003730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003732:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800373a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800373c:	4618      	mov	r0, r3
 800373e:	3738      	adds	r7, #56	; 0x38
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b08c      	sub	sp, #48	; 0x30
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003750:	2300      	movs	r3, #0
 8003752:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <xQueueReceive+0x2e>
	__asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	623b      	str	r3, [r7, #32]
 8003770:	e7fe      	b.n	8003770 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d103      	bne.n	8003780 <xQueueReceive+0x3c>
 8003778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <xQueueReceive+0x40>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <xQueueReceive+0x42>
 8003784:	2300      	movs	r3, #0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d109      	bne.n	800379e <xQueueReceive+0x5a>
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	61fb      	str	r3, [r7, #28]
 800379c:	e7fe      	b.n	800379c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800379e:	f001 f835 	bl	800480c <xTaskGetSchedulerState>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d102      	bne.n	80037ae <xQueueReceive+0x6a>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <xQueueReceive+0x6e>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <xQueueReceive+0x70>
 80037b2:	2300      	movs	r3, #0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d109      	bne.n	80037cc <xQueueReceive+0x88>
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e7fe      	b.n	80037ca <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037cc:	f001 fd6e 	bl	80052ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d01f      	beq.n	800381c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80037e0:	f000 f8f6 	bl	80039d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e6:	1e5a      	subs	r2, r3, #1
 80037e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00f      	beq.n	8003814 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f6:	3310      	adds	r3, #16
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fe41 	bl	8004480 <xTaskRemoveFromEventList>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d007      	beq.n	8003814 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003804:	4b3c      	ldr	r3, [pc, #240]	; (80038f8 <xQueueReceive+0x1b4>)
 8003806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003814:	f001 fd78 	bl	8005308 <vPortExitCritical>
				return pdPASS;
 8003818:	2301      	movs	r3, #1
 800381a:	e069      	b.n	80038f0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003822:	f001 fd71 	bl	8005308 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003826:	2300      	movs	r3, #0
 8003828:	e062      	b.n	80038f0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800382a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382c:	2b00      	cmp	r3, #0
 800382e:	d106      	bne.n	800383e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003830:	f107 0310 	add.w	r3, r7, #16
 8003834:	4618      	mov	r0, r3
 8003836:	f000 fe85 	bl	8004544 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800383a:	2301      	movs	r3, #1
 800383c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800383e:	f001 fd63 	bl	8005308 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003842:	f000 fc01 	bl	8004048 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003846:	f001 fd31 	bl	80052ac <vPortEnterCritical>
 800384a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800384c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003850:	b25b      	sxtb	r3, r3
 8003852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003856:	d103      	bne.n	8003860 <xQueueReceive+0x11c>
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003862:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003866:	b25b      	sxtb	r3, r3
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d103      	bne.n	8003876 <xQueueReceive+0x132>
 800386e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003876:	f001 fd47 	bl	8005308 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800387a:	1d3a      	adds	r2, r7, #4
 800387c:	f107 0310 	add.w	r3, r7, #16
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f000 fe74 	bl	8004570 <xTaskCheckForTimeOut>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d123      	bne.n	80038d6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800388e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003890:	f000 f916 	bl	8003ac0 <prvIsQueueEmpty>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d017      	beq.n	80038ca <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800389a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389c:	3324      	adds	r3, #36	; 0x24
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4611      	mov	r1, r2
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fd9e 	bl	80043e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80038a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038aa:	f000 f8b7 	bl	8003a1c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80038ae:	f000 fbd9 	bl	8004064 <xTaskResumeAll>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d189      	bne.n	80037cc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80038b8:	4b0f      	ldr	r3, [pc, #60]	; (80038f8 <xQueueReceive+0x1b4>)
 80038ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038be:	601a      	str	r2, [r3, #0]
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	e780      	b.n	80037cc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80038ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038cc:	f000 f8a6 	bl	8003a1c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038d0:	f000 fbc8 	bl	8004064 <xTaskResumeAll>
 80038d4:	e77a      	b.n	80037cc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80038d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038d8:	f000 f8a0 	bl	8003a1c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038dc:	f000 fbc2 	bl	8004064 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80038e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80038e2:	f000 f8ed 	bl	8003ac0 <prvIsQueueEmpty>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f43f af6f 	beq.w	80037cc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80038ee:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3730      	adds	r7, #48	; 0x30
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003908:	2300      	movs	r3, #0
 800390a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10d      	bne.n	8003936 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d14d      	bne.n	80039be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	4618      	mov	r0, r3
 8003928:	f000 ff8e 	bl	8004848 <xTaskPriorityDisinherit>
 800392c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	609a      	str	r2, [r3, #8]
 8003934:	e043      	b.n	80039be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d119      	bne.n	8003970 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6858      	ldr	r0, [r3, #4]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	461a      	mov	r2, r3
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	f001 ffc4 	bl	80058d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	441a      	add	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	429a      	cmp	r2, r3
 8003964:	d32b      	bcc.n	80039be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	e026      	b.n	80039be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	68d8      	ldr	r0, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	461a      	mov	r2, r3
 800397a:	68b9      	ldr	r1, [r7, #8]
 800397c:	f001 ffaa 	bl	80058d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	68da      	ldr	r2, [r3, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	425b      	negs	r3, r3
 800398a:	441a      	add	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	68da      	ldr	r2, [r3, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d207      	bcs.n	80039ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a4:	425b      	negs	r3, r3
 80039a6:	441a      	add	r2, r3
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d105      	bne.n	80039be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d002      	beq.n	80039be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80039c6:	697b      	ldr	r3, [r7, #20]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d018      	beq.n	8003a14 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68da      	ldr	r2, [r3, #12]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ea:	441a      	add	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68da      	ldr	r2, [r3, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d303      	bcc.n	8003a04 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	68d9      	ldr	r1, [r3, #12]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	6838      	ldr	r0, [r7, #0]
 8003a10:	f001 ff60 	bl	80058d4 <memcpy>
	}
}
 8003a14:	bf00      	nop
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003a24:	f001 fc42 	bl	80052ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a2e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a30:	e011      	b.n	8003a56 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3324      	adds	r3, #36	; 0x24
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fd1e 	bl	8004480 <xTaskRemoveFromEventList>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003a4a:	f000 fe01 	bl	8004650 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	dce9      	bgt.n	8003a32 <prvUnlockQueue+0x16>
 8003a5e:	e000      	b.n	8003a62 <prvUnlockQueue+0x46>
					break;
 8003a60:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	22ff      	movs	r2, #255	; 0xff
 8003a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003a6a:	f001 fc4d 	bl	8005308 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003a6e:	f001 fc1d 	bl	80052ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a78:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a7a:	e011      	b.n	8003aa0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d012      	beq.n	8003aaa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3310      	adds	r3, #16
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 fcf9 	bl	8004480 <xTaskRemoveFromEventList>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003a94:	f000 fddc 	bl	8004650 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003a98:	7bbb      	ldrb	r3, [r7, #14]
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003aa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	dce9      	bgt.n	8003a7c <prvUnlockQueue+0x60>
 8003aa8:	e000      	b.n	8003aac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003aaa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	22ff      	movs	r2, #255	; 0xff
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003ab4:	f001 fc28 	bl	8005308 <vPortExitCritical>
}
 8003ab8:	bf00      	nop
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ac8:	f001 fbf0 	bl	80052ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e001      	b.n	8003ade <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ade:	f001 fc13 	bl	8005308 <vPortExitCritical>

	return xReturn;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003af4:	f001 fbda 	bl	80052ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d102      	bne.n	8003b0a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003b04:	2301      	movs	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e001      	b.n	8003b0e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003b0e:	f001 fbfb 	bl	8005308 <vPortExitCritical>

	return xReturn;
 8003b12:	68fb      	ldr	r3, [r7, #12]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
 8003b2a:	e014      	b.n	8003b56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003b2c:	4a0e      	ldr	r2, [pc, #56]	; (8003b68 <vQueueAddToRegistry+0x4c>)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10b      	bne.n	8003b50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003b38:	490b      	ldr	r1, [pc, #44]	; (8003b68 <vQueueAddToRegistry+0x4c>)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003b42:	4a09      	ldr	r2, [pc, #36]	; (8003b68 <vQueueAddToRegistry+0x4c>)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	4413      	add	r3, r2
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003b4e:	e005      	b.n	8003b5c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	3301      	adds	r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b07      	cmp	r3, #7
 8003b5a:	d9e7      	bls.n	8003b2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	20004b54 	.word	0x20004b54

08003b6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003b7c:	f001 fb96 	bl	80052ac <vPortEnterCritical>
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003b86:	b25b      	sxtb	r3, r3
 8003b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8c:	d103      	bne.n	8003b96 <vQueueWaitForMessageRestricted+0x2a>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b9c:	b25b      	sxtb	r3, r3
 8003b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba2:	d103      	bne.n	8003bac <vQueueWaitForMessageRestricted+0x40>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003bac:	f001 fbac 	bl	8005308 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d106      	bne.n	8003bc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	3324      	adds	r3, #36	; 0x24
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	68b9      	ldr	r1, [r7, #8]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 fc33 	bl	800442c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003bc6:	6978      	ldr	r0, [r7, #20]
 8003bc8:	f7ff ff28 	bl	8003a1c <prvUnlockQueue>
	}
 8003bcc:	bf00      	nop
 8003bce:	3718      	adds	r7, #24
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08e      	sub	sp, #56	; 0x38
 8003bd8:	af04      	add	r7, sp, #16
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <xTaskCreateStatic+0x28>
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	623b      	str	r3, [r7, #32]
 8003bfa:	e7fe      	b.n	8003bfa <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <xTaskCreateStatic+0x42>
 8003c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	61fb      	str	r3, [r7, #28]
 8003c14:	e7fe      	b.n	8003c14 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003c16:	235c      	movs	r3, #92	; 0x5c
 8003c18:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b5c      	cmp	r3, #92	; 0x5c
 8003c1e:	d009      	beq.n	8003c34 <xTaskCreateStatic+0x60>
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	61bb      	str	r3, [r7, #24]
 8003c32:	e7fe      	b.n	8003c32 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003c34:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01e      	beq.n	8003c7a <xTaskCreateStatic+0xa6>
 8003c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d01b      	beq.n	8003c7a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003c54:	2300      	movs	r3, #0
 8003c56:	9303      	str	r3, [sp, #12]
 8003c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5a:	9302      	str	r3, [sp, #8]
 8003c5c:	f107 0314 	add.w	r3, r7, #20
 8003c60:	9301      	str	r3, [sp, #4]
 8003c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 f850 	bl	8003d12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c74:	f000 f8e0 	bl	8003e38 <prvAddNewTaskToReadyList>
 8003c78:	e001      	b.n	8003c7e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003c7e:	697b      	ldr	r3, [r7, #20]
	}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3728      	adds	r7, #40	; 0x28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08c      	sub	sp, #48	; 0x30
 8003c8c:	af04      	add	r7, sp, #16
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	4613      	mov	r3, r2
 8003c96:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003c98:	88fb      	ldrh	r3, [r7, #6]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f001 fc1f 	bl	80054e0 <pvPortMalloc>
 8003ca2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00e      	beq.n	8003cc8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003caa:	205c      	movs	r0, #92	; 0x5c
 8003cac:	f001 fc18 	bl	80054e0 <pvPortMalloc>
 8003cb0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	697a      	ldr	r2, [r7, #20]
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
 8003cbe:	e005      	b.n	8003ccc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003cc0:	6978      	ldr	r0, [r7, #20]
 8003cc2:	f001 fccf 	bl	8005664 <vPortFree>
 8003cc6:	e001      	b.n	8003ccc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d017      	beq.n	8003d02 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	9303      	str	r3, [sp, #12]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	9302      	str	r3, [sp, #8]
 8003ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce6:	9301      	str	r3, [sp, #4]
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	9300      	str	r3, [sp, #0]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f000 f80e 	bl	8003d12 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003cf6:	69f8      	ldr	r0, [r7, #28]
 8003cf8:	f000 f89e 	bl	8003e38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	61bb      	str	r3, [r7, #24]
 8003d00:	e002      	b.n	8003d08 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295
 8003d06:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003d08:	69bb      	ldr	r3, [r7, #24]
	}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b088      	sub	sp, #32
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
 8003d1e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	461a      	mov	r2, r3
 8003d2a:	21a5      	movs	r1, #165	; 0xa5
 8003d2c:	f001 fddd 	bl	80058ea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	f023 0307 	bic.w	r3, r3, #7
 8003d48:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d009      	beq.n	8003d68 <prvInitialiseNewTask+0x56>
 8003d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	e7fe      	b.n	8003d66 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01f      	beq.n	8003dae <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d6e:	2300      	movs	r3, #0
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	e012      	b.n	8003d9a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	7819      	ldrb	r1, [r3, #0]
 8003d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	4413      	add	r3, r2
 8003d82:	3334      	adds	r3, #52	; 0x34
 8003d84:	460a      	mov	r2, r1
 8003d86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	4413      	add	r3, r2
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d006      	beq.n	8003da2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	3301      	adds	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b0f      	cmp	r3, #15
 8003d9e:	d9e9      	bls.n	8003d74 <prvInitialiseNewTask+0x62>
 8003da0:	e000      	b.n	8003da4 <prvInitialiseNewTask+0x92>
			{
				break;
 8003da2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dac:	e003      	b.n	8003db6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	2b37      	cmp	r3, #55	; 0x37
 8003dba:	d901      	bls.n	8003dc0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003dbc:	2337      	movs	r3, #55	; 0x37
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dce:	2200      	movs	r2, #0
 8003dd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff f994 	bl	8003104 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	3318      	adds	r3, #24
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff f98f 	bl	8003104 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfe:	2200      	movs	r2, #0
 8003e00:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	68f9      	ldr	r1, [r7, #12]
 8003e16:	69b8      	ldr	r0, [r7, #24]
 8003e18:	f001 f922 	bl	8005060 <pxPortInitialiseStack>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e2e:	bf00      	nop
 8003e30:	3720      	adds	r7, #32
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003e40:	f001 fa34 	bl	80052ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003e44:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <prvAddNewTaskToReadyList+0xc4>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	4a2c      	ldr	r2, [pc, #176]	; (8003efc <prvAddNewTaskToReadyList+0xc4>)
 8003e4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003e4e:	4b2c      	ldr	r3, [pc, #176]	; (8003f00 <prvAddNewTaskToReadyList+0xc8>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d109      	bne.n	8003e6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003e56:	4a2a      	ldr	r2, [pc, #168]	; (8003f00 <prvAddNewTaskToReadyList+0xc8>)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003e5c:	4b27      	ldr	r3, [pc, #156]	; (8003efc <prvAddNewTaskToReadyList+0xc4>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d110      	bne.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003e64:	f000 fc18 	bl	8004698 <prvInitialiseTaskLists>
 8003e68:	e00d      	b.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003e6a:	4b26      	ldr	r3, [pc, #152]	; (8003f04 <prvAddNewTaskToReadyList+0xcc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d109      	bne.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003e72:	4b23      	ldr	r3, [pc, #140]	; (8003f00 <prvAddNewTaskToReadyList+0xc8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d802      	bhi.n	8003e86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003e80:	4a1f      	ldr	r2, [pc, #124]	; (8003f00 <prvAddNewTaskToReadyList+0xc8>)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003e86:	4b20      	ldr	r3, [pc, #128]	; (8003f08 <prvAddNewTaskToReadyList+0xd0>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3301      	adds	r3, #1
 8003e8c:	4a1e      	ldr	r2, [pc, #120]	; (8003f08 <prvAddNewTaskToReadyList+0xd0>)
 8003e8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003e90:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <prvAddNewTaskToReadyList+0xd0>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e9c:	4b1b      	ldr	r3, [pc, #108]	; (8003f0c <prvAddNewTaskToReadyList+0xd4>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d903      	bls.n	8003eac <prvAddNewTaskToReadyList+0x74>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	4a18      	ldr	r2, [pc, #96]	; (8003f0c <prvAddNewTaskToReadyList+0xd4>)
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <prvAddNewTaskToReadyList+0xd8>)
 8003eba:	441a      	add	r2, r3
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f7ff f92b 	bl	800311e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003ec8:	f001 fa1e 	bl	8005308 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003ecc:	4b0d      	ldr	r3, [pc, #52]	; (8003f04 <prvAddNewTaskToReadyList+0xcc>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00e      	beq.n	8003ef2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <prvAddNewTaskToReadyList+0xc8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d207      	bcs.n	8003ef2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003ee2:	4b0c      	ldr	r3, [pc, #48]	; (8003f14 <prvAddNewTaskToReadyList+0xdc>)
 8003ee4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee8:	601a      	str	r2, [r3, #0]
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	20000bbc 	.word	0x20000bbc
 8003f00:	200006e8 	.word	0x200006e8
 8003f04:	20000bc8 	.word	0x20000bc8
 8003f08:	20000bd8 	.word	0x20000bd8
 8003f0c:	20000bc4 	.word	0x20000bc4
 8003f10:	200006ec 	.word	0x200006ec
 8003f14:	e000ed04 	.word	0xe000ed04

08003f18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003f2a:	4b13      	ldr	r3, [pc, #76]	; (8003f78 <vTaskDelay+0x60>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <vTaskDelay+0x2e>
 8003f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f36:	f383 8811 	msr	BASEPRI, r3
 8003f3a:	f3bf 8f6f 	isb	sy
 8003f3e:	f3bf 8f4f 	dsb	sy
 8003f42:	60bb      	str	r3, [r7, #8]
 8003f44:	e7fe      	b.n	8003f44 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003f46:	f000 f87f 	bl	8004048 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 fce7 	bl	8004920 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003f52:	f000 f887 	bl	8004064 <xTaskResumeAll>
 8003f56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d107      	bne.n	8003f6e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <vTaskDelay+0x64>)
 8003f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000be4 	.word	0x20000be4
 8003f7c:	e000ed04 	.word	0xe000ed04

08003f80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	; 0x28
 8003f84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003f8e:	463a      	mov	r2, r7
 8003f90:	1d39      	adds	r1, r7, #4
 8003f92:	f107 0308 	add.w	r3, r7, #8
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff f860 	bl	800305c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003f9c:	6839      	ldr	r1, [r7, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	9202      	str	r2, [sp, #8]
 8003fa4:	9301      	str	r3, [sp, #4]
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	2300      	movs	r3, #0
 8003fac:	460a      	mov	r2, r1
 8003fae:	4920      	ldr	r1, [pc, #128]	; (8004030 <vTaskStartScheduler+0xb0>)
 8003fb0:	4820      	ldr	r0, [pc, #128]	; (8004034 <vTaskStartScheduler+0xb4>)
 8003fb2:	f7ff fe0f 	bl	8003bd4 <xTaskCreateStatic>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b1f      	ldr	r3, [pc, #124]	; (8004038 <vTaskStartScheduler+0xb8>)
 8003fba:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	; (8004038 <vTaskStartScheduler+0xb8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e001      	b.n	8003fce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d102      	bne.n	8003fda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003fd4:	f000 fcfe 	bl	80049d4 <xTimerCreateTimerTask>
 8003fd8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d115      	bne.n	800400c <vTaskStartScheduler+0x8c>
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003ff2:	4b12      	ldr	r3, [pc, #72]	; (800403c <vTaskStartScheduler+0xbc>)
 8003ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ff8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <vTaskStartScheduler+0xc0>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <vTaskStartScheduler+0xc4>)
 8004002:	2200      	movs	r2, #0
 8004004:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004006:	f001 f8b3 	bl	8005170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800400a:	e00d      	b.n	8004028 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d109      	bne.n	8004028 <vTaskStartScheduler+0xa8>
 8004014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	60fb      	str	r3, [r7, #12]
 8004026:	e7fe      	b.n	8004026 <vTaskStartScheduler+0xa6>
}
 8004028:	bf00      	nop
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	08005944 	.word	0x08005944
 8004034:	08004669 	.word	0x08004669
 8004038:	20000be0 	.word	0x20000be0
 800403c:	20000bdc 	.word	0x20000bdc
 8004040:	20000bc8 	.word	0x20000bc8
 8004044:	20000bc0 	.word	0x20000bc0

08004048 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <vTaskSuspendAll+0x18>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3301      	adds	r3, #1
 8004052:	4a03      	ldr	r2, [pc, #12]	; (8004060 <vTaskSuspendAll+0x18>)
 8004054:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004056:	bf00      	nop
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	20000be4 	.word	0x20000be4

08004064 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004072:	4b41      	ldr	r3, [pc, #260]	; (8004178 <xTaskResumeAll+0x114>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <xTaskResumeAll+0x2a>
 800407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407e:	f383 8811 	msr	BASEPRI, r3
 8004082:	f3bf 8f6f 	isb	sy
 8004086:	f3bf 8f4f 	dsb	sy
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	e7fe      	b.n	800408c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800408e:	f001 f90d 	bl	80052ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004092:	4b39      	ldr	r3, [pc, #228]	; (8004178 <xTaskResumeAll+0x114>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3b01      	subs	r3, #1
 8004098:	4a37      	ldr	r2, [pc, #220]	; (8004178 <xTaskResumeAll+0x114>)
 800409a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800409c:	4b36      	ldr	r3, [pc, #216]	; (8004178 <xTaskResumeAll+0x114>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d162      	bne.n	800416a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80040a4:	4b35      	ldr	r3, [pc, #212]	; (800417c <xTaskResumeAll+0x118>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05e      	beq.n	800416a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80040ac:	e02f      	b.n	800410e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040ae:	4b34      	ldr	r3, [pc, #208]	; (8004180 <xTaskResumeAll+0x11c>)
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	3318      	adds	r3, #24
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff f88c 	bl	80031d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	3304      	adds	r3, #4
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff f887 	bl	80031d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <xTaskResumeAll+0x120>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d903      	bls.n	80040de <xTaskResumeAll+0x7a>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	4a2a      	ldr	r2, [pc, #168]	; (8004184 <xTaskResumeAll+0x120>)
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e2:	4613      	mov	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	4a27      	ldr	r2, [pc, #156]	; (8004188 <xTaskResumeAll+0x124>)
 80040ec:	441a      	add	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f7ff f812 	bl	800311e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040fe:	4b23      	ldr	r3, [pc, #140]	; (800418c <xTaskResumeAll+0x128>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	d302      	bcc.n	800410e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004108:	4b21      	ldr	r3, [pc, #132]	; (8004190 <xTaskResumeAll+0x12c>)
 800410a:	2201      	movs	r2, #1
 800410c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800410e:	4b1c      	ldr	r3, [pc, #112]	; (8004180 <xTaskResumeAll+0x11c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1cb      	bne.n	80040ae <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800411c:	f000 fb56 	bl	80047cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <xTaskResumeAll+0x130>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d010      	beq.n	800414e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800412c:	f000 f846 	bl	80041bc <xTaskIncrementTick>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004136:	4b16      	ldr	r3, [pc, #88]	; (8004190 <xTaskResumeAll+0x12c>)
 8004138:	2201      	movs	r2, #1
 800413a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3b01      	subs	r3, #1
 8004140:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1f1      	bne.n	800412c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8004148:	4b12      	ldr	r3, [pc, #72]	; (8004194 <xTaskResumeAll+0x130>)
 800414a:	2200      	movs	r2, #0
 800414c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800414e:	4b10      	ldr	r3, [pc, #64]	; (8004190 <xTaskResumeAll+0x12c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d009      	beq.n	800416a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004156:	2301      	movs	r3, #1
 8004158:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800415a:	4b0f      	ldr	r3, [pc, #60]	; (8004198 <xTaskResumeAll+0x134>)
 800415c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004160:	601a      	str	r2, [r3, #0]
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800416a:	f001 f8cd 	bl	8005308 <vPortExitCritical>

	return xAlreadyYielded;
 800416e:	68bb      	ldr	r3, [r7, #8]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000be4 	.word	0x20000be4
 800417c:	20000bbc 	.word	0x20000bbc
 8004180:	20000b7c 	.word	0x20000b7c
 8004184:	20000bc4 	.word	0x20000bc4
 8004188:	200006ec 	.word	0x200006ec
 800418c:	200006e8 	.word	0x200006e8
 8004190:	20000bd0 	.word	0x20000bd0
 8004194:	20000bcc 	.word	0x20000bcc
 8004198:	e000ed04 	.word	0xe000ed04

0800419c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <xTaskGetTickCount+0x1c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80041a8:	687b      	ldr	r3, [r7, #4]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	20000bc0 	.word	0x20000bc0

080041bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80041c2:	2300      	movs	r3, #0
 80041c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80041c6:	4b4e      	ldr	r3, [pc, #312]	; (8004300 <xTaskIncrementTick+0x144>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f040 8088 	bne.w	80042e0 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80041d0:	4b4c      	ldr	r3, [pc, #304]	; (8004304 <xTaskIncrementTick+0x148>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3301      	adds	r3, #1
 80041d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80041d8:	4a4a      	ldr	r2, [pc, #296]	; (8004304 <xTaskIncrementTick+0x148>)
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d11f      	bne.n	8004224 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80041e4:	4b48      	ldr	r3, [pc, #288]	; (8004308 <xTaskIncrementTick+0x14c>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d009      	beq.n	8004202 <xTaskIncrementTick+0x46>
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	603b      	str	r3, [r7, #0]
 8004200:	e7fe      	b.n	8004200 <xTaskIncrementTick+0x44>
 8004202:	4b41      	ldr	r3, [pc, #260]	; (8004308 <xTaskIncrementTick+0x14c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	4b40      	ldr	r3, [pc, #256]	; (800430c <xTaskIncrementTick+0x150>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3e      	ldr	r2, [pc, #248]	; (8004308 <xTaskIncrementTick+0x14c>)
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4a3e      	ldr	r2, [pc, #248]	; (800430c <xTaskIncrementTick+0x150>)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6013      	str	r3, [r2, #0]
 8004216:	4b3e      	ldr	r3, [pc, #248]	; (8004310 <xTaskIncrementTick+0x154>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3301      	adds	r3, #1
 800421c:	4a3c      	ldr	r2, [pc, #240]	; (8004310 <xTaskIncrementTick+0x154>)
 800421e:	6013      	str	r3, [r2, #0]
 8004220:	f000 fad4 	bl	80047cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004224:	4b3b      	ldr	r3, [pc, #236]	; (8004314 <xTaskIncrementTick+0x158>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	693a      	ldr	r2, [r7, #16]
 800422a:	429a      	cmp	r2, r3
 800422c:	d349      	bcc.n	80042c2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800422e:	4b36      	ldr	r3, [pc, #216]	; (8004308 <xTaskIncrementTick+0x14c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d104      	bne.n	8004242 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004238:	4b36      	ldr	r3, [pc, #216]	; (8004314 <xTaskIncrementTick+0x158>)
 800423a:	f04f 32ff 	mov.w	r2, #4294967295
 800423e:	601a      	str	r2, [r3, #0]
					break;
 8004240:	e03f      	b.n	80042c2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004242:	4b31      	ldr	r3, [pc, #196]	; (8004308 <xTaskIncrementTick+0x14c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	429a      	cmp	r2, r3
 8004258:	d203      	bcs.n	8004262 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800425a:	4a2e      	ldr	r2, [pc, #184]	; (8004314 <xTaskIncrementTick+0x158>)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004260:	e02f      	b.n	80042c2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3304      	adds	r3, #4
 8004266:	4618      	mov	r0, r3
 8004268:	f7fe ffb6 	bl	80031d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	3318      	adds	r3, #24
 8004278:	4618      	mov	r0, r3
 800427a:	f7fe ffad 	bl	80031d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004282:	4b25      	ldr	r3, [pc, #148]	; (8004318 <xTaskIncrementTick+0x15c>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d903      	bls.n	8004292 <xTaskIncrementTick+0xd6>
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	4a22      	ldr	r2, [pc, #136]	; (8004318 <xTaskIncrementTick+0x15c>)
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	4a1f      	ldr	r2, [pc, #124]	; (800431c <xTaskIncrementTick+0x160>)
 80042a0:	441a      	add	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f7fe ff38 	bl	800311e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b2:	4b1b      	ldr	r3, [pc, #108]	; (8004320 <xTaskIncrementTick+0x164>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d3b8      	bcc.n	800422e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80042bc:	2301      	movs	r3, #1
 80042be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80042c0:	e7b5      	b.n	800422e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80042c2:	4b17      	ldr	r3, [pc, #92]	; (8004320 <xTaskIncrementTick+0x164>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042c8:	4914      	ldr	r1, [pc, #80]	; (800431c <xTaskIncrementTick+0x160>)
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	440b      	add	r3, r1
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d907      	bls.n	80042ea <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80042da:	2301      	movs	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	e004      	b.n	80042ea <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80042e0:	4b10      	ldr	r3, [pc, #64]	; (8004324 <xTaskIncrementTick+0x168>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3301      	adds	r3, #1
 80042e6:	4a0f      	ldr	r2, [pc, #60]	; (8004324 <xTaskIncrementTick+0x168>)
 80042e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80042ea:	4b0f      	ldr	r3, [pc, #60]	; (8004328 <xTaskIncrementTick+0x16c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80042f2:	2301      	movs	r3, #1
 80042f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80042f6:	697b      	ldr	r3, [r7, #20]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3718      	adds	r7, #24
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	20000be4 	.word	0x20000be4
 8004304:	20000bc0 	.word	0x20000bc0
 8004308:	20000b74 	.word	0x20000b74
 800430c:	20000b78 	.word	0x20000b78
 8004310:	20000bd4 	.word	0x20000bd4
 8004314:	20000bdc 	.word	0x20000bdc
 8004318:	20000bc4 	.word	0x20000bc4
 800431c:	200006ec 	.word	0x200006ec
 8004320:	200006e8 	.word	0x200006e8
 8004324:	20000bcc 	.word	0x20000bcc
 8004328:	20000bd0 	.word	0x20000bd0

0800432c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004332:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <vTaskSwitchContext+0xa4>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800433a:	4b26      	ldr	r3, [pc, #152]	; (80043d4 <vTaskSwitchContext+0xa8>)
 800433c:	2201      	movs	r2, #1
 800433e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004340:	e040      	b.n	80043c4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <vTaskSwitchContext+0xa8>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004348:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <vTaskSwitchContext+0xac>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	60fb      	str	r3, [r7, #12]
 800434e:	e00f      	b.n	8004370 <vTaskSwitchContext+0x44>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <vTaskSwitchContext+0x3e>
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	607b      	str	r3, [r7, #4]
 8004368:	e7fe      	b.n	8004368 <vTaskSwitchContext+0x3c>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	3b01      	subs	r3, #1
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	491a      	ldr	r1, [pc, #104]	; (80043dc <vTaskSwitchContext+0xb0>)
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	4613      	mov	r3, r2
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0e5      	beq.n	8004350 <vTaskSwitchContext+0x24>
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4a13      	ldr	r2, [pc, #76]	; (80043dc <vTaskSwitchContext+0xb0>)
 8004390:	4413      	add	r3, r2
 8004392:	60bb      	str	r3, [r7, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	685a      	ldr	r2, [r3, #4]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	3308      	adds	r3, #8
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d104      	bne.n	80043b4 <vTaskSwitchContext+0x88>
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	605a      	str	r2, [r3, #4]
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <vTaskSwitchContext+0xb4>)
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4a06      	ldr	r2, [pc, #24]	; (80043d8 <vTaskSwitchContext+0xac>)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6013      	str	r3, [r2, #0]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000be4 	.word	0x20000be4
 80043d4:	20000bd0 	.word	0x20000bd0
 80043d8:	20000bc4 	.word	0x20000bc4
 80043dc:	200006ec 	.word	0x200006ec
 80043e0:	200006e8 	.word	0x200006e8

080043e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d109      	bne.n	8004408 <vTaskPlaceOnEventList+0x24>
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	f383 8811 	msr	BASEPRI, r3
 80043fc:	f3bf 8f6f 	isb	sy
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	e7fe      	b.n	8004406 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004408:	4b07      	ldr	r3, [pc, #28]	; (8004428 <vTaskPlaceOnEventList+0x44>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3318      	adds	r3, #24
 800440e:	4619      	mov	r1, r3
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f7fe fea8 	bl	8003166 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004416:	2101      	movs	r1, #1
 8004418:	6838      	ldr	r0, [r7, #0]
 800441a:	f000 fa81 	bl	8004920 <prvAddCurrentTaskToDelayedList>
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200006e8 	.word	0x200006e8

0800442c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <vTaskPlaceOnEventListRestricted+0x26>
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	617b      	str	r3, [r7, #20]
 8004450:	e7fe      	b.n	8004450 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <vTaskPlaceOnEventListRestricted+0x50>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3318      	adds	r3, #24
 8004458:	4619      	mov	r1, r3
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f7fe fe5f 	bl	800311e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	68b8      	ldr	r0, [r7, #8]
 8004470:	f000 fa56 	bl	8004920 <prvAddCurrentTaskToDelayedList>
	}
 8004474:	bf00      	nop
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	200006e8 	.word	0x200006e8

08004480 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <xTaskRemoveFromEventList+0x2a>
 8004496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449a:	f383 8811 	msr	BASEPRI, r3
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	f3bf 8f4f 	dsb	sy
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	e7fe      	b.n	80044a8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	3318      	adds	r3, #24
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe fe92 	bl	80031d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044b4:	4b1d      	ldr	r3, [pc, #116]	; (800452c <xTaskRemoveFromEventList+0xac>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d11d      	bne.n	80044f8 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	3304      	adds	r3, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fe fe89 	bl	80031d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ca:	4b19      	ldr	r3, [pc, #100]	; (8004530 <xTaskRemoveFromEventList+0xb0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d903      	bls.n	80044da <xTaskRemoveFromEventList+0x5a>
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d6:	4a16      	ldr	r2, [pc, #88]	; (8004530 <xTaskRemoveFromEventList+0xb0>)
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4a13      	ldr	r2, [pc, #76]	; (8004534 <xTaskRemoveFromEventList+0xb4>)
 80044e8:	441a      	add	r2, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	3304      	adds	r3, #4
 80044ee:	4619      	mov	r1, r3
 80044f0:	4610      	mov	r0, r2
 80044f2:	f7fe fe14 	bl	800311e <vListInsertEnd>
 80044f6:	e005      	b.n	8004504 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	3318      	adds	r3, #24
 80044fc:	4619      	mov	r1, r3
 80044fe:	480e      	ldr	r0, [pc, #56]	; (8004538 <xTaskRemoveFromEventList+0xb8>)
 8004500:	f7fe fe0d 	bl	800311e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004508:	4b0c      	ldr	r3, [pc, #48]	; (800453c <xTaskRemoveFromEventList+0xbc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800450e:	429a      	cmp	r2, r3
 8004510:	d905      	bls.n	800451e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004512:	2301      	movs	r3, #1
 8004514:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004516:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <xTaskRemoveFromEventList+0xc0>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	e001      	b.n	8004522 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004522:	697b      	ldr	r3, [r7, #20]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000be4 	.word	0x20000be4
 8004530:	20000bc4 	.word	0x20000bc4
 8004534:	200006ec 	.word	0x200006ec
 8004538:	20000b7c 	.word	0x20000b7c
 800453c:	200006e8 	.word	0x200006e8
 8004540:	20000bd0 	.word	0x20000bd0

08004544 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <vTaskInternalSetTimeOutState+0x24>)
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004554:	4b05      	ldr	r3, [pc, #20]	; (800456c <vTaskInternalSetTimeOutState+0x28>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	605a      	str	r2, [r3, #4]
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr
 8004568:	20000bd4 	.word	0x20000bd4
 800456c:	20000bc0 	.word	0x20000bc0

08004570 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d109      	bne.n	8004594 <xTaskCheckForTimeOut+0x24>
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	e7fe      	b.n	8004592 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d109      	bne.n	80045ae <xTaskCheckForTimeOut+0x3e>
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	60fb      	str	r3, [r7, #12]
 80045ac:	e7fe      	b.n	80045ac <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80045ae:	f000 fe7d 	bl	80052ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80045b2:	4b24      	ldr	r3, [pc, #144]	; (8004644 <xTaskCheckForTimeOut+0xd4>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80045c2:	4b21      	ldr	r3, [pc, #132]	; (8004648 <xTaskCheckForTimeOut+0xd8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d007      	beq.n	80045de <xTaskCheckForTimeOut+0x6e>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 80045ce:	4b1e      	ldr	r3, [pc, #120]	; (8004648 <xTaskCheckForTimeOut+0xd8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				xReturn = pdTRUE;
 80045d8:	2301      	movs	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	e02b      	b.n	8004636 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d102      	bne.n	80045ee <xTaskCheckForTimeOut+0x7e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80045e8:	2300      	movs	r3, #0
 80045ea:	61fb      	str	r3, [r7, #28]
 80045ec:	e023      	b.n	8004636 <xTaskCheckForTimeOut+0xc6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b16      	ldr	r3, [pc, #88]	; (800464c <xTaskCheckForTimeOut+0xdc>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d007      	beq.n	800460a <xTaskCheckForTimeOut+0x9a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	69ba      	ldr	r2, [r7, #24]
 8004600:	429a      	cmp	r2, r3
 8004602:	d302      	bcc.n	800460a <xTaskCheckForTimeOut+0x9a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004604:	2301      	movs	r3, #1
 8004606:	61fb      	str	r3, [r7, #28]
 8004608:	e015      	b.n	8004636 <xTaskCheckForTimeOut+0xc6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	697a      	ldr	r2, [r7, #20]
 8004610:	429a      	cmp	r2, r3
 8004612:	d20b      	bcs.n	800462c <xTaskCheckForTimeOut+0xbc>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f7ff ff8f 	bl	8004544 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
 800462a:	e004      	b.n	8004636 <xTaskCheckForTimeOut+0xc6>
		}
		else
		{
			*pxTicksToWait = 0;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004632:	2301      	movs	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004636:	f000 fe67 	bl	8005308 <vPortExitCritical>

	return xReturn;
 800463a:	69fb      	ldr	r3, [r7, #28]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000bc0 	.word	0x20000bc0
 8004648:	200006e8 	.word	0x200006e8
 800464c:	20000bd4 	.word	0x20000bd4

08004650 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004650:	b480      	push	{r7}
 8004652:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004654:	4b03      	ldr	r3, [pc, #12]	; (8004664 <vTaskMissedYield+0x14>)
 8004656:	2201      	movs	r2, #1
 8004658:	601a      	str	r2, [r3, #0]
}
 800465a:	bf00      	nop
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	20000bd0 	.word	0x20000bd0

08004668 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004670:	f000 f852 	bl	8004718 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004674:	4b06      	ldr	r3, [pc, #24]	; (8004690 <prvIdleTask+0x28>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2b01      	cmp	r3, #1
 800467a:	d9f9      	bls.n	8004670 <prvIdleTask+0x8>
			{
				taskYIELD();
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <prvIdleTask+0x2c>)
 800467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800468c:	e7f0      	b.n	8004670 <prvIdleTask+0x8>
 800468e:	bf00      	nop
 8004690:	200006ec 	.word	0x200006ec
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	e00c      	b.n	80046be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	4a12      	ldr	r2, [pc, #72]	; (80046f8 <prvInitialiseTaskLists+0x60>)
 80046b0:	4413      	add	r3, r2
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fe fd06 	bl	80030c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	3301      	adds	r3, #1
 80046bc:	607b      	str	r3, [r7, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2b37      	cmp	r3, #55	; 0x37
 80046c2:	d9ef      	bls.n	80046a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80046c4:	480d      	ldr	r0, [pc, #52]	; (80046fc <prvInitialiseTaskLists+0x64>)
 80046c6:	f7fe fcfd 	bl	80030c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80046ca:	480d      	ldr	r0, [pc, #52]	; (8004700 <prvInitialiseTaskLists+0x68>)
 80046cc:	f7fe fcfa 	bl	80030c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80046d0:	480c      	ldr	r0, [pc, #48]	; (8004704 <prvInitialiseTaskLists+0x6c>)
 80046d2:	f7fe fcf7 	bl	80030c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80046d6:	480c      	ldr	r0, [pc, #48]	; (8004708 <prvInitialiseTaskLists+0x70>)
 80046d8:	f7fe fcf4 	bl	80030c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80046dc:	480b      	ldr	r0, [pc, #44]	; (800470c <prvInitialiseTaskLists+0x74>)
 80046de:	f7fe fcf1 	bl	80030c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80046e2:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <prvInitialiseTaskLists+0x78>)
 80046e4:	4a05      	ldr	r2, [pc, #20]	; (80046fc <prvInitialiseTaskLists+0x64>)
 80046e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80046e8:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <prvInitialiseTaskLists+0x7c>)
 80046ea:	4a05      	ldr	r2, [pc, #20]	; (8004700 <prvInitialiseTaskLists+0x68>)
 80046ec:	601a      	str	r2, [r3, #0]
}
 80046ee:	bf00      	nop
 80046f0:	3708      	adds	r7, #8
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	200006ec 	.word	0x200006ec
 80046fc:	20000b4c 	.word	0x20000b4c
 8004700:	20000b60 	.word	0x20000b60
 8004704:	20000b7c 	.word	0x20000b7c
 8004708:	20000b90 	.word	0x20000b90
 800470c:	20000ba8 	.word	0x20000ba8
 8004710:	20000b74 	.word	0x20000b74
 8004714:	20000b78 	.word	0x20000b78

08004718 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800471e:	e019      	b.n	8004754 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004720:	f000 fdc4 	bl	80052ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004724:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <prvCheckTasksWaitingTermination+0x4c>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3304      	adds	r3, #4
 8004730:	4618      	mov	r0, r3
 8004732:	f7fe fd51 	bl	80031d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004736:	4b0c      	ldr	r3, [pc, #48]	; (8004768 <prvCheckTasksWaitingTermination+0x50>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3b01      	subs	r3, #1
 800473c:	4a0a      	ldr	r2, [pc, #40]	; (8004768 <prvCheckTasksWaitingTermination+0x50>)
 800473e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004740:	4b0a      	ldr	r3, [pc, #40]	; (800476c <prvCheckTasksWaitingTermination+0x54>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	3b01      	subs	r3, #1
 8004746:	4a09      	ldr	r2, [pc, #36]	; (800476c <prvCheckTasksWaitingTermination+0x54>)
 8004748:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800474a:	f000 fddd 	bl	8005308 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f80e 	bl	8004770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <prvCheckTasksWaitingTermination+0x54>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1e1      	bne.n	8004720 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800475c:	bf00      	nop
 800475e:	3708      	adds	r7, #8
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	20000b90 	.word	0x20000b90
 8004768:	20000bbc 	.word	0x20000bbc
 800476c:	20000ba4 	.word	0x20000ba4

08004770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800477e:	2b00      	cmp	r3, #0
 8004780:	d108      	bne.n	8004794 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004786:	4618      	mov	r0, r3
 8004788:	f000 ff6c 	bl	8005664 <vPortFree>
				vPortFree( pxTCB );
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 ff69 	bl	8005664 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004792:	e017      	b.n	80047c4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800479a:	2b01      	cmp	r3, #1
 800479c:	d103      	bne.n	80047a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 ff60 	bl	8005664 <vPortFree>
	}
 80047a4:	e00e      	b.n	80047c4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80047ac:	2b02      	cmp	r3, #2
 80047ae:	d009      	beq.n	80047c4 <prvDeleteTCB+0x54>
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	e7fe      	b.n	80047c2 <prvDeleteTCB+0x52>
	}
 80047c4:	bf00      	nop
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047d2:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <prvResetNextTaskUnblockTime+0x38>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d104      	bne.n	80047e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80047dc:	4b0a      	ldr	r3, [pc, #40]	; (8004808 <prvResetNextTaskUnblockTime+0x3c>)
 80047de:	f04f 32ff 	mov.w	r2, #4294967295
 80047e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80047e4:	e008      	b.n	80047f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047e6:	4b07      	ldr	r3, [pc, #28]	; (8004804 <prvResetNextTaskUnblockTime+0x38>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4a04      	ldr	r2, [pc, #16]	; (8004808 <prvResetNextTaskUnblockTime+0x3c>)
 80047f6:	6013      	str	r3, [r2, #0]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	20000b74 	.word	0x20000b74
 8004808:	20000bdc 	.word	0x20000bdc

0800480c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004812:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <xTaskGetSchedulerState+0x34>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d102      	bne.n	8004820 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800481a:	2301      	movs	r3, #1
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	e008      	b.n	8004832 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004820:	4b08      	ldr	r3, [pc, #32]	; (8004844 <xTaskGetSchedulerState+0x38>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d102      	bne.n	800482e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004828:	2302      	movs	r3, #2
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	e001      	b.n	8004832 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800482e:	2300      	movs	r3, #0
 8004830:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004832:	687b      	ldr	r3, [r7, #4]
	}
 8004834:	4618      	mov	r0, r3
 8004836:	370c      	adds	r7, #12
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr
 8004840:	20000bc8 	.word	0x20000bc8
 8004844:	20000be4 	.word	0x20000be4

08004848 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004854:	2300      	movs	r3, #0
 8004856:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d054      	beq.n	8004908 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800485e:	4b2d      	ldr	r3, [pc, #180]	; (8004914 <xTaskPriorityDisinherit+0xcc>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	693a      	ldr	r2, [r7, #16]
 8004864:	429a      	cmp	r2, r3
 8004866:	d009      	beq.n	800487c <xTaskPriorityDisinherit+0x34>
 8004868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	e7fe      	b.n	800487a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <xTaskPriorityDisinherit+0x50>
 8004884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004888:	f383 8811 	msr	BASEPRI, r3
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	e7fe      	b.n	8004896 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489c:	1e5a      	subs	r2, r3, #1
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d02c      	beq.n	8004908 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d128      	bne.n	8004908 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	3304      	adds	r3, #4
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7fe fc8c 	bl	80031d8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d8:	4b0f      	ldr	r3, [pc, #60]	; (8004918 <xTaskPriorityDisinherit+0xd0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d903      	bls.n	80048e8 <xTaskPriorityDisinherit+0xa0>
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e4:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <xTaskPriorityDisinherit+0xd0>)
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	4a09      	ldr	r2, [pc, #36]	; (800491c <xTaskPriorityDisinherit+0xd4>)
 80048f6:	441a      	add	r2, r3
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f7fe fc0d 	bl	800311e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004908:	697b      	ldr	r3, [r7, #20]
	}
 800490a:	4618      	mov	r0, r3
 800490c:	3718      	adds	r7, #24
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	200006e8 	.word	0x200006e8
 8004918:	20000bc4 	.word	0x20000bc4
 800491c:	200006ec 	.word	0x200006ec

08004920 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800492a:	4b24      	ldr	r3, [pc, #144]	; (80049bc <prvAddCurrentTaskToDelayedList+0x9c>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8004930:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800493a:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3304      	adds	r3, #4
 8004940:	4618      	mov	r0, r3
 8004942:	f7fe fc49 	bl	80031d8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494c:	d10a      	bne.n	8004964 <prvAddCurrentTaskToDelayedList+0x44>
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004954:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3304      	adds	r3, #4
 800495a:	4619      	mov	r1, r3
 800495c:	4819      	ldr	r0, [pc, #100]	; (80049c4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800495e:	f7fe fbde 	bl	800311e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004962:	e026      	b.n	80049b2 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4413      	add	r3, r2
 800496a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004974:	68ba      	ldr	r2, [r7, #8]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	429a      	cmp	r2, r3
 800497a:	d209      	bcs.n	8004990 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800497c:	4b12      	ldr	r3, [pc, #72]	; (80049c8 <prvAddCurrentTaskToDelayedList+0xa8>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3304      	adds	r3, #4
 8004986:	4619      	mov	r1, r3
 8004988:	4610      	mov	r0, r2
 800498a:	f7fe fbec 	bl	8003166 <vListInsert>
}
 800498e:	e010      	b.n	80049b2 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004990:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <prvAddCurrentTaskToDelayedList+0xac>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	4b0a      	ldr	r3, [pc, #40]	; (80049c0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	3304      	adds	r3, #4
 800499a:	4619      	mov	r1, r3
 800499c:	4610      	mov	r0, r2
 800499e:	f7fe fbe2 	bl	8003166 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d202      	bcs.n	80049b2 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 80049ac:	4a08      	ldr	r2, [pc, #32]	; (80049d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6013      	str	r3, [r2, #0]
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000bc0 	.word	0x20000bc0
 80049c0:	200006e8 	.word	0x200006e8
 80049c4:	20000ba8 	.word	0x20000ba8
 80049c8:	20000b78 	.word	0x20000b78
 80049cc:	20000b74 	.word	0x20000b74
 80049d0:	20000bdc 	.word	0x20000bdc

080049d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b08a      	sub	sp, #40	; 0x28
 80049d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80049da:	2300      	movs	r3, #0
 80049dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80049de:	f000 faff 	bl	8004fe0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80049e2:	4b1c      	ldr	r3, [pc, #112]	; (8004a54 <xTimerCreateTimerTask+0x80>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d021      	beq.n	8004a2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80049f2:	1d3a      	adds	r2, r7, #4
 80049f4:	f107 0108 	add.w	r1, r7, #8
 80049f8:	f107 030c 	add.w	r3, r7, #12
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe fb47 	bl	8003090 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004a02:	6879      	ldr	r1, [r7, #4]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	9202      	str	r2, [sp, #8]
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	2300      	movs	r3, #0
 8004a12:	460a      	mov	r2, r1
 8004a14:	4910      	ldr	r1, [pc, #64]	; (8004a58 <xTimerCreateTimerTask+0x84>)
 8004a16:	4811      	ldr	r0, [pc, #68]	; (8004a5c <xTimerCreateTimerTask+0x88>)
 8004a18:	f7ff f8dc 	bl	8003bd4 <xTaskCreateStatic>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <xTimerCreateTimerTask+0x8c>)
 8004a20:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <xTimerCreateTimerTask+0x8c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <xTimerCreateTimerTask+0x74>
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	e7fe      	b.n	8004a46 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004a48:	697b      	ldr	r3, [r7, #20]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000c18 	.word	0x20000c18
 8004a58:	0800594c 	.word	0x0800594c
 8004a5c:	08004b95 	.word	0x08004b95
 8004a60:	20000c1c 	.word	0x20000c1c

08004a64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	; 0x28
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	60f8      	str	r0, [r7, #12]
 8004a6c:	60b9      	str	r1, [r7, #8]
 8004a6e:	607a      	str	r2, [r7, #4]
 8004a70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d109      	bne.n	8004a90 <xTimerGenericCommand+0x2c>
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	623b      	str	r3, [r7, #32]
 8004a8e:	e7fe      	b.n	8004a8e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <xTimerGenericCommand+0x94>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02a      	beq.n	8004aee <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	dc18      	bgt.n	8004adc <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004aaa:	f7ff feaf 	bl	800480c <xTaskGetSchedulerState>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d109      	bne.n	8004ac8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004ab4:	4b10      	ldr	r3, [pc, #64]	; (8004af8 <xTimerGenericCommand+0x94>)
 8004ab6:	6818      	ldr	r0, [r3, #0]
 8004ab8:	f107 0110 	add.w	r1, r7, #16
 8004abc:	2300      	movs	r3, #0
 8004abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac0:	f7fe fcb2 	bl	8003428 <xQueueGenericSend>
 8004ac4:	6278      	str	r0, [r7, #36]	; 0x24
 8004ac6:	e012      	b.n	8004aee <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <xTimerGenericCommand+0x94>)
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	f107 0110 	add.w	r1, r7, #16
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	f7fe fca8 	bl	8003428 <xQueueGenericSend>
 8004ad8:	6278      	str	r0, [r7, #36]	; 0x24
 8004ada:	e008      	b.n	8004aee <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004adc:	4b06      	ldr	r3, [pc, #24]	; (8004af8 <xTimerGenericCommand+0x94>)
 8004ade:	6818      	ldr	r0, [r3, #0]
 8004ae0:	f107 0110 	add.w	r1, r7, #16
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	f7fe fd98 	bl	800361c <xQueueGenericSendFromISR>
 8004aec:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	3728      	adds	r7, #40	; 0x28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	20000c18 	.word	0x20000c18

08004afc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af02      	add	r7, sp, #8
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b06:	4b22      	ldr	r3, [pc, #136]	; (8004b90 <prvProcessExpiredTimer+0x94>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	3304      	adds	r3, #4
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7fe fb5f 	bl	80031d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b20:	f003 0304 	and.w	r3, r3, #4
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d021      	beq.n	8004b6c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	699a      	ldr	r2, [r3, #24]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	18d1      	adds	r1, r2, r3
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	6978      	ldr	r0, [r7, #20]
 8004b36:	f000 f8d1 	bl	8004cdc <prvInsertTimerInActiveList>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01e      	beq.n	8004b7e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b40:	2300      	movs	r3, #0
 8004b42:	9300      	str	r3, [sp, #0]
 8004b44:	2300      	movs	r3, #0
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	2100      	movs	r1, #0
 8004b4a:	6978      	ldr	r0, [r7, #20]
 8004b4c:	f7ff ff8a 	bl	8004a64 <xTimerGenericCommand>
 8004b50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d112      	bne.n	8004b7e <prvProcessExpiredTimer+0x82>
 8004b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5c:	f383 8811 	msr	BASEPRI, r3
 8004b60:	f3bf 8f6f 	isb	sy
 8004b64:	f3bf 8f4f 	dsb	sy
 8004b68:	60fb      	str	r3, [r7, #12]
 8004b6a:	e7fe      	b.n	8004b6a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b72:	f023 0301 	bic.w	r3, r3, #1
 8004b76:	b2da      	uxtb	r2, r3
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	4798      	blx	r3
}
 8004b86:	bf00      	nop
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000c10 	.word	0x20000c10

08004b94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004b9c:	f107 0308 	add.w	r3, r7, #8
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 f857 	bl	8004c54 <prvGetNextExpireTime>
 8004ba6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	4619      	mov	r1, r3
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f000 f803 	bl	8004bb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004bb2:	f000 f8d5 	bl	8004d60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004bb6:	e7f1      	b.n	8004b9c <prvTimerTask+0x8>

08004bb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004bc2:	f7ff fa41 	bl	8004048 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004bc6:	f107 0308 	add.w	r3, r7, #8
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 f866 	bl	8004c9c <prvSampleTimeNow>
 8004bd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d130      	bne.n	8004c3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10a      	bne.n	8004bf4 <prvProcessTimerOrBlockTask+0x3c>
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d806      	bhi.n	8004bf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004be6:	f7ff fa3d 	bl	8004064 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004bea:	68f9      	ldr	r1, [r7, #12]
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ff85 	bl	8004afc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004bf2:	e024      	b.n	8004c3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d008      	beq.n	8004c0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004bfa:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <prvProcessTimerOrBlockTask+0x90>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <prvProcessTimerOrBlockTask+0x50>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <prvProcessTimerOrBlockTask+0x52>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004c0c:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <prvProcessTimerOrBlockTask+0x94>)
 8004c0e:	6818      	ldr	r0, [r3, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f7fe ffa7 	bl	8003b6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004c1e:	f7ff fa21 	bl	8004064 <xTaskResumeAll>
 8004c22:	4603      	mov	r3, r0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10a      	bne.n	8004c3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004c28:	4b09      	ldr	r3, [pc, #36]	; (8004c50 <prvProcessTimerOrBlockTask+0x98>)
 8004c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c2e:	601a      	str	r2, [r3, #0]
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	f3bf 8f6f 	isb	sy
}
 8004c38:	e001      	b.n	8004c3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004c3a:	f7ff fa13 	bl	8004064 <xTaskResumeAll>
}
 8004c3e:	bf00      	nop
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000c14 	.word	0x20000c14
 8004c4c:	20000c18 	.word	0x20000c18
 8004c50:	e000ed04 	.word	0xe000ed04

08004c54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <prvGetNextExpireTime+0x44>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <prvGetNextExpireTime+0x16>
 8004c66:	2201      	movs	r2, #1
 8004c68:	e000      	b.n	8004c6c <prvGetNextExpireTime+0x18>
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d105      	bne.n	8004c84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c78:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <prvGetNextExpireTime+0x44>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60fb      	str	r3, [r7, #12]
 8004c82:	e001      	b.n	8004c88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004c88:	68fb      	ldr	r3, [r7, #12]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	20000c10 	.word	0x20000c10

08004c9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004ca4:	f7ff fa7a 	bl	800419c <xTaskGetTickCount>
 8004ca8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004caa:	4b0b      	ldr	r3, [pc, #44]	; (8004cd8 <prvSampleTimeNow+0x3c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d205      	bcs.n	8004cc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004cb4:	f000 f930 	bl	8004f18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	e002      	b.n	8004cc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004cc6:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <prvSampleTimeNow+0x3c>)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	20000c20 	.word	0x20000c20

08004cdc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d812      	bhi.n	8004d28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	1ad2      	subs	r2, r2, r3
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	699b      	ldr	r3, [r3, #24]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d302      	bcc.n	8004d16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	e01b      	b.n	8004d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004d16:	4b10      	ldr	r3, [pc, #64]	; (8004d58 <prvInsertTimerInActiveList+0x7c>)
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	4619      	mov	r1, r3
 8004d20:	4610      	mov	r0, r2
 8004d22:	f7fe fa20 	bl	8003166 <vListInsert>
 8004d26:	e012      	b.n	8004d4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d206      	bcs.n	8004d3e <prvInsertTimerInActiveList+0x62>
 8004d30:	68ba      	ldr	r2, [r7, #8]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d302      	bcc.n	8004d3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	e007      	b.n	8004d4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004d3e:	4b07      	ldr	r3, [pc, #28]	; (8004d5c <prvInsertTimerInActiveList+0x80>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3304      	adds	r3, #4
 8004d46:	4619      	mov	r1, r3
 8004d48:	4610      	mov	r0, r2
 8004d4a:	f7fe fa0c 	bl	8003166 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004d4e:	697b      	ldr	r3, [r7, #20]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	20000c14 	.word	0x20000c14
 8004d5c:	20000c10 	.word	0x20000c10

08004d60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08e      	sub	sp, #56	; 0x38
 8004d64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d66:	e0c6      	b.n	8004ef6 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	da17      	bge.n	8004d9e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004d6e:	1d3b      	adds	r3, r7, #4
 8004d70:	3304      	adds	r3, #4
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <prvProcessReceivedCommands+0x2e>
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	61fb      	str	r3, [r7, #28]
 8004d8c:	e7fe      	b.n	8004d8c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d94:	6850      	ldr	r0, [r2, #4]
 8004d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d98:	6892      	ldr	r2, [r2, #8]
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f2c0 80a7 	blt.w	8004ef4 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d004      	beq.n	8004dbc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db4:	3304      	adds	r3, #4
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fa0e 	bl	80031d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004dbc:	463b      	mov	r3, r7
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7ff ff6c 	bl	8004c9c <prvSampleTimeNow>
 8004dc4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b09      	cmp	r3, #9
 8004dca:	f200 8094 	bhi.w	8004ef6 <prvProcessReceivedCommands+0x196>
 8004dce:	a201      	add	r2, pc, #4	; (adr r2, 8004dd4 <prvProcessReceivedCommands+0x74>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004dfd 	.word	0x08004dfd
 8004dd8:	08004dfd 	.word	0x08004dfd
 8004ddc:	08004dfd 	.word	0x08004dfd
 8004de0:	08004e6f 	.word	0x08004e6f
 8004de4:	08004e83 	.word	0x08004e83
 8004de8:	08004ecb 	.word	0x08004ecb
 8004dec:	08004dfd 	.word	0x08004dfd
 8004df0:	08004dfd 	.word	0x08004dfd
 8004df4:	08004e6f 	.word	0x08004e6f
 8004df8:	08004e83 	.word	0x08004e83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e02:	f043 0301 	orr.w	r3, r3, #1
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	18d1      	adds	r1, r2, r3
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e1c:	f7ff ff5e 	bl	8004cdc <prvInsertTimerInActiveList>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d067      	beq.n	8004ef6 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e34:	f003 0304 	and.w	r3, r3, #4
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d05c      	beq.n	8004ef6 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	441a      	add	r2, r3
 8004e44:	2300      	movs	r3, #0
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	2300      	movs	r3, #0
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e4e:	f7ff fe09 	bl	8004a64 <xTimerGenericCommand>
 8004e52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d14d      	bne.n	8004ef6 <prvProcessReceivedCommands+0x196>
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	61bb      	str	r3, [r7, #24]
 8004e6c:	e7fe      	b.n	8004e6c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004e80:	e039      	b.n	8004ef6 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <prvProcessReceivedCommands+0x156>
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e7fe      	b.n	8004eb4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb8:	699a      	ldr	r2, [r3, #24]
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	18d1      	adds	r1, r2, r3
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec4:	f7ff ff0a 	bl	8004cdc <prvInsertTimerInActiveList>
					break;
 8004ec8:	e015      	b.n	8004ef6 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d103      	bne.n	8004ee0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8004ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eda:	f000 fbc3 	bl	8005664 <vPortFree>
 8004ede:	e00a      	b.n	8004ef6 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ee6:	f023 0301 	bic.w	r3, r3, #1
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ef2:	e000      	b.n	8004ef6 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004ef4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ef6:	4b07      	ldr	r3, [pc, #28]	; (8004f14 <prvProcessReceivedCommands+0x1b4>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	1d39      	adds	r1, r7, #4
 8004efc:	2200      	movs	r2, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fc20 	bl	8003744 <xQueueReceive>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f47f af2e 	bne.w	8004d68 <prvProcessReceivedCommands+0x8>
	}
}
 8004f0c:	bf00      	nop
 8004f0e:	3730      	adds	r7, #48	; 0x30
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	20000c18 	.word	0x20000c18

08004f18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004f1e:	e047      	b.n	8004fb0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f20:	4b2d      	ldr	r3, [pc, #180]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f2a:	4b2b      	ldr	r3, [pc, #172]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3304      	adds	r3, #4
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f7fe f94d 	bl	80031d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d02d      	beq.n	8004fb0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d90e      	bls.n	8004f84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004f72:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3304      	adds	r3, #4
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f7fe f8f2 	bl	8003166 <vListInsert>
 8004f82:	e015      	b.n	8004fb0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f84:	2300      	movs	r3, #0
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	2300      	movs	r3, #0
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	2100      	movs	r1, #0
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f7ff fd68 	bl	8004a64 <xTimerGenericCommand>
 8004f94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d109      	bne.n	8004fb0 <prvSwitchTimerLists+0x98>
 8004f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa0:	f383 8811 	msr	BASEPRI, r3
 8004fa4:	f3bf 8f6f 	isb	sy
 8004fa8:	f3bf 8f4f 	dsb	sy
 8004fac:	603b      	str	r3, [r7, #0]
 8004fae:	e7fe      	b.n	8004fae <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1b2      	bne.n	8004f20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004fba:	4b07      	ldr	r3, [pc, #28]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004fc0:	4b06      	ldr	r3, [pc, #24]	; (8004fdc <prvSwitchTimerLists+0xc4>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a04      	ldr	r2, [pc, #16]	; (8004fd8 <prvSwitchTimerLists+0xc0>)
 8004fc6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004fc8:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <prvSwitchTimerLists+0xc4>)
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	6013      	str	r3, [r2, #0]
}
 8004fce:	bf00      	nop
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000c10 	.word	0x20000c10
 8004fdc:	20000c14 	.word	0x20000c14

08004fe0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004fe6:	f000 f961 	bl	80052ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004fea:	4b15      	ldr	r3, [pc, #84]	; (8005040 <prvCheckForValidListAndQueue+0x60>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d120      	bne.n	8005034 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ff2:	4814      	ldr	r0, [pc, #80]	; (8005044 <prvCheckForValidListAndQueue+0x64>)
 8004ff4:	f7fe f866 	bl	80030c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ff8:	4813      	ldr	r0, [pc, #76]	; (8005048 <prvCheckForValidListAndQueue+0x68>)
 8004ffa:	f7fe f863 	bl	80030c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <prvCheckForValidListAndQueue+0x6c>)
 8005000:	4a10      	ldr	r2, [pc, #64]	; (8005044 <prvCheckForValidListAndQueue+0x64>)
 8005002:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005004:	4b12      	ldr	r3, [pc, #72]	; (8005050 <prvCheckForValidListAndQueue+0x70>)
 8005006:	4a10      	ldr	r2, [pc, #64]	; (8005048 <prvCheckForValidListAndQueue+0x68>)
 8005008:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800500a:	2300      	movs	r3, #0
 800500c:	9300      	str	r3, [sp, #0]
 800500e:	4b11      	ldr	r3, [pc, #68]	; (8005054 <prvCheckForValidListAndQueue+0x74>)
 8005010:	4a11      	ldr	r2, [pc, #68]	; (8005058 <prvCheckForValidListAndQueue+0x78>)
 8005012:	2110      	movs	r1, #16
 8005014:	200a      	movs	r0, #10
 8005016:	f7fe f971 	bl	80032fc <xQueueGenericCreateStatic>
 800501a:	4602      	mov	r2, r0
 800501c:	4b08      	ldr	r3, [pc, #32]	; (8005040 <prvCheckForValidListAndQueue+0x60>)
 800501e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <prvCheckForValidListAndQueue+0x60>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d005      	beq.n	8005034 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005028:	4b05      	ldr	r3, [pc, #20]	; (8005040 <prvCheckForValidListAndQueue+0x60>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	490b      	ldr	r1, [pc, #44]	; (800505c <prvCheckForValidListAndQueue+0x7c>)
 800502e:	4618      	mov	r0, r3
 8005030:	f7fe fd74 	bl	8003b1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005034:	f000 f968 	bl	8005308 <vPortExitCritical>
}
 8005038:	bf00      	nop
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000c18 	.word	0x20000c18
 8005044:	20000be8 	.word	0x20000be8
 8005048:	20000bfc 	.word	0x20000bfc
 800504c:	20000c10 	.word	0x20000c10
 8005050:	20000c14 	.word	0x20000c14
 8005054:	20000cc4 	.word	0x20000cc4
 8005058:	20000c24 	.word	0x20000c24
 800505c:	08005954 	.word	0x08005954

08005060 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3b04      	subs	r3, #4
 8005070:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3b04      	subs	r3, #4
 800507e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3b04      	subs	r3, #4
 800508e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005090:	4a0c      	ldr	r2, [pc, #48]	; (80050c4 <pxPortInitialiseStack+0x64>)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3b14      	subs	r3, #20
 800509a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3b04      	subs	r3, #4
 80050a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f06f 0202 	mvn.w	r2, #2
 80050ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3b20      	subs	r3, #32
 80050b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050b6:	68fb      	ldr	r3, [r7, #12]
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3714      	adds	r7, #20
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	080050c9 	.word	0x080050c9

080050c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050d2:	4b11      	ldr	r3, [pc, #68]	; (8005118 <prvTaskExitError+0x50>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050da:	d009      	beq.n	80050f0 <prvTaskExitError+0x28>
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	60fb      	str	r3, [r7, #12]
 80050ee:	e7fe      	b.n	80050ee <prvTaskExitError+0x26>
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005102:	bf00      	nop
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0fc      	beq.n	8005104 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800510a:	bf00      	nop
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	2000000c 	.word	0x2000000c
 800511c:	00000000 	.word	0x00000000

08005120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005120:	4b07      	ldr	r3, [pc, #28]	; (8005140 <pxCurrentTCBConst2>)
 8005122:	6819      	ldr	r1, [r3, #0]
 8005124:	6808      	ldr	r0, [r1, #0]
 8005126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800512a:	f380 8809 	msr	PSP, r0
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f04f 0000 	mov.w	r0, #0
 8005136:	f380 8811 	msr	BASEPRI, r0
 800513a:	4770      	bx	lr
 800513c:	f3af 8000 	nop.w

08005140 <pxCurrentTCBConst2>:
 8005140:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005144:	bf00      	nop
 8005146:	bf00      	nop

08005148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005148:	4808      	ldr	r0, [pc, #32]	; (800516c <prvPortStartFirstTask+0x24>)
 800514a:	6800      	ldr	r0, [r0, #0]
 800514c:	6800      	ldr	r0, [r0, #0]
 800514e:	f380 8808 	msr	MSP, r0
 8005152:	f04f 0000 	mov.w	r0, #0
 8005156:	f380 8814 	msr	CONTROL, r0
 800515a:	b662      	cpsie	i
 800515c:	b661      	cpsie	f
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	df00      	svc	0
 8005168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800516a:	bf00      	nop
 800516c:	e000ed08 	.word	0xe000ed08

08005170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005176:	4b44      	ldr	r3, [pc, #272]	; (8005288 <xPortStartScheduler+0x118>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a44      	ldr	r2, [pc, #272]	; (800528c <xPortStartScheduler+0x11c>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d109      	bne.n	8005194 <xPortStartScheduler+0x24>
 8005180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005184:	f383 8811 	msr	BASEPRI, r3
 8005188:	f3bf 8f6f 	isb	sy
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	613b      	str	r3, [r7, #16]
 8005192:	e7fe      	b.n	8005192 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005194:	4b3c      	ldr	r3, [pc, #240]	; (8005288 <xPortStartScheduler+0x118>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a3d      	ldr	r2, [pc, #244]	; (8005290 <xPortStartScheduler+0x120>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d109      	bne.n	80051b2 <xPortStartScheduler+0x42>
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	60fb      	str	r3, [r7, #12]
 80051b0:	e7fe      	b.n	80051b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051b2:	4b38      	ldr	r3, [pc, #224]	; (8005294 <xPortStartScheduler+0x124>)
 80051b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	22ff      	movs	r2, #255	; 0xff
 80051c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051cc:	78fb      	ldrb	r3, [r7, #3]
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4b30      	ldr	r3, [pc, #192]	; (8005298 <xPortStartScheduler+0x128>)
 80051d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051da:	4b30      	ldr	r3, [pc, #192]	; (800529c <xPortStartScheduler+0x12c>)
 80051dc:	2207      	movs	r2, #7
 80051de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051e0:	e009      	b.n	80051f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80051e2:	4b2e      	ldr	r3, [pc, #184]	; (800529c <xPortStartScheduler+0x12c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	4a2c      	ldr	r2, [pc, #176]	; (800529c <xPortStartScheduler+0x12c>)
 80051ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051f6:	78fb      	ldrb	r3, [r7, #3]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b80      	cmp	r3, #128	; 0x80
 8005200:	d0ef      	beq.n	80051e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005202:	4b26      	ldr	r3, [pc, #152]	; (800529c <xPortStartScheduler+0x12c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f1c3 0307 	rsb	r3, r3, #7
 800520a:	2b04      	cmp	r3, #4
 800520c:	d009      	beq.n	8005222 <xPortStartScheduler+0xb2>
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	e7fe      	b.n	8005220 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005222:	4b1e      	ldr	r3, [pc, #120]	; (800529c <xPortStartScheduler+0x12c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	4a1c      	ldr	r2, [pc, #112]	; (800529c <xPortStartScheduler+0x12c>)
 800522a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800522c:	4b1b      	ldr	r3, [pc, #108]	; (800529c <xPortStartScheduler+0x12c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005234:	4a19      	ldr	r2, [pc, #100]	; (800529c <xPortStartScheduler+0x12c>)
 8005236:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	b2da      	uxtb	r2, r3
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005240:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <xPortStartScheduler+0x130>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <xPortStartScheduler+0x130>)
 8005246:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800524a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800524c:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <xPortStartScheduler+0x130>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <xPortStartScheduler+0x130>)
 8005252:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005256:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005258:	f000 f8d6 	bl	8005408 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800525c:	4b11      	ldr	r3, [pc, #68]	; (80052a4 <xPortStartScheduler+0x134>)
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005262:	f000 f8f5 	bl	8005450 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005266:	4b10      	ldr	r3, [pc, #64]	; (80052a8 <xPortStartScheduler+0x138>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a0f      	ldr	r2, [pc, #60]	; (80052a8 <xPortStartScheduler+0x138>)
 800526c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005270:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005272:	f7ff ff69 	bl	8005148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005276:	f7ff f859 	bl	800432c <vTaskSwitchContext>
	prvTaskExitError();
 800527a:	f7ff ff25 	bl	80050c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3718      	adds	r7, #24
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	e000ed00 	.word	0xe000ed00
 800528c:	410fc271 	.word	0x410fc271
 8005290:	410fc270 	.word	0x410fc270
 8005294:	e000e400 	.word	0xe000e400
 8005298:	20000d14 	.word	0x20000d14
 800529c:	20000d18 	.word	0x20000d18
 80052a0:	e000ed20 	.word	0xe000ed20
 80052a4:	2000000c 	.word	0x2000000c
 80052a8:	e000ef34 	.word	0xe000ef34

080052ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052c4:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <vPortEnterCritical+0x54>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3301      	adds	r3, #1
 80052ca:	4a0d      	ldr	r2, [pc, #52]	; (8005300 <vPortEnterCritical+0x54>)
 80052cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052ce:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <vPortEnterCritical+0x54>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d10e      	bne.n	80052f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052d6:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <vPortEnterCritical+0x58>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d009      	beq.n	80052f4 <vPortEnterCritical+0x48>
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	603b      	str	r3, [r7, #0]
 80052f2:	e7fe      	b.n	80052f2 <vPortEnterCritical+0x46>
	}
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	2000000c 	.word	0x2000000c
 8005304:	e000ed04 	.word	0xe000ed04

08005308 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800530e:	4b11      	ldr	r3, [pc, #68]	; (8005354 <vPortExitCritical+0x4c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d109      	bne.n	800532a <vPortExitCritical+0x22>
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	607b      	str	r3, [r7, #4]
 8005328:	e7fe      	b.n	8005328 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <vPortExitCritical+0x4c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	3b01      	subs	r3, #1
 8005330:	4a08      	ldr	r2, [pc, #32]	; (8005354 <vPortExitCritical+0x4c>)
 8005332:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005334:	4b07      	ldr	r3, [pc, #28]	; (8005354 <vPortExitCritical+0x4c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <vPortExitCritical+0x3e>
 800533c:	2300      	movs	r3, #0
 800533e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	2000000c 	.word	0x2000000c
	...

08005360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005360:	f3ef 8009 	mrs	r0, PSP
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	4b15      	ldr	r3, [pc, #84]	; (80053c0 <pxCurrentTCBConst>)
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	f01e 0f10 	tst.w	lr, #16
 8005370:	bf08      	it	eq
 8005372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537a:	6010      	str	r0, [r2, #0]
 800537c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005384:	f380 8811 	msr	BASEPRI, r0
 8005388:	f3bf 8f4f 	dsb	sy
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f7fe ffcc 	bl	800432c <vTaskSwitchContext>
 8005394:	f04f 0000 	mov.w	r0, #0
 8005398:	f380 8811 	msr	BASEPRI, r0
 800539c:	bc09      	pop	{r0, r3}
 800539e:	6819      	ldr	r1, [r3, #0]
 80053a0:	6808      	ldr	r0, [r1, #0]
 80053a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a6:	f01e 0f10 	tst.w	lr, #16
 80053aa:	bf08      	it	eq
 80053ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053b0:	f380 8809 	msr	PSP, r0
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	f3af 8000 	nop.w

080053c0 <pxCurrentTCBConst>:
 80053c0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053c4:	bf00      	nop
 80053c6:	bf00      	nop

080053c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80053e0:	f7fe feec 	bl	80041bc <xTaskIncrementTick>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80053ea:	4b06      	ldr	r3, [pc, #24]	; (8005404 <xPortSysTickHandler+0x3c>)
 80053ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	2300      	movs	r3, #0
 80053f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	e000ed04 	.word	0xe000ed04

08005408 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005408:	b480      	push	{r7}
 800540a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800540c:	4b0b      	ldr	r3, [pc, #44]	; (800543c <vPortSetupTimerInterrupt+0x34>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <vPortSetupTimerInterrupt+0x38>)
 8005414:	2200      	movs	r2, #0
 8005416:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005418:	4b0a      	ldr	r3, [pc, #40]	; (8005444 <vPortSetupTimerInterrupt+0x3c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <vPortSetupTimerInterrupt+0x40>)
 800541e:	fba2 2303 	umull	r2, r3, r2, r3
 8005422:	099b      	lsrs	r3, r3, #6
 8005424:	4a09      	ldr	r2, [pc, #36]	; (800544c <vPortSetupTimerInterrupt+0x44>)
 8005426:	3b01      	subs	r3, #1
 8005428:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800542a:	4b04      	ldr	r3, [pc, #16]	; (800543c <vPortSetupTimerInterrupt+0x34>)
 800542c:	2207      	movs	r2, #7
 800542e:	601a      	str	r2, [r3, #0]
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	e000e010 	.word	0xe000e010
 8005440:	e000e018 	.word	0xe000e018
 8005444:	20000000 	.word	0x20000000
 8005448:	10624dd3 	.word	0x10624dd3
 800544c:	e000e014 	.word	0xe000e014

08005450 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005450:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005460 <vPortEnableVFP+0x10>
 8005454:	6801      	ldr	r1, [r0, #0]
 8005456:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800545a:	6001      	str	r1, [r0, #0]
 800545c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800545e:	bf00      	nop
 8005460:	e000ed88 	.word	0xe000ed88

08005464 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005464:	b480      	push	{r7}
 8005466:	b085      	sub	sp, #20
 8005468:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800546a:	f3ef 8305 	mrs	r3, IPSR
 800546e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b0f      	cmp	r3, #15
 8005474:	d913      	bls.n	800549e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005476:	4a16      	ldr	r2, [pc, #88]	; (80054d0 <vPortValidateInterruptPriority+0x6c>)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005480:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <vPortValidateInterruptPriority+0x70>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	7afa      	ldrb	r2, [r7, #11]
 8005486:	429a      	cmp	r2, r3
 8005488:	d209      	bcs.n	800549e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	607b      	str	r3, [r7, #4]
 800549c:	e7fe      	b.n	800549c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800549e:	4b0e      	ldr	r3, [pc, #56]	; (80054d8 <vPortValidateInterruptPriority+0x74>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054a6:	4b0d      	ldr	r3, [pc, #52]	; (80054dc <vPortValidateInterruptPriority+0x78>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d909      	bls.n	80054c2 <vPortValidateInterruptPriority+0x5e>
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	603b      	str	r3, [r7, #0]
 80054c0:	e7fe      	b.n	80054c0 <vPortValidateInterruptPriority+0x5c>
	}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	e000e3f0 	.word	0xe000e3f0
 80054d4:	20000d14 	.word	0x20000d14
 80054d8:	e000ed0c 	.word	0xe000ed0c
 80054dc:	20000d18 	.word	0x20000d18

080054e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08a      	sub	sp, #40	; 0x28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80054ec:	f7fe fdac 	bl	8004048 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80054f0:	4b57      	ldr	r3, [pc, #348]	; (8005650 <pvPortMalloc+0x170>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d101      	bne.n	80054fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054f8:	f000 f90c 	bl	8005714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054fc:	4b55      	ldr	r3, [pc, #340]	; (8005654 <pvPortMalloc+0x174>)
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	f040 808c 	bne.w	8005622 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01c      	beq.n	800554a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005510:	2208      	movs	r2, #8
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4413      	add	r3, r2
 8005516:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	2b00      	cmp	r3, #0
 8005520:	d013      	beq.n	800554a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f023 0307 	bic.w	r3, r3, #7
 8005528:	3308      	adds	r3, #8
 800552a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	2b00      	cmp	r3, #0
 8005534:	d009      	beq.n	800554a <pvPortMalloc+0x6a>
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	617b      	str	r3, [r7, #20]
 8005548:	e7fe      	b.n	8005548 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d068      	beq.n	8005622 <pvPortMalloc+0x142>
 8005550:	4b41      	ldr	r3, [pc, #260]	; (8005658 <pvPortMalloc+0x178>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	429a      	cmp	r2, r3
 8005558:	d863      	bhi.n	8005622 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800555a:	4b40      	ldr	r3, [pc, #256]	; (800565c <pvPortMalloc+0x17c>)
 800555c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800555e:	4b3f      	ldr	r3, [pc, #252]	; (800565c <pvPortMalloc+0x17c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005564:	e004      	b.n	8005570 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005568:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800556a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	429a      	cmp	r2, r3
 8005578:	d903      	bls.n	8005582 <pvPortMalloc+0xa2>
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f1      	bne.n	8005566 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005582:	4b33      	ldr	r3, [pc, #204]	; (8005650 <pvPortMalloc+0x170>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005588:	429a      	cmp	r2, r3
 800558a:	d04a      	beq.n	8005622 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2208      	movs	r2, #8
 8005592:	4413      	add	r3, r2
 8005594:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	1ad2      	subs	r2, r2, r3
 80055a6:	2308      	movs	r3, #8
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d91e      	bls.n	80055ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4413      	add	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <pvPortMalloc+0xf4>
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	613b      	str	r3, [r7, #16]
 80055d2:	e7fe      	b.n	80055d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	1ad2      	subs	r2, r2, r3
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80055e6:	69b8      	ldr	r0, [r7, #24]
 80055e8:	f000 f8f6 	bl	80057d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80055ec:	4b1a      	ldr	r3, [pc, #104]	; (8005658 <pvPortMalloc+0x178>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	4a18      	ldr	r2, [pc, #96]	; (8005658 <pvPortMalloc+0x178>)
 80055f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055fa:	4b17      	ldr	r3, [pc, #92]	; (8005658 <pvPortMalloc+0x178>)
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	4b18      	ldr	r3, [pc, #96]	; (8005660 <pvPortMalloc+0x180>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	429a      	cmp	r2, r3
 8005604:	d203      	bcs.n	800560e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005606:	4b14      	ldr	r3, [pc, #80]	; (8005658 <pvPortMalloc+0x178>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a15      	ldr	r2, [pc, #84]	; (8005660 <pvPortMalloc+0x180>)
 800560c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800560e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	4b10      	ldr	r3, [pc, #64]	; (8005654 <pvPortMalloc+0x174>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	431a      	orrs	r2, r3
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	2200      	movs	r2, #0
 8005620:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005622:	f7fe fd1f 	bl	8004064 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f003 0307 	and.w	r3, r3, #7
 800562c:	2b00      	cmp	r3, #0
 800562e:	d009      	beq.n	8005644 <pvPortMalloc+0x164>
 8005630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005634:	f383 8811 	msr	BASEPRI, r3
 8005638:	f3bf 8f6f 	isb	sy
 800563c:	f3bf 8f4f 	dsb	sy
 8005640:	60fb      	str	r3, [r7, #12]
 8005642:	e7fe      	b.n	8005642 <pvPortMalloc+0x162>
	return pvReturn;
 8005644:	69fb      	ldr	r3, [r7, #28]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3728      	adds	r7, #40	; 0x28
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	20004924 	.word	0x20004924
 8005654:	20004930 	.word	0x20004930
 8005658:	20004928 	.word	0x20004928
 800565c:	2000491c 	.word	0x2000491c
 8005660:	2000492c 	.word	0x2000492c

08005664 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d046      	beq.n	8005704 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005676:	2308      	movs	r3, #8
 8005678:	425b      	negs	r3, r3
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4413      	add	r3, r2
 800567e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	685a      	ldr	r2, [r3, #4]
 8005688:	4b20      	ldr	r3, [pc, #128]	; (800570c <vPortFree+0xa8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <vPortFree+0x42>
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e7fe      	b.n	80056a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d009      	beq.n	80056c2 <vPortFree+0x5e>
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60bb      	str	r3, [r7, #8]
 80056c0:	e7fe      	b.n	80056c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <vPortFree+0xa8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4013      	ands	r3, r2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d019      	beq.n	8005704 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d115      	bne.n	8005704 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	4b0b      	ldr	r3, [pc, #44]	; (800570c <vPortFree+0xa8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	401a      	ands	r2, r3
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056e8:	f7fe fcae 	bl	8004048 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	685a      	ldr	r2, [r3, #4]
 80056f0:	4b07      	ldr	r3, [pc, #28]	; (8005710 <vPortFree+0xac>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4413      	add	r3, r2
 80056f6:	4a06      	ldr	r2, [pc, #24]	; (8005710 <vPortFree+0xac>)
 80056f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056fa:	6938      	ldr	r0, [r7, #16]
 80056fc:	f000 f86c 	bl	80057d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005700:	f7fe fcb0 	bl	8004064 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005704:	bf00      	nop
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20004930 	.word	0x20004930
 8005710:	20004928 	.word	0x20004928

08005714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005714:	b480      	push	{r7}
 8005716:	b085      	sub	sp, #20
 8005718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800571a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800571e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005720:	4b27      	ldr	r3, [pc, #156]	; (80057c0 <prvHeapInit+0xac>)
 8005722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f003 0307 	and.w	r3, r3, #7
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00c      	beq.n	8005748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	3307      	adds	r3, #7
 8005732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0307 	bic.w	r3, r3, #7
 800573a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800573c:	68ba      	ldr	r2, [r7, #8]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	4a1f      	ldr	r2, [pc, #124]	; (80057c0 <prvHeapInit+0xac>)
 8005744:	4413      	add	r3, r2
 8005746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800574c:	4a1d      	ldr	r2, [pc, #116]	; (80057c4 <prvHeapInit+0xb0>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005752:	4b1c      	ldr	r3, [pc, #112]	; (80057c4 <prvHeapInit+0xb0>)
 8005754:	2200      	movs	r2, #0
 8005756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	4413      	add	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005760:	2208      	movs	r2, #8
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0307 	bic.w	r3, r3, #7
 800576e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a15      	ldr	r2, [pc, #84]	; (80057c8 <prvHeapInit+0xb4>)
 8005774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005776:	4b14      	ldr	r3, [pc, #80]	; (80057c8 <prvHeapInit+0xb4>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800577e:	4b12      	ldr	r3, [pc, #72]	; (80057c8 <prvHeapInit+0xb4>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	1ad2      	subs	r2, r2, r3
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005794:	4b0c      	ldr	r3, [pc, #48]	; (80057c8 <prvHeapInit+0xb4>)
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <prvHeapInit+0xb8>)
 80057a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	4a09      	ldr	r2, [pc, #36]	; (80057d0 <prvHeapInit+0xbc>)
 80057aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057ac:	4b09      	ldr	r3, [pc, #36]	; (80057d4 <prvHeapInit+0xc0>)
 80057ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057b2:	601a      	str	r2, [r3, #0]
}
 80057b4:	bf00      	nop
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr
 80057c0:	20000d1c 	.word	0x20000d1c
 80057c4:	2000491c 	.word	0x2000491c
 80057c8:	20004924 	.word	0x20004924
 80057cc:	2000492c 	.word	0x2000492c
 80057d0:	20004928 	.word	0x20004928
 80057d4:	20004930 	.word	0x20004930

080057d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80057d8:	b480      	push	{r7}
 80057da:	b085      	sub	sp, #20
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80057e0:	4b28      	ldr	r3, [pc, #160]	; (8005884 <prvInsertBlockIntoFreeList+0xac>)
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e002      	b.n	80057ec <prvInsertBlockIntoFreeList+0x14>
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	60fb      	str	r3, [r7, #12]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d8f7      	bhi.n	80057e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	4413      	add	r3, r2
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	429a      	cmp	r2, r3
 8005806:	d108      	bne.n	800581a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	441a      	add	r2, r3
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	441a      	add	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	429a      	cmp	r2, r3
 800582c:	d118      	bne.n	8005860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b15      	ldr	r3, [pc, #84]	; (8005888 <prvInsertBlockIntoFreeList+0xb0>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d00d      	beq.n	8005856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	441a      	add	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	e008      	b.n	8005868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005856:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <prvInsertBlockIntoFreeList+0xb0>)
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	e003      	b.n	8005868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d002      	beq.n	8005876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005876:	bf00      	nop
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	2000491c 	.word	0x2000491c
 8005888:	20004924 	.word	0x20004924

0800588c <__libc_init_array>:
 800588c:	b570      	push	{r4, r5, r6, lr}
 800588e:	4e0d      	ldr	r6, [pc, #52]	; (80058c4 <__libc_init_array+0x38>)
 8005890:	4c0d      	ldr	r4, [pc, #52]	; (80058c8 <__libc_init_array+0x3c>)
 8005892:	1ba4      	subs	r4, r4, r6
 8005894:	10a4      	asrs	r4, r4, #2
 8005896:	2500      	movs	r5, #0
 8005898:	42a5      	cmp	r5, r4
 800589a:	d109      	bne.n	80058b0 <__libc_init_array+0x24>
 800589c:	4e0b      	ldr	r6, [pc, #44]	; (80058cc <__libc_init_array+0x40>)
 800589e:	4c0c      	ldr	r4, [pc, #48]	; (80058d0 <__libc_init_array+0x44>)
 80058a0:	f000 f82c 	bl	80058fc <_init>
 80058a4:	1ba4      	subs	r4, r4, r6
 80058a6:	10a4      	asrs	r4, r4, #2
 80058a8:	2500      	movs	r5, #0
 80058aa:	42a5      	cmp	r5, r4
 80058ac:	d105      	bne.n	80058ba <__libc_init_array+0x2e>
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058b4:	4798      	blx	r3
 80058b6:	3501      	adds	r5, #1
 80058b8:	e7ee      	b.n	8005898 <__libc_init_array+0xc>
 80058ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058be:	4798      	blx	r3
 80058c0:	3501      	adds	r5, #1
 80058c2:	e7f2      	b.n	80058aa <__libc_init_array+0x1e>
 80058c4:	080059f0 	.word	0x080059f0
 80058c8:	080059f0 	.word	0x080059f0
 80058cc:	080059f0 	.word	0x080059f0
 80058d0:	080059f4 	.word	0x080059f4

080058d4 <memcpy>:
 80058d4:	b510      	push	{r4, lr}
 80058d6:	1e43      	subs	r3, r0, #1
 80058d8:	440a      	add	r2, r1
 80058da:	4291      	cmp	r1, r2
 80058dc:	d100      	bne.n	80058e0 <memcpy+0xc>
 80058de:	bd10      	pop	{r4, pc}
 80058e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058e8:	e7f7      	b.n	80058da <memcpy+0x6>

080058ea <memset>:
 80058ea:	4402      	add	r2, r0
 80058ec:	4603      	mov	r3, r0
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d100      	bne.n	80058f4 <memset+0xa>
 80058f2:	4770      	bx	lr
 80058f4:	f803 1b01 	strb.w	r1, [r3], #1
 80058f8:	e7f9      	b.n	80058ee <memset+0x4>
	...

080058fc <_init>:
 80058fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058fe:	bf00      	nop
 8005900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005902:	bc08      	pop	{r3}
 8005904:	469e      	mov	lr, r3
 8005906:	4770      	bx	lr

08005908 <_fini>:
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	bf00      	nop
 800590c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590e:	bc08      	pop	{r3}
 8005910:	469e      	mov	lr, r3
 8005912:	4770      	bx	lr
